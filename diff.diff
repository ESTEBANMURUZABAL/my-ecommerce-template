diff --git a/src/.DS_Store b/src/.DS_Store
deleted file mode 100644
index f38fe9b..0000000
Binary files a/src/.DS_Store and /dev/null differ
diff --git a/src/actions/Account/fetchAccountDetails.js b/../simple-store/src/actions/Account/fetchAccountDetails.js
index 6cd6ea0..57e9fe6 100644
--- a/src/actions/Account/fetchAccountDetails.js
+++ b/../simple-store/src/actions/Account/fetchAccountDetails.js
@@ -1,5 +1,6 @@
 import accountActions from '../../constants/account';
 
+
 export default function fetchAccountDetails(context, payload, done) {
     context.dispatch(accountActions.ACCOUNT_FETCH);
     context.api.account.get().then(function successFn(result) {
diff --git a/src/actions/Admin/bulkBannersUpdate.js b/../simple-store/src/actions/Admin/bulkBannersUpdate.js
index 02f7d29..3dbeaf8 100644
--- a/src/actions/Admin/bulkBannersUpdate.js
+++ b/../simple-store/src/actions/Admin/bulkBannersUpdate.js
@@ -1,7 +1,7 @@
 import applicationActions from '../../constants/application';
 import contentActions from '../../constants/contents';
 
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 export default async function bulkBannerUpdates(context, payload, done) {
     context.dispatch(contentActions.CONTENTS_BULK_SAVE);
@@ -16,7 +16,7 @@ export default async function bulkBannerUpdates(context, payload, done) {
         return context.api.contents.update(id, payload);
     });
     try {
-        await * promises;
+        await Promise.all(promises);
         context.dispatch(contentActions.CONTENTS_BULK_SAVE_SUCCESS, payload);
         context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
             type: 'success',
diff --git a/src/actions/Admin/bulkCollectionsUpdate.js b/../simple-store/src/actions/Admin/bulkCollectionsUpdate.js
index 08b353b..d9fa131 100644
--- a/src/actions/Admin/bulkCollectionsUpdate.js
+++ b/../simple-store/src/actions/Admin/bulkCollectionsUpdate.js
@@ -1,7 +1,7 @@
 import applicationActions from '../../constants/application';
 import collectionActions from '../../constants/collections';
 
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 export default async function bulkCollectionsUpdate(context, payload, done) {
     context.dispatch(collectionActions.COLLECTIONS_BULK_SAVE);
@@ -16,7 +16,7 @@ export default async function bulkCollectionsUpdate(context, payload, done) {
         return context.api.collections.update(id, payload);
     });
     try {
-        await * promises;
+        await Promise.all(promises);
         context.dispatch(collectionActions.COLLECTIONS_BULK_SAVE_SUCCESS, payload);
         context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
             type: 'success',
diff --git a/src/actions/Admin/deleteCollection.js b/src/actions/Admin/deleteCollection.js
deleted file mode 100644
index c9c422d..0000000
--- a/src/actions/Admin/deleteCollection.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import applicationActions from '../../constants/application';
-import collectionActions from '../../constants/collections';
-
-export default function deleteCollection(context, payload, done) {
-    context.dispatch(collectionActions.COLLECTIONS_ITEM_DELETE);
-    context.api.collections.delete(payload).then(function successFn(result) {
-        context.dispatch(collectionActions.COLLECTIONS_ITEM_DELETE_SUCCESS, result);
-        context.dispatch(collectionActions.APPLICATION_POST_NOTIFICATION, {
-            type: 'success',
-            message: 'Deleted'
-        });
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(collectionActions.COLLECTIONS_ITEM_DELETE_ERROR, err.result);
-        context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
-            type: 'error',
-            message: 'Unable to delete'
-        });
-        done && done();
-    });
-}
diff --git a/src/actions/Admin/deleteProduct.js b/src/actions/Admin/deleteProduct.js
deleted file mode 100644
index 7bd0d69..0000000
--- a/src/actions/Admin/deleteProduct.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import applicationActions from '../../constants/application';
-import productActions from '../../constants/products';
-
-export default function deleteProduct(context, payload, done) {
-    context.dispatch(productActions.PRODUCTS_ITEM_DELETE);
-    context.api.products.delete(payload).then(function successFn(result) {
-        context.dispatch(productActions.PRODUCTS_ITEM_DELETE_SUCCESS, result);
-        context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
-            type: 'success',
-            message: 'Deleted'
-        });
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(productActions.PRODUCTS_ITEM_DELETE_ERROR, err.result);
-        context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
-            type: 'error',
-            message: 'Unable to delete'
-        });
-        done && done();
-    });
-}
diff --git a/src/actions/Admin/updateHomepageFeaturedCollections.js b/../simple-store/src/actions/Admin/updateHomepageFeaturedCollections.js
index d48cae3..b94403e 100644
--- a/src/actions/Admin/updateHomepageFeaturedCollections.js
+++ b/../simple-store/src/actions/Admin/updateHomepageFeaturedCollections.js
@@ -20,7 +20,7 @@ export default async function updateHomepageFeaturedCollections(context, payload
             return context.api.collections.update(id, payload);
         });
         try {
-            await * promises;
+            await Promise.all(promises);
             context.dispatch(collectionActions.COLLECTIONS_HOMEPAGE_FEATURED_UPDATE_SUCCESS);
             context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
                 type: 'success',
diff --git a/src/actions/Application/navigate.js b/../simple-store/src/actions/Application/navigate.js
index e5793ba..0c79726 100644
--- a/src/actions/Application/navigate.js
+++ b/../simple-store/src/actions/Application/navigate.js
@@ -1,6 +1,6 @@
 import applicationActions from '../../constants/application';
 
-module.exports = function (actionContext, payload, done) {
+export default function (actionContext, payload, done) {
     actionContext.dispatch(applicationActions.APPLICATION_CHANGE_ROUTE, payload);
     done();
 };
diff --git a/src/actions/Application/triggerPageLoading.js b/../simple-store/src/actions/Application/triggerPageLoading.js
index df61bf8..ab3ec3a 100644
--- a/src/actions/Application/triggerPageLoading.js
+++ b/../simple-store/src/actions/Application/triggerPageLoading.js
@@ -1,5 +1,5 @@
 import applicationActions from '../../constants/application';
-
+// TODO: remove all from PageLoading
 export default function triggerPageLoading(context, payload, done) {
     context.dispatch(applicationActions.APPLICATION_PAGE_LOADING_TRIGGER, payload);
 }
diff --git a/src/actions/Cart/addToCart.js b/../simple-store/src/actions/Cart/addToCart.js
index b2a97eb..f4e635e 100644
--- a/src/actions/Cart/addToCart.js
+++ b/../simple-store/src/actions/Cart/addToCart.js
@@ -11,7 +11,7 @@ import IntlStore from '../../stores/Application/IntlStore';
 import cartActions from '../../constants/cart';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Update cart product
diff --git a/src/actions/Checkout/createCheckout.js b/../simple-store/src/actions/Checkout/createCheckout.js
index 9480818..41497f2 100644
--- a/src/actions/Checkout/createCheckout.js
+++ b/../simple-store/src/actions/Checkout/createCheckout.js
@@ -2,7 +2,7 @@ import checkoutActions from '../../constants/checkout';
 import config from '../../config';
 
 // Initialize debugging utility
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 export default function createCheckout(context, payload, done) {
     context.dispatch(checkoutActions.CHECKOUT_CREATE);
@@ -10,6 +10,9 @@ export default function createCheckout(context, payload, done) {
 
         function dispatchEvents(paymentOptions) {
             context.dispatch(checkoutActions.CHECKOUT_CREATE_SUCCESS, checkout);
+            if (paymentOptions) {
+                context.dispatch(checkoutActions.CHECKOUT_SET_PAYMENT_OPTIONS, paymentOptions);
+            }
             done && done();
         }
 
@@ -20,8 +23,27 @@ export default function createCheckout(context, payload, done) {
             debug('Unable to send hit to Facebook Pixel', err);
         }
 
-        dispatchEvents();
-        
+        // 1) Fetch available payment methods from Switch Payments before notifying of successful checkout creation
+        if (config.switchPayments && config.switchPayments.enabled) {
+            let switchJs = new SwitchJs(config.switchPayments.environment, config.switchPayments.publicKey);
+            switchJs.chargeTypes().then(function successFn(paymentMethods) {
+                let options = paymentMethods.collection;
+                for (let i=0, len=options.length; i<len; i++) { // Process response to have expected data
+                    options[i].provider = 'switch';
+                    options[i].label = {uk: options[i].label, ru: options[i].label, en: options[i].label};
+                }
+                dispatchEvents(options);
+            }, function errorFn(err) {
+                debug('Error fetching available payment methods from Switch Payments', err);
+                dispatchEvents();
+            });
+        }
+
+        // 2) Don't fetch payment methods from Switch
+        else {
+            dispatchEvents();
+        }
+
     }, function checkoutCreateError(err) {
         context.dispatch(checkoutActions.CHECKOUT_CREATE_ERROR, err.result);
         done && done();
diff --git a/src/actions/Checkout/mercadoPagoPay.js b/src/actions/Checkout/mercadoPagoPay.js
deleted file mode 100644
index 1effcbf..0000000
--- a/src/actions/Checkout/mercadoPagoPay.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import checkoutActions from '../../constants/checkout';
-
-export default function mercadoPagoPay(context, payload, done) {
-    context.dispatch(checkoutActions.CHECKOUT_CC_CREATE);
-    context.api.checkouts.pay(payload).then(function successFn(result) {
-        context.dispatch(checkoutActions.CHECKOUT_CC_CREATE_SUCCESS, result);
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(checkoutActions.CHECKOUT_CC_CREATE_ERROR, err.result);
-        done && done();
-    });
-}
diff --git a/src/actions/Checkout/updateCheckout.js b/../simple-store/src/actions/Checkout/updateCheckout.js
index 1cfd0cd..e90d134 100644
--- a/src/actions/Checkout/updateCheckout.js
+++ b/../simple-store/src/actions/Checkout/updateCheckout.js
@@ -10,7 +10,7 @@ import IntlStore from '../../stores/Application/IntlStore';
 import checkoutActions from '../../constants/checkout';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Partial checkout update
@@ -20,7 +20,7 @@ export default function updateCheckout(context, payload, done) {
     // Send hit to Google Analytics
     try {
         let checkout = context.getStore(CheckoutStore).getCheckout();
-        if (payload.data.hasOwnProperty('customer') || payload.data.hasOwnProperty('paymentMethod') || payload.data.hasOwnProperty('shippingMethod') || payload.data.hasOwnProperty('shippingSchedule')) {
+        if (payload.data.hasOwnProperty('customer') || payload.data.hasOwnProperty('paymentMethod') || payload.data.hasOwnProperty('shippingMethod')) {
             checkout.cart.products.forEach(function (product) {
                 let categoryName;
                 if (product.details.metadata.mainCollection) {
@@ -41,8 +41,6 @@ export default function updateCheckout(context, payload, done) {
                 ga.plugin.execute('ec', 'setAction', 'checkout', {step: 1});
             } else if (payload.data.shippingMethod) {
                 ga.plugin.execute('ec', 'setAction', 'checkout', {step: 2});
-              } else if (payload.data.shippingSchedule) {
-                  ga.plugin.execute('ec', 'setAction', 'checkout', {step: 2.2});
             } else if (payload.data.paymentMethod) {
                 ga.plugin.execute('ec', 'setAction', 'checkout', {
                     step: 3,
diff --git a/src/actions/GroupChico/addGroupChico.js b/src/actions/GroupChico/addGroupChico.js
deleted file mode 100644
index 06d472d..0000000
--- a/src/actions/GroupChico/addGroupChico.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupChico';
-
-export default function addGroupChico(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_CHICO_ADD);
-   context.api.groupChico.create(payload).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_CHICO_ADD_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_CHICO_ADD_ERROR, err.result);
-      done && done();
-   });
- }
diff --git a/src/actions/GroupChico/fetchGroupChico.js b/src/actions/GroupChico/fetchGroupChico.js
deleted file mode 100644
index 3160b3b..0000000
--- a/src/actions/GroupChico/fetchGroupChico.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupChico';
-
-export default function fetchGroupChico(context, payload, done) {
-    context.dispatch(groupActions.GROUPS_CHICO_ITEM);
-    context.api.groupChico.get(payload).then(function successFn(result) {
-        context.dispatch(groupActions.GROUPS_CHICO_ITEM_SUCCESS, result);
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(groupActions.GROUPS_CHICO_ITEM_ERROR, err.result);
-        done && done();
-    });
-}
diff --git a/src/actions/GroupChico/updateGroupChico.js b/src/actions/GroupChico/updateGroupChico.js
deleted file mode 100644
index ebb60c5..0000000
--- a/src/actions/GroupChico/updateGroupChico.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupChico';
-
-export default function updateGroupChico(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_CHICO_ITEM_SAVE);
-   context.api.groupChico.update(payload.id, payload.data).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_CHICO_ITEM_SAVE_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_CHICO_ITEM_SAVE_ERROR, err.result);
-       done && done();
-  });
-}
diff --git a/src/actions/GroupGrande/addGroupGrande.js b/src/actions/GroupGrande/addGroupGrande.js
deleted file mode 100644
index 53c5b9d..0000000
--- a/src/actions/GroupGrande/addGroupGrande.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupGrande';
-
-export default function addGroupGrande(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_GRANDE_ADD);
-   context.api.groupGrande.create(payload).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_GRANDE_ADD_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_GRANDE_ADD_ERROR, err.result);
-      done && done();
-   });
- }
diff --git a/src/actions/GroupGrande/fetchGroupGrande.js b/src/actions/GroupGrande/fetchGroupGrande.js
deleted file mode 100644
index 6421ba9..0000000
--- a/src/actions/GroupGrande/fetchGroupGrande.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupGrande';
-
-export default function fetchGroupGrande(context, payload, done) {
-    context.dispatch(groupActions.GROUPS_GRANDE_ITEM);
-    context.api.groupGrande.get(payload).then(function successFn(result) {
-        context.dispatch(groupActions.GROUPS_GRANDE_ITEM_SUCCESS, result);
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(groupActions.GROUPS_GRANDE_ITEM_ERROR, err.result);
-        done && done();
-    });
-}
diff --git a/src/actions/GroupGrande/updateGroupGrande.js b/src/actions/GroupGrande/updateGroupGrande.js
deleted file mode 100644
index 8fa0b2c..0000000
--- a/src/actions/GroupGrande/updateGroupGrande.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupGrande';
-
-export default function updateGroupGrande(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_GRANDE_ITEM_SAVE);
-   context.api.groupGrande.update(payload.id, payload.data).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_GRANDE_ITEM_SAVE_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_GRANDE_ITEM_SAVE_ERROR, err.result);
-       done && done();
-  });
-}
diff --git a/src/actions/GroupMediano/addGroupMediano.js b/src/actions/GroupMediano/addGroupMediano.js
deleted file mode 100644
index b94085b..0000000
--- a/src/actions/GroupMediano/addGroupMediano.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupMediano';
-
-export default function addGroupMediano(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_MEDIANO_ADD);
-   context.api.groupMediano.create(payload).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_MEDIANO_ADD_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_MEDIANO_ADD_ERROR, err.result);
-      done && done();
-   });
- }
diff --git a/src/actions/GroupMediano/fetchGroupMediano.js b/src/actions/GroupMediano/fetchGroupMediano.js
deleted file mode 100644
index 63ec0f2..0000000
--- a/src/actions/GroupMediano/fetchGroupMediano.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupMediano';
-
-export default function fetchGroupMediano(context, payload, done) {
-    context.dispatch(groupActions.GROUPS_MEDIANO_ITEM);
-    context.api.groupMediano.get(payload).then(function successFn(result) {
-        context.dispatch(groupActions.GROUPS_MEDIANO_ITEM_SUCCESS, result);
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(groupActions.GROUPS_MEDIANO_ITEM_ERROR, err.result);
-        done && done();
-    });
-}
diff --git a/src/actions/GroupMediano/updateGroupMediano.js b/src/actions/GroupMediano/updateGroupMediano.js
deleted file mode 100644
index 12010e9..0000000
--- a/src/actions/GroupMediano/updateGroupMediano.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import groupActions from '../../constants/groupMediano';
-
-export default function updateGroupMediano(context, payload, done) {
-   context.dispatch(groupActions.GROUPS_MEDIANO_ITEM_SAVE);
-   context.api.groupMediano.update(payload.id, payload.data).then(function successFn(result) {
-       context.dispatch(groupActions.GROUPS_MEDIANO_ITEM_SAVE_SUCCESS, result);
-       done && done();
-   }, function errorFn(err) {
-       context.dispatch(groupActions.GROUPS_MEDIANO_ITEM_SAVE_ERROR, err.result);
-       done && done();
-  });
-}
diff --git a/src/actions/Orders/createOrder.js b/../simple-store/src/actions/Orders/createOrder.js
index 3a654f8..c1aa2b0 100644
--- a/src/actions/Orders/createOrder.js
+++ b/../simple-store/src/actions/Orders/createOrder.js
@@ -5,20 +5,14 @@ import ga from 'react-ga';
 
 // Flux
 import CheckoutStore from '../../stores/Checkout/CheckoutStore';
-import AccountStore from '../../stores/Account/AccountStore';
 import CollectionsStore from '../../stores/Collections/CollectionsStore';
 import IntlStore from '../../stores/Application/IntlStore';
 import orderActions from '../../constants/orders';
 
-//Product update
-import updateProduct from '../../actions/Admin/updateProduct';
-import fetchProduct from '../../actions/Products/fetchProduct';
-import sendOrderEmail from '../../actions/Orders/sendOrderEmail';
-
 import config from '../../config';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Create a new order
@@ -27,10 +21,10 @@ export default function createOrder(context, payload, done) {
     context.dispatch(orderActions.ORDER_CREATE);
     context.api.orders.create(payload.checkoutId, payload.cartAccessToken).then(function orderCreateSuccess(order) {
 
-        function dispatchOrderCreatedSuccessfullyAndUpdateStocks() {
+        function dispatchOrderCreatedSuccessfully() {
 
             let checkout = context.getStore(CheckoutStore).getCheckout();
-            let user = context.getStore(AccountStore).getAccountDetails();
+
             // Send hit to Google Analytics
             try {
                 checkout.cart.products.forEach(function (product) {
@@ -47,33 +41,6 @@ export default function createOrder(context, payload, done) {
                         price: product.details.pricing.retail,
                         quantity: product.quantity
                     });
-
-                    //update stock of product
-                    try {
-                      let newProductStockNum = product.details.stock - product.quantity;
-                      context.executeAction(updateProduct, {
-                          id: product.id,
-                          data: {
-                              enabled: product.details.enabled,
-                              sku: product.details.sku,
-                              name: product.details.name,
-                              description: product.details.description,
-                              images: product.details.images,
-                              pricing: {
-                                  currency: product.details.pricing.currency,
-                                  list: parseFloat(product.details.pricing.list),
-                                  retail: parseFloat(product.details.pricing.retail),
-                                  vat: parseInt(product.details.pricing.vat)
-                              },
-                              stock: parseInt(newProductStockNum),
-                              tags: product.details.tags,
-                              collections: product.details.collections,
-                              metadata: product.details.metadata
-                          }
-                      });
-                    } catch (err) {
-                        debug('Unable update stock of product', err);
-                    }
                 });
                 ga.plugin.execute('ec', 'setAction', 'purchase', {
                     id: order.id,
@@ -86,62 +53,6 @@ export default function createOrder(context, payload, done) {
                 debug('Unable to send hit to Google Analytics', err);
             }
 
-            let subject = 'Órden #' + order.id;
-
-            if (checkout.customer) {
-              if (checkout.paymentMethod == 'cash') {
-                context.executeAction(sendOrderEmail,
-                  {orderId: order.id,
-                    data: {
-                      template: 'order.created',
-                      email: checkout.customer.email,
-                      subject: subject,
-                      paymentlink: ''
-                    }
-                  });
-                  context.executeAction(sendOrderEmail,
-                    {orderId: order.id,
-                      data: {
-                        template: 'order.created',
-                        email: 'estebannmuruzabal@gmail.com',
-                        subject: subject,
-                        paymentlink: ''
-                      }
-                    });
-              }
-            } else if (user) {
-              if (checkout.paymentMethod == 'cash') {
-                context.executeAction(sendOrderEmail,
-                  {orderId: order.id,
-                    data: {
-                      template: 'order.created',
-                      email: user.email,
-                      subject: subject,
-                      paymentlink: ''
-                    }
-                  });
-                  context.executeAction(sendOrderEmail,
-                    {orderId: order.id,
-                      data: {
-                        template: 'order.created',
-                        email: 'estebannmuruzabal@gmail.com',
-                        subject: subject + 'Cash',
-                        paymentlink: ''
-                      }
-                    });
-              }
-            } else {
-              context.executeAction(sendOrderEmail,
-                {orderId: order.id,
-                  data: {
-                    template: 'order.created',
-                    email: 'estebannmuruzabal@gmail.com',
-                    subject: 'CC',
-                    paymentlink: ''
-                  }
-                });
-            }
-
             // Send hit to Facebook Pixel
             try {
                 fbq('track', 'Purchase', {
@@ -157,8 +68,32 @@ export default function createOrder(context, payload, done) {
             done && done();
         }
 
-        dispatchOrderCreatedSuccessfullyAndUpdateStocks();
+        // 1) Payment method provided by switch
+        // Create charge before notifying of successful order creation
+        if (payload.paymentDetails.provider === 'switch') {
+            let eventsAPIBaseUrl = config.api.atlas.baseUrl;
+            let switchJs = new SwitchJs(config.switchPayments.environment, config.switchPayments.publicKey);
+            switchJs.charge({
+                popUp: false,
+                amount: payload.paymentDetails.amount,
+                currency: payload.paymentDetails.currency,
+                metadata: {orderId: order.id},
+                eventsUrl: `${eventsAPIBaseUrl}/orders/${order.id}/spwh`,
+                instrument: Object.assign(payload.paymentDetails.instrument, {
+                    type: payload.paymentDetails.chargeType,
+                    country: 'UA'
+                })
+            }).then(function successFn() {
+                dispatchOrderCreatedSuccessfully();
+            }, function errorFn() {
+                dispatchOrderCreatedSuccessfully();
+            });
+        }
 
+        // 2) Payment method NOT provided by switch
+        else {
+            dispatchOrderCreatedSuccessfully();
+        }
 
     }, function orderCreateError(orderErr) {
         context.dispatch(orderActions.ORDER_CREATE_ERROR, orderErr.result);
diff --git a/src/actions/Orders/sendOrderEmailAdmin.js b/src/actions/Orders/sendOrderEmailAdmin.js
deleted file mode 100644
index d0d850a..0000000
--- a/src/actions/Orders/sendOrderEmailAdmin.js
+++ /dev/null
@@ -1,17 +0,0 @@
-import applicationActions from '../../constants/application';
-import orderActions from '../../constants/orders';
-
-export default function sendOrderEmailAdmin(context, payload, done) {
-    context.dispatch(orderActions.ORDERS_SEND_EMAIL);
-    context.api.orders.sendAdminEmail(payload.orderId, payload.data).then(function successFn(result) {
-        context.dispatch(orderActions.ORDERS_SEND_EMAIL_SUCCESS, result);
-        done && done();
-    }, function errorFn(err) {
-        context.dispatch(orderActions.ORDERS_SEND_EMAIL_ERROR, err);
-        context.dispatch(applicationActions.APPLICATION_POST_NOTIFICATION, {
-            type: 'error',
-            message: 'Unable to send email'
-        });
-        done && done();
-    });
-}
diff --git a/../simple-store/src/actions/Orders/updateShippingDetails.js b/../simple-store/src/actions/Orders/updateShippingDetails.js
new file mode 100644
index 0000000..41c1dcb
--- /dev/null
+++ b/../simple-store/src/actions/Orders/updateShippingDetails.js
@@ -0,0 +1,12 @@
+import orderActions from '../../constants/orders';
+
+export default function updateShippingDetails(context, payload, done) {
+    context.dispatch(orderActions.ORDERS_UPDATE);
+    context.api.orders.updateShippingDetails(payload.orderId, payload.shippingDetails).then(function successFn(result) {
+        context.dispatch(orderActions.ORDERS_UPDATE_SUCCESS, result);
+        done && done();
+    }, function errorFn(err) {
+        context.dispatch(orderActions.ORDERS_UPDATE_ERROR, err.result);
+        done && done();
+    });
+}
diff --git a/src/api/account.js b/../simple-store/src/api/account.js
index fe5d178..1eb3148 100644
--- a/src/api/account.js
+++ b/../simple-store/src/api/account.js
@@ -3,6 +3,7 @@
  */
 import superagent from 'superagent';
 
+let debug = require('debug')('simple-store');
 /**
  * Atlas Account API wrapper
  */
@@ -41,7 +42,6 @@ class AccountAPI {
     login(payload) {
         return new Promise((resolve, reject) => {
             let request = superagent.post(`${this.baseUrl}/account/login`).send(payload);
-            
             this._wrapAndRequest(request, resolve, reject);
         });
     }
diff --git a/src/api/checkouts.js b/../simple-store/src/api/checkouts.js
index 5a0e096..7449277 100644
--- a/src/api/checkouts.js
+++ b/../simple-store/src/api/checkouts.js
@@ -2,7 +2,6 @@
  * Imports
  */
 import superagent from 'superagent';
-import { log } from 'util';
 
 /**
  * Atlas Checkouts API wrapper
@@ -56,17 +55,6 @@ class CheckoutsAPI {
     /**
      * Partial Checkout updates
      */
-    pay(payload) {
-        console.log('payingg:', payload);
-        return new Promise((resolve, reject) => {
-            let request = superagent.post(`https://api.mercadopago.com/oauth/${token}`).send(payload);
-            this._wrapAndRequest(request, resolve, reject);
-        });
-    }
-
-        /**
-     * Partial Checkout updates
-     */
     patch(checkoutId, payload, cartAccessToken) {
         return new Promise((resolve, reject) => {
             let request = superagent.patch(`${this.baseUrl}/checkouts/${checkoutId}`).send(payload);
diff --git a/src/api/collections.js b/../simple-store/src/api/collections.js
index db1d864..f201dc7 100644
--- a/src/api/collections.js
+++ b/../simple-store/src/api/collections.js
@@ -2,7 +2,6 @@
  * Imports
  */
 import superagent from 'superagent';
-import { log } from 'util';
 
 /**
  * Atlas Collections API wrapper
@@ -28,7 +27,6 @@ class CollectionsAPI {
             request.set('Authorization', this.getAuthToken());
         }
         request.end(function (err, result) {
-            console.log(request, result);
             if (err) {
                 reject({status: err.status, result: (result) ? result.body : null});
             } else {
@@ -43,7 +41,6 @@ class CollectionsAPI {
     create(payload) {
         return new Promise((resolve, reject) => {
             let request = superagent.post(`${this.baseUrl}/collections`).send(payload);
-            console.log(request);
             this._wrapAndRequest(request, resolve, reject);
         });
     }
@@ -87,16 +84,6 @@ class CollectionsAPI {
             this._wrapAndRequest(request, resolve, reject);
         });
     }
-
-    /**
-     * Delete Collection
-     */
-     delete(collectionId) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.delete(`${this.baseUrl}/collections/${collectionId}`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
 }
 
 /**
diff --git a/src/api/groupChico.js b/src/api/groupChico.js
deleted file mode 100644
index 399b746..0000000
--- a/src/api/groupChico.js
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
-  * Imports
-  */
- import superagent from 'superagent';
-
- /**
-  * Atlas Groups API wrapper
-  */
- class GroupChicoAPI {
-
-     /**
-      * Constructor
-      * @param options  Object containing ATLAS settings
-      * @param getAuthToken  Method that returns the Authorization token
-      */
-     constructor({options, getAuthToken}) {
-         this.baseUrl = options.baseUrl;
-         this.getAuthToken = getAuthToken;
-     }
-
-     /**
-      * All API calls should be wrapped/handled/called by this in method order
-      * for any common additional stuff to be done (e.g. adding Authorization headers)
-      */
-     _wrapAndRequest(request, resolve, reject) {
-         if (this.getAuthToken()) {
-             request.set('Authorization', this.getAuthToken());
-         }
-         request.end(function (err, result) {
-             if (err) {
-                 reject({status: err.status, result: (result) ? result.body : null});
-             } else {
-                 resolve(result.body);
-             }
-         });
-     }
-
-     /**
-      * Create new Group
-      */
-     create(payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.post(`${this.baseUrl}/groupChico`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Groups group
-      */
-     find(params) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupChico`).query(params || {});
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch Group with given ID
-      */
-     get(groupChicoId) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupChico/${groupChicoId}`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch all the Groups
-      */
-     getAll() {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupChico`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Update Group
-      */
-     update(groupChicoId, payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.put(`${this.baseUrl}/groupChico/${groupChicoId}`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Delete Group
-      */
-      delete(groupChicoId) {
-          return new Promise((resolve, reject) => {
-              let request = superagent.delete(`${this.baseUrl}/groupChico/${groupChicoId}`);
-              this._wrapAndRequest(request, resolve, reject);
-          });
-      }
- }
-
- /**
-  * Exports
-  */
- export default GroupChicoAPI;
diff --git a/src/api/groupGrande.js b/src/api/groupGrande.js
deleted file mode 100644
index 8c6f41f..0000000
--- a/src/api/groupGrande.js
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
-  * Imports
-  */
- import superagent from 'superagent';
-
- /**
-  * Atlas Groups API wrapper
-  */
- class GroupGrandeAPI {
-
-     /**
-      * Constructor
-      * @param options  Object containing ATLAS settings
-      * @param getAuthToken  Method that returns the Authorization token
-      */
-     constructor({options, getAuthToken}) {
-         this.baseUrl = options.baseUrl;
-         this.getAuthToken = getAuthToken;
-     }
-
-     /**
-      * All API calls should be wrapped/handled/called by this in method order
-      * for any common additional stuff to be done (e.g. adding Authorization headers)
-      */
-     _wrapAndRequest(request, resolve, reject) {
-         if (this.getAuthToken()) {
-             request.set('Authorization', this.getAuthToken());
-         }
-         request.end(function (err, result) {
-             if (err) {
-                 reject({status: err.status, result: (result) ? result.body : null});
-             } else {
-                 resolve(result.body);
-             }
-         });
-     }
-
-     /**
-      * Create new Group
-      */
-     create(payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.post(`${this.baseUrl}/groupGrande`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Groups group
-      */
-     find(params) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupGrande`).query(params || {});
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch Group with given ID
-      */
-     get(groupGrandeId) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupGrande/${groupGrandeId}`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch all the Groups
-      */
-     getAll() {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupGrande`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Update Group
-      */
-     update(groupGrandeId, payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.put(`${this.baseUrl}/groupGrande/${groupGrandeId}`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Delete Group
-      */
-      delete(groupGrandeId) {
-          return new Promise((resolve, reject) => {
-              let request = superagent.delete(`${this.baseUrl}/groupGrande/${groupGrandeId}`);
-              this._wrapAndRequest(request, resolve, reject);
-          });
-      }
- }
-
- /**
-  * Exports
-  */
- export default GroupGrandeAPI;
diff --git a/src/api/groupMediano.js b/src/api/groupMediano.js
deleted file mode 100644
index d8720ee..0000000
--- a/src/api/groupMediano.js
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
-  * Imports
-  */
- import superagent from 'superagent';
-
- /**
-  * Atlas Groups API wrapper
-  */
- class GroupMedianoAPI {
-
-     /**
-      * Constructor
-      * @param options  Object containing ATLAS settings
-      * @param getAuthToken  Method that returns the Authorization token
-      */
-     constructor({options, getAuthToken}) {
-         this.baseUrl = options.baseUrl;
-         this.getAuthToken = getAuthToken;
-     }
-
-     /**
-      * All API calls should be wrapped/handled/called by this in method order
-      * for any common additional stuff to be done (e.g. adding Authorization headers)
-      */
-     _wrapAndRequest(request, resolve, reject) {
-         if (this.getAuthToken()) {
-             request.set('Authorization', this.getAuthToken());
-         }
-         request.end(function (err, result) {
-             if (err) {
-                 reject({status: err.status, result: (result) ? result.body : null});
-             } else {
-                 resolve(result.body);
-             }
-         });
-     }
-
-     /**
-      * Create new Group
-      */
-     create(payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.post(`${this.baseUrl}/groupMediano`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Groups group
-      */
-     find(params) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupMediano`).query(params || {});
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch Group with given ID
-      */
-     get(groupMedianoId) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupMediano/${groupMedianoId}`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Fetch all the Groups
-      */
-     getAll() {
-         return new Promise((resolve, reject) => {
-             let request = superagent.get(`${this.baseUrl}/groupMediano`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Update Group
-      */
-     update(groupMedianoId, payload) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.put(`${this.baseUrl}/groupMediano/${groupMedianoId}`).send(payload);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
-
-     /**
-      * Delete Group
-      */
-      delete(groupMedianoId) {
-          return new Promise((resolve, reject) => {
-              let request = superagent.delete(`${this.baseUrl}/groupMediano/${groupMedianoId}`);
-              this._wrapAndRequest(request, resolve, reject);
-          });
-      }
- }
-
- /**
-  * Exports
-  */
- export default GroupMedianoAPI;
diff --git a/src/api/index.js b/../simple-store/src/api/index.js
index e66bb05..d1838ce 100644
--- a/src/api/index.js
+++ b/../simple-store/src/api/index.js
@@ -7,9 +7,6 @@ import CheckoutsAPI from './checkouts';
 import CollectionsAPI from './collections';
 import ContentsAPI from './contents';
 import CustomersAPI from './customers';
-import GroupMedianoAPI from './groupMediano';
-import GroupChicoAPI from './groupChico';
-import GroupGrandeAPI from './groupGrande';
 import FilesAPI from './files';
 import OrdersAPI from './orders';
 import ProductsAPI from './products';
@@ -24,9 +21,6 @@ class API {
         this.checkouts = new CheckoutsAPI({options: options.atlas, getAuthToken});
         this.collections = new CollectionsAPI({options: options.atlas, getAuthToken});
         this.contents = new ContentsAPI({options: options.atlas, getAuthToken});
-        this.groupChico = new GroupChicoAPI({options: options.atlas, getAuthToken});
-        this.groupMediano = new GroupMedianoAPI({options: options.atlas, getAuthToken});
-        this.groupGrande = new GroupGrandeAPI({options: options.atlas, getAuthToken});
         this.customers = new CustomersAPI({options: options.atlas, getAuthToken});
         this.files = new FilesAPI({options: options.atlas, getAuthToken});
         this.orders = new OrdersAPI({options: options.atlas, getAuthToken});
diff --git a/src/api/orders.js b/../simple-store/src/api/orders.js
index 96e4aae..beba632 100644
--- a/src/api/orders.js
+++ b/../simple-store/src/api/orders.js
@@ -35,16 +35,6 @@ class OrdersAPI {
         });
     }
 
-    _wrapAndRequestWithoutAuthorization(request, resolve, reject) {
-        request.end(function (err, result) {
-            if (err) {
-                reject({status: err.status, result: (result) ? result.body : null});
-            } else {
-                resolve(result.body);
-            }
-        });
-    }
-
     /**
      * Create new Order
      */
@@ -85,13 +75,6 @@ class OrdersAPI {
     /**
      * Trigger sending of email template in regard to given order ID
      */
-    sendAdminEmail(orderId, data) {
-        return new Promise((resolve, reject) => {
-            let request = superagent.post(`${this.baseUrl}/orders/${orderId}/email`).send(data);
-            this._wrapAndRequestWithoutAuthorization(request, resolve, reject);
-        });
-    }
-
     sendEmail(orderId, data) {
         return new Promise((resolve, reject) => {
             let request = superagent.post(`${this.baseUrl}/orders/${orderId}/email`).send(data);
@@ -111,6 +94,18 @@ class OrdersAPI {
             this._wrapAndRequest(request, resolve, reject);
         });
     }
+
+    /**
+     *
+     * @param orderId
+     * @param shippingDetails - the new shippingDetails
+     */
+    updateShippingDetails(orderId, shippingDetails) {
+        return new Promise((resolve, reject) => {
+            let request = superagent.patch(`${this.baseUrl}/orders/${orderId}`).send({shippingDetails});
+            this._wrapAndRequest(request, resolve, reject);
+        });
+    }
 }
 
 /**
diff --git a/src/api/products.js b/../simple-store/src/api/products.js
index cfb3e7b..dfed1ed 100644
--- a/src/api/products.js
+++ b/../simple-store/src/api/products.js
@@ -55,15 +55,6 @@ class ProductsAPI {
         });
     }
 
-    /**
-     * Delete Product
-     */
-     delete(productId) {
-         return new Promise((resolve, reject) => {
-             let request = superagent.delete(`${this.baseUrl}/products/${productId}`);
-             this._wrapAndRequest(request, resolve, reject);
-         });
-     }
     /**
      * Fetch Product with given ID
      */
diff --git a/src/app.js b/../simple-store/src/app.js
index 01c299b..1dc465a 100644
--- a/src/app.js
+++ b/../simple-store/src/app.js
@@ -19,15 +19,6 @@ import ContentDetailsStore from './stores/Contents/ContentDetailsStore';
 import CustomersListStore from './stores/Customers/CustomersListStore';
 import DrawerStore from './stores/Application/DrawerStore';
 import FileUploadStore from './stores/Files/FileUploadStore';
-import GroupChicoAddStore from './stores/GroupChico/GroupChicoAddStore';
-import GroupChicoListStore from './stores/GroupChico/GroupChicoListStore';
-import GroupChicoDetailsStore from './stores/GroupChico/GroupChicoDetailsStore';
-import GroupMedianoAddStore from './stores/GroupMediano/GroupMedianoAddStore';
-import GroupMedianoListStore from './stores/GroupMediano/GroupMedianoListStore';
-import GroupMedianoDetailsStore from './stores/GroupMediano/GroupMedianoDetailsStore';
-import GroupGrandeAddStore from './stores/GroupGrande/GroupGrandeAddStore';
-import GroupGrandeListStore from './stores/GroupGrande/GroupGrandeListStore';
-import GroupGrandeDetailsStore from './stores/GroupGrande/GroupGrandeDetailsStore';
 import IntlStore from './stores/Application/IntlStore';
 import LoginStore from './stores/Account/LoginStore';
 import NotificationQueueStore from './stores/Application/NotificationQueueStore';
@@ -57,55 +48,47 @@ import apiPlugin from './utils/apiPlugin';
  */
 const app = new Fluxible({
     component: Routes,
-    stores: [
-        AccountStore,
-        ApplicationStore,
-        CartStore,
-        CheckoutStore,
-        CollectionsAddStore,
-        CollectionsFeaturedHomepage,
-        CollectionsStore,
-        CollectionsListStore,
-        CollectionDetailsStore,
-        ContentsAddStore,
-        ContentsListStore,
-        ContentDetailsStore,
-        CustomersListStore,
-        DrawerStore,
-        FileUploadStore,
-        GroupChicoAddStore,
-        GroupChicoListStore,
-        GroupChicoDetailsStore,
-        GroupMedianoAddStore,
-        GroupMedianoListStore,
-        GroupMedianoDetailsStore,
-        GroupGrandeAddStore,
-        GroupGrandeListStore,
-        GroupGrandeDetailsStore,
-        IntlStore,
-        LoginStore,
-        NotificationQueueStore,
-        OrderDetailsStore,
-        OrderEmailStore,
-        OrdersListStore,
-        OrderStore,
-        PageLoadingStore,
-        ProductContentsStore,
-        ProductDetailsStore,
-        ProductsAddStore,
-        ProductsHomepageStore,
-        ProductsListStore,
-        ProductSuggestionsStore,
-        RegisterStore,
-        ResetStore,
-        ResponsiveStore
-    ]
 });
 
 // Plug plugins
 app.plug(apiPlugin);
 
+
+// Register stores
+app.registerStore(AccountStore);
+app.registerStore(ApplicationStore);
+app.registerStore(CartStore);
+app.registerStore(CheckoutStore);
+app.registerStore(CollectionsAddStore);
+app.registerStore(CollectionsFeaturedHomepage);
+app.registerStore(CollectionsStore);
+app.registerStore(CollectionsListStore);
+app.registerStore(CollectionDetailsStore);
+app.registerStore(ContentsAddStore);
+app.registerStore(ContentsListStore);
+app.registerStore(ContentDetailsStore);
+app.registerStore(CustomersListStore);
+app.registerStore(DrawerStore);
+app.registerStore(FileUploadStore);
+app.registerStore(IntlStore);
+app.registerStore(LoginStore);
+app.registerStore(NotificationQueueStore);
+app.registerStore(OrderDetailsStore);
+app.registerStore(OrderEmailStore);
+app.registerStore(OrdersListStore);
+app.registerStore(OrderStore);
+app.registerStore(PageLoadingStore);
+app.registerStore(ProductContentsStore);
+app.registerStore(ProductDetailsStore);
+app.registerStore(ProductsAddStore);
+app.registerStore(ProductsHomepageStore);
+app.registerStore(ProductsListStore);
+app.registerStore(ProductSuggestionsStore);
+app.registerStore(RegisterStore);
+app.registerStore(ResetStore);
+app.registerStore(ResponsiveStore);
+
 /**
  * Export
  */
-export default app;
+module.exports = app;
diff --git a/src/client.js b/../simple-store/src/client.js
index f4d55f5..976dbd6 100644
--- a/src/client.js
+++ b/../simple-store/src/client.js
@@ -1,36 +1,34 @@
 /**
  * Imports.
  */
-/*global App, document, window */
+/*global document, window */
 import Debug from 'debug';
 import React from 'react';
-import Router from 'react-router';
+import ReactDOM from 'react-dom';
+import { BrowserRouter } from 'react-router-dom';
+import { matchRoutes, renderRoutes } from 'react-router-config';
 import ga from 'react-ga';
-import {FluxibleComponent} from 'fluxible-addons-react';
+import { FluxibleComponent } from 'fluxible-addons-react';
+import { addLocaleData, IntlProvider } from 'react-intl';
 
 // Flux
 import ApplicationStore from './stores/Application/ApplicationStore';
 import CartStore from './stores/Cart/CartStore';
 
-import clearRouteErrors from './actions/Application/clearRouteErrors';
-import fetchAccountDetails from './actions/Account/fetchAccountDetails';
-import fetchOrCreateCart from './actions/Cart/fetchOrCreateCart';
 import navigateAction from './actions/Application/navigate';
 import pageWidthChanged from './actions/Application/pageWidthChanged';
-import triggerPageLoading from './actions/Application/triggerPageLoading';
 
 // Utils
 import fetchData from './utils/fetchData';
-import fetchPageTitleAndSnippets from './utils/fetchPageTitleAndSnippets';
 import {loadIntlPolyfill, loadLocaleData} from './utils/intlClientPolyfill';
 
+import DataLoader from './dataLoader';
 import config from './config';
+import routes from './routes';
 
-// Setup and initialize debugging utility.
-const debug = Debug('tienda765');
 
-// For chrome dev tool support.
-window.React = React;
+// Setup and initialize debugging utility.
+const debug = Debug('simple-store');
 
 // State sent from the server.
 let dehydratedState = window.App;
@@ -39,27 +37,6 @@ let dehydratedState = window.App;
  * Helper methods
  */
 
-function dispatchClearRouteErrors(context) {
-    return new Promise(function (resolve, reject) {
-        context.executeAction(clearRouteErrors, {}, function () { resolve(); });
-    });
-}
-
-function dispatchFetchOrCreateCart(context) {
-    return new Promise(function (resolve, reject) {
-        context.executeAction(fetchOrCreateCart, {
-            cartId: context.getStore(CartStore).getCartId(),
-            cartAccessToken: context.getStore(CartStore).getCartAccessToken()
-        }, function () { resolve(); });
-    });
-}
-
-function dispatchGetAccountDetails(context) {
-    return new Promise(function (resolve, reject) {
-        context.executeAction(fetchAccountDetails, {}, function () { resolve(); });
-    });
-}
-
 function dispatchPageResize(context) {
     return new Promise(function (resolve, reject) {
         context.executeAction(pageWidthChanged, window.innerWidth, function () { resolve(); });
@@ -71,31 +48,10 @@ function dispatchPageResize(context) {
  * Everything that should be run after certain polyfills are initialized (e.g. Intl in Safari browser) should
  * be encapsulated in this method (e.g. fluxible app require, which needs Intl).
  */
-function runApp() {
+function runApp(locale, messages) {
 
     var app = require('./app');
 
-    // Render application with re-hydrated state.
-    function RenderApp(context, Handler) {
-        return new Promise(function (resolve, reject) {
-            debug('React Rendering');
-            let mountNode = document.getElementById('app');
-            let Component = React.createFactory(Handler);
-            React.render(
-                React.createElement(
-                    FluxibleComponent,
-                    { context: context.getComponentContext() },
-                    Component()
-                ),
-                mountNode,
-                function () {
-                    debug('React Rendered');
-                    resolve();
-                }
-            );
-        });
-    }
-
     // Initialize Google Analytics
     if (config.googleAnalytics.enabled === true) {
         debug('Initialize Google Analytics');
@@ -114,85 +70,53 @@ function runApp() {
 
     // Re-hydrate application state.
     debug('rehydrating app');
-    app.rehydrate(dehydratedState, function (err, context) {
+    app.rehydrate(dehydratedState, async function (err, context) {
         if (err) {
             throw err;
         }
         window.context = context;
 
-        var firstRender = true;
-        Router.run(app.getComponent(), Router.HistoryLocation, async function (Handler, state) {
+        let mountNode = document.getElementById('app');
 
-            // Track Pageviews with Google Analytics
-            if (config.googleAnalytics.enabled === true) {
-                debug('Track pageview', state.pathname);
-                ga.pageview(state.pathname);
-            }
+        // Track Pageviews with Google Analytics
+        if (config.googleAnalytics.enabled === true) {
+            debug('Track pageview', window.location.pathname);
+            ga.pageview(window.location.pathname);
+        }
 
-            // Send hit to Facebook Pixel
-            try {
-                fbq('track', 'PageView');
-            } catch (err) {
-                debug('Unable to send hit to Facebook Pixel', err);
-            }
+        // Send hit to Facebook Pixel
+        try {
+            fbq('track', 'PageView');
+        } catch (err) {
+            debug('Unable to send hit to Facebook Pixel', err);
+        }
 
-            if (firstRender) {
-                debug('First render');
-
-                // When first loading the app on the client, trigger fetching of user account
-                // details before proceding so that, if a user is logged in, this information
-                // is readily available to the application (e.g. for limiting access to certain pages)
-                await dispatchGetAccountDetails(context);
-
-                // Now that we have the account figured out, let's figure out the state of the cart,
-                // fetching any one that we currently have or creating a new one if necessary
-                await dispatchFetchOrCreateCart(context);
-
-                // Don't call the action on the first render on top of the server rehydration
-                // Otherwise there is a race condition where the action gets executed before
-                // render has been called, which can cause the checksum to fail.
-                firstRender = false; // This has to be done before render
-                await RenderApp(context, Handler);
-
-                // Add listener to page size changes and trigger respective action right away
-                // so that components that depend on this information for implementing responsive
-                // behaviors have this information available now and updated whenever it changes.
-                // Note: this should only be triggered after React has finished rendering, to avoid
-                // warnings regarding invalid DOM checksums.
-                window.addEventListener('resize', dispatchPageResize.bind(null, context), false);
-                dispatchPageResize(context);
-
-            } else {
-                debug('Single-page-mode render');
-
-                context.executeAction(triggerPageLoading, true);
-
-                // Trigger fetching and wait for the data required by the components of the given route.
-                // On first render, this is done on the server side.
-                await fetchData(context, state);
-
-                // Set page title and snippets from the route handlers
-                let pageTitleAndSnippets = fetchPageTitleAndSnippets(context, state);
-                document.title = pageTitleAndSnippets ? pageTitleAndSnippets.title : config.app.title;
-
-                // Route Errors (i.e. most likely 404 Not Found)
-                // There are are routes that may be valid in the sense that they "exist" but,
-                // in reality, are invalid because the underlying resource does not exist (e.g. Product ID not found).
-                // We should catch those here and act accordingly, like rendering Not Found page or setting
-                // proper HTTP status code.
-                let routeError = context.getStore(ApplicationStore).getRouteError();
-                await dispatchClearRouteErrors(context); // Very important!!!
-                if (routeError) {
-                    debug(`(Client) Route Error ${routeError}`);
-                }
-
-                context.executeAction(navigateAction, state, function () {
-                    RenderApp(context, Handler).then(function () {
-                        context.executeAction(triggerPageLoading, false);
-                    });
-                });
+        debug('React Hydrate');
+        await ReactDOM.hydrate(
+            (
+                <FluxibleComponent context={context.getComponentContext()}>
+                    <IntlProvider locale={locale} messages={messages}>
+                        <BrowserRouter>
+                            <DataLoader routes={routes}>
+                                {renderRoutes(routes)}
+                            </DataLoader>
+                        </BrowserRouter>
+                    </IntlProvider>
+                </FluxibleComponent>
+            ),
+            mountNode,
+            function () {
+                debug('React Hydrated');
             }
-        });
+        );
+
+        // Add listener to page size changes and trigger respective action right away
+        // so that components that depend on this information for implementing responsive
+        // behaviors have this information available now and updated whenever it changes.
+        // Note: this should only be triggered after React has finished rendering, to avoid
+        // warnings regarding invalid DOM checksums.
+        window.addEventListener('resize', dispatchPageResize.bind(null, context), false);
+        dispatchPageResize(context);
     });
 }
 
@@ -200,10 +124,19 @@ function runApp() {
  * If browser does not support Intl, load the polyfill.
  * (Oh... and start the application afterwards!)
  */
-const locale = document.documentElement.getAttribute('lang') || 'en'; // Default to EN
+const locale = document.documentElement.getAttribute('lang') || 'uk'; // Default to ukranian
 loadIntlPolyfill(locale)
     .then(loadLocaleData.bind(null, locale))
-    .then(runApp)
+    .then((data) => {
+        addLocaleData([...data]);
+        import(/* webpackChunkName: "[request]" */ `../static/localizations/${locale}.json`)
+            .then(module => {
+                runApp(locale, module.default);
+            })
+            .catch(err => {
+                debug(err);
+            });
+    })
     .catch((err) => {
         console.error('Error loading the Intl polyfill', err);
-});
+    });
diff --git a/src/components/.DS_Store b/src/components/.DS_Store
deleted file mode 100644
index 1b36f84..0000000
Binary files a/src/components/.DS_Store and /dev/null differ
diff --git a/src/components/common/.DS_Store b/src/components/common/.DS_Store
deleted file mode 100644
index 9e8bd27..0000000
Binary files a/src/components/common/.DS_Store and /dev/null differ
diff --git a/src/components/common/articles/ArticleSuggestions.js b/../simple-store/src/components/common/articles/ArticleSuggestions.js
index d753288..0c669fc 100644
--- a/src/components/common/articles/ArticleSuggestions.js
+++ b/../simple-store/src/components/common/articles/ArticleSuggestions.js
@@ -2,14 +2,12 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Heading from '../typography/Heading';
 import Text from '../typography/Text';
@@ -20,7 +18,8 @@ import Text from '../typography/Text';
 class ArticleSuggestions extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -34,8 +33,7 @@ class ArticleSuggestions extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
         return (
             <div className="article-suggestions">
                 {this.props.children ?
@@ -45,10 +43,6 @@ class ArticleSuggestions extends React.Component {
                 }
                 <div className="article-suggestions__list">
                     {this.props.articles.map(function (article) {
-                        let articleRouteParams = Object.assign({
-                            contentId: article.id,
-                            contentSlug: slugify(intlStore.getMessage(article.name))
-                        }, routeParams);
                         return (
                             <div className="article-suggestions__item">
                                 <div className="article-suggestions__item-icon">
@@ -56,11 +50,9 @@ class ArticleSuggestions extends React.Component {
                                 </div>
                                 <div className="article-suggestions__title">
                                     <Link className="article-suggestions__link"
-                                          to="article-slug"
-                                          params={articleRouteParams}>
+                                          to={`/${locale}/articles/${article.id}/${slugify(article.name[locale])}`}>
                                         <Text>
-                                            <FormattedMessage message={intlStore.getMessage(article.name)}
-                                                              locales={intlStore.getCurrentLocale()} />
+                                            {article.name[locale]}
                                         </Text>
                                     </Link>
                                 </div>
diff --git a/src/components/common/articles/ArticleSummary.intl.js b/src/components/common/articles/ArticleSummary.intl.js
deleted file mode 100644
index 67926df..0000000
--- a/src/components/common/articles/ArticleSummary.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        readMore: 'Read more'
-    },
-    es: {
-        readMore: 'Leer más'
-    }
-};
diff --git a/src/components/common/articles/ArticleSummary.js b/../simple-store/src/components/common/articles/ArticleSummary.js
index 4841882..69952ea 100644
--- a/src/components/common/articles/ArticleSummary.js
+++ b/../simple-store/src/components/common/articles/ArticleSummary.js
@@ -2,28 +2,24 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Heading from '../typography/Heading';
 import Text from '../typography/Text';
 
-// Translation data for this component
-import intlData from './ArticleSummary.intl';
-
 /**
  * Component
  */
 class ArticleSummary extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -41,20 +37,15 @@ class ArticleSummary extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
-        let articleRouteParams = Object.assign({
-            contentId: this.props.content.id,
-            contentSlug: slugify(intlStore.getMessage(this.props.content.name))
-        }, routeParams);
+        let locale = this.context.intl.locale;
 
         let headingSize = 'medium';
         if (['small', 'large'].indexOf(this.props.size) !== -1) {
             headingSize = this.props.size;
         }
 
-        let showReadMore = this.props.content.body.markdown && this.props.content.body.markdown[intlStore.getCurrentLocale()]
-            && this.props.content.body.markdown[intlStore.getCurrentLocale()] !== ''
+        let showReadMore = this.props.content.body.markdown && this.props.content.body.markdown[locale]
+            && this.props.content.body.markdown[locale] !== ''
             && !this.props.hideLink;
 
         //
@@ -63,22 +54,15 @@ class ArticleSummary extends React.Component {
         return (
             <div className="article-summary">
                 <Heading size={headingSize}>
-                    <FormattedMessage
-                        message={intlStore.getMessage(this.props.content.name)}
-                        locales={intlStore.getCurrentLocale()} />
+                    {this.props.content.name[locale]}
                 </Heading>
                 <div className="article-summary__content">
                     <Text size="small">
-                        <FormattedMessage
-                            message={intlStore.getMessage(this.props.content.body.summary)}
-                            locales={intlStore.getCurrentLocale()} />
+                        {this.props.content.body.summary[locale]}
                         {showReadMore ?
                             <Link className="article-summary__link"
-                                  to="article-slug"
-                                  params={articleRouteParams}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'readMore')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                  to={`/${locale}/articles/${this.props.content.id}/${slugify(this.props.content.name[locale])}`}>
+                                <FormattedMessage id="readMore" />
                                 <i className="fa fa-file-text-o" aria-hidden="true" />
                             </Link>
                             :
diff --git a/src/components/common/buttons/Button.js b/../simple-store/src/components/common/buttons/Button.js
index 0d1f3f0..d9e5397 100644
--- a/src/components/common/buttons/Button.js
+++ b/../simple-store/src/components/common/buttons/Button.js
@@ -4,16 +4,14 @@
 import React from 'react';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
-import ApplicationStore from '../../../stores/Application/ApplicationStore';
+let debug = require('debug')('simple-store');
+
 /**
  * Component
  */
 class Button extends React.Component {
 
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
+    //*** Component Lifecycle ***//
 
     componentDidMount() {
 
@@ -34,7 +32,6 @@ class Button extends React.Component {
     render() {
 
         let buttonClass = 'button';
-        let id = `button-field-${this.context.getStore(ApplicationStore).uniqueId()}`;
 
         if (['default', 'primary'].indexOf(this.props.type) != -1) {
             buttonClass += ` button-${this.props.type}`;
@@ -61,7 +58,7 @@ class Button extends React.Component {
         }
 
         return (
-            <button id={id} className={buttonClass} onClick={this.handleClick}>
+            <button className={buttonClass} onClick={this.handleClick}>
                 {this.props.children}
             </button>
         );
diff --git a/src/components/common/buttons/Button.scss b/../simple-store/src/components/common/buttons/Button.scss
index 716c430..f31a428 100644
--- a/src/components/common/buttons/Button.scss
+++ b/../simple-store/src/components/common/buttons/Button.scss
@@ -33,11 +33,6 @@
     text-shadow: none;
     text-transform: uppercase;
 
-    @include breakpoint(handhelds) {
-      padding-left: 2px;
-      padding-right: 2px;
-    }
-
     &-font-small {
         font-size: 10px;
     }
diff --git a/src/components/common/buttons/DirectionButton.js b/../simple-store/src/components/common/buttons/DirectionButton.js
index aeaa560..1a680e4 100644
--- a/src/components/common/buttons/DirectionButton.js
+++ b/../simple-store/src/components/common/buttons/DirectionButton.js
@@ -2,12 +2,13 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import IntlStore from '../../../stores/Application/IntlStore';
 
 // Instantiate debugger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -15,7 +16,7 @@ let debug = require('debug')('tienda765');
 class DirectionButton extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
@@ -32,21 +33,13 @@ class DirectionButton extends React.Component {
         let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="direction-button">
-                { this.props.itemsNum > 1  ?
-                    <div>
-                      <span className="direction-button__move-button" onClick={this.props.handleMoveLeftClick}>
-                          &#10094;
-                      </span>
-                      <span>{intlStore.getMessage(this.props.item.name)}</span>
-                      <span className="direction-button__move-button" onClick={this.props.handleMoveRightClick}>
-                          &#10095;
-                      </span>
-                    </div>
-                    :
-                    <div>
-                      <span>{intlStore.getMessage(this.props.item.name)}</span>
-                    </div>
-                }
+                <span className="direction-button__move-button" onClick={this.props.handleMoveLeftClick}>
+                    &#10094;
+                </span>
+                <span>{intlStore.getMessage(this.props.item.name)}</span>
+                <span className="direction-button__move-button" onClick={this.props.handleMoveRightClick}>
+                    &#10095;
+                </span>
             </div>
         );
     }
diff --git a/src/components/common/buttons/ToggleSwitch.js b/../simple-store/src/components/common/buttons/ToggleSwitch.js
index 4e2f833..bcd483b 100644
--- a/src/components/common/buttons/ToggleSwitch.js
+++ b/../simple-store/src/components/common/buttons/ToggleSwitch.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -10,7 +11,7 @@ import ApplicationStore from '../../../stores/Application/ApplicationStore';
 import FormLabel from '../forms/FormLabel';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -18,7 +19,7 @@ let debug = require('debug')('tienda765');
 class ToggleSwitch extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
diff --git a/src/components/common/cart/CartItem.js b/../simple-store/src/components/common/cart/CartItem.js
index 4d7f3b3..2b418a2 100644
--- a/src/components/common/cart/CartItem.js
+++ b/../simple-store/src/components/common/cart/CartItem.js
@@ -2,11 +2,11 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 import triggerDrawer from '../../../actions/Application/triggerDrawer';
 
 // Required components
@@ -14,7 +14,7 @@ import QuantitySelector from '../forms/QuantitySelector';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -22,8 +22,9 @@ let debug = require('debug')('tienda765');
 class CartItem extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -53,64 +54,35 @@ class CartItem extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
         let product = this.props.product.details;
-        let linkParams = {
-            locale: intlStore.getCurrentLocale(),
-            productId: product.id
-        };
+        let locale = this.context.intl.locale;
 
         return (
             <div className="cart-item">
                 <div className="cart-item__frame">
                     <Link className="cart-item__link"
-                          to="product" params={linkParams}
+                          to={`/${locale}/products/${product.id}`}
                           onClick={this.handleLinkClick}>
                         <img className="cart-item__image" src={product.images && product.images.length > 0 ? `//${product.images[0].url}` : this.state.placeholderImage} />
                     </Link>
                 </div>
                 <div className="cart-item__details">
-                    { product.copies.price ?
-                        <div>
-                          <div className="name">
-                              <Text size="small">
-                                  <Link className="cart-item__link"
-                                        to="product" params={linkParams}
-                                        onClick={this.handleLinkClick}>
-                                      <FormattedMessage message={intlStore.getMessage(product.name)}
-                                                        locales={intlStore.getCurrentLocale()} />
-                                  </Link>
-                              </Text>
-                          </div>
-                          <div className="cart-item__price">
-                              <Text size="small" weight="bold">
-                                  <FormattedNumber value={product.copies.price}
-                                                   style="currency"
-                                                   currency={product.pricing.currency} />
-                              </Text>
-                          </div>
-                        </div>
-                        :
-                        <div>
-                          <div className="name">
-                              <Text size="small">
-                                  <Link className="cart-item__link"
-                                        to="product" params={linkParams}
-                                        onClick={this.handleLinkClick}>
-                                      <FormattedMessage message={intlStore.getMessage(product.name)}
-                                                        locales={intlStore.getCurrentLocale()} />
-                                  </Link>
-                              </Text>
-                          </div>
-                          <div className="cart-item__price">
-                              <Text size="small" weight="bold">
-                                  <FormattedNumber value={product.pricing.retail}
-                                                   style="currency"
-                                                   currency={product.pricing.currency} />
-                              </Text>
-                          </div>
-                        </div>
-                     }
+                    <div className="name">
+                        <Text size="small">
+                            <Link className="cart-item__link"
+                                  to={`/${locale}/products/${product.id}`}
+                                  onClick={this.handleLinkClick}>
+                                  {product.name[locale]}
+                            </Link>
+                        </Text>
+                    </div>
+                    <div className="cart-item__price">
+                        <Text size="small" weight="bold">
+                            <FormattedNumber value={product.pricing.retail}
+                                             style="currency"
+                                             currency={product.pricing.currency} />
+                        </Text>
+                    </div>
                     <div className="cart-item__quantity">
                         <QuantitySelector value={this.props.product.quantity}
                                           onChange={this.props.onQuantityChange} />
diff --git a/src/components/common/cart/SideCart.intl.js b/src/components/common/cart/SideCart.intl.js
deleted file mode 100644
index 4186024..0000000
--- a/src/components/common/cart/SideCart.intl.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default {
-    en: {
-        checkout: 'Checkout',
-        continueShopping: 'Continue shopping',
-        edit: 'Edit',
-        emptyCart: 'Your cart is empty',
-        anillado: 'Anillado',
-        header: 'Your shopping cart',
-        subtotal: 'Subtotal'
-    },
-    es: {
-        checkout: 'Finalizar',
-        continueShopping: 'Continuar comprando',
-        edit: 'Editar',
-        anillado: 'Anillado',
-        emptyCart: 'Su carrito esta vacío',
-        header: 'Su carrito de compras',
-        subtotal: 'Subtotal'
-    }
-};
diff --git a/src/components/common/cart/SideCart.js b/../simple-store/src/components/common/cart/SideCart.js
index 118b17f..1ea11a9 100644
--- a/src/components/common/cart/SideCart.js
+++ b/../simple-store/src/components/common/cart/SideCart.js
@@ -3,12 +3,12 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import CartStore from '../../../stores/Cart/CartStore';
-import IntlStore from '../../../stores/Application/IntlStore';
 
 import addToCart from '../../../actions/Cart/addToCart';
 import triggerDrawer from '../../../actions/Application/triggerDrawer';
@@ -19,17 +19,15 @@ import CartItem from './CartItem';
 import Heading from '../typography/Heading';
 import Text from '../typography/Text';
 
-// Translation data for this component
-import intlData from './SideCart.intl';
-
 /**
  * Component
  */
 class SideCart extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -76,12 +74,7 @@ class SideCart extends React.Component {
 
     render() {
 
-        //
-        // Helper methods and variables
-        //
-
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         // Process Subtotal
         let subTotal = {value: 0, currency: undefined};
@@ -90,17 +83,7 @@ class SideCart extends React.Component {
                 if (!subTotal.currency) {
                     subTotal.currency = product.details.pricing.currency;
                 }
-
-                if (product.details.copies && product.details.tags.indexOf('fotocopias') !== -1) {
-                    if (product.details.copies.anillado) {
-                    subTotal.value += product.details.copies.price * product.quantity;
-                    subTotal.value += 35;
-                    } else if (product.details.copies) {
-                    subTotal.value += product.details.copies.price * product.quantity;
-                   }
-                } else {
-                 subTotal.value += product.details.pricing.retail * product.quantity;
-               }
+                subTotal.value += product.details.pricing.retail * product.quantity;
             });
         }
 
@@ -113,9 +96,7 @@ class SideCart extends React.Component {
                     <div>
                         <div className="side-cart__header">
                             <Heading size="small">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'header')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="sideCartHeader" />
                             </Heading>
                         </div>
                         <div className="side-cart__products">
@@ -131,9 +112,7 @@ class SideCart extends React.Component {
                         <div className="side-cart__subtotal">
                             <div className="side-cart__subtotal-label">
                                 <Text size="medium" transform="uppercase" weight="bold">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'subtotal')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="subtotal" />
                                 </Text>
                             </div>
                             <div className="side-cart__subtotal-value">
@@ -147,18 +126,14 @@ class SideCart extends React.Component {
                         <div className="side-cart__actions">
                             <div className="side-cart__btn">
                                 {!this.state.cartLoading ?
-                                    <Link to="checkout" params={routeParams}>
+                                    <Link to={`/${locale}/checkout`}>
                                         <Button type="primary" onClick={this.handleCheckoutClick} disabled={this.state.cartLoading}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'checkout')}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="checkout" />
                                         </Button>
                                     </Link>
                                     :
                                     <Button type="primary" disabled={true}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'checkout')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="checkout" />
                                     </Button>
                                 }
                             </div>
@@ -168,16 +143,12 @@ class SideCart extends React.Component {
                     <div className="side-cart__empty">
                         <div className="side-cart__empty-action" onClick={this.handleContinueShoppingClick}>
                             <Text size="small">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'continueShopping')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="continueShopping" />
                             </Text>
                         </div>
                         <div className="side-cart__empty-message">
                             <Text size="medium" transform="uppercase">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'emptyCart')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="emptyCart" />
                             </Text>
                         </div>
                     </div>
diff --git a/src/components/common/collections/CollectionPicker.js b/../simple-store/src/components/common/collections/CollectionPicker.js
index e8d3662..d691b38 100644
--- a/src/components/common/collections/CollectionPicker.js
+++ b/../simple-store/src/components/common/collections/CollectionPicker.js
@@ -2,17 +2,15 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Checkbox from '../forms/Checkbox';
 import FormLabel from '../forms/FormLabel';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -20,13 +18,14 @@ let debug = require('debug')('tienda765');
 class CollectionPicker extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
-    
+
     //*** Component Lifecycle ***//
-    
+
     componentDidMount() {
-        
+
         // Component styles
         require('./CollectionPicker.scss');
     }
@@ -50,7 +49,7 @@ class CollectionPicker extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
         return (
             <div className="collection-picker">
                 {this.props.children ?
@@ -59,8 +58,7 @@ class CollectionPicker extends React.Component {
                     null
                 }
                 {this.props.collections.map((collection, idx) => {
-                    let name = <FormattedMessage message={intlStore.getMessage(collection.name)}
-                                                 locales={intlStore.getCurrentLocale()} />;
+                    let name = collection.name[locale];
                     let checkboxClass = 'collection-picker__checkbox';
                     if (collection.enabled !== true) {
                         checkboxClass += ' collection-picker__checkbox--disabled';
diff --git a/src/components/common/comments/CommentBox.intl.js b/src/components/common/comments/CommentBox.intl.js
deleted file mode 100644
index 415e639..0000000
--- a/src/components/common/comments/CommentBox.intl.js
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-    en: {
-        comments: '{total, plural, =1 {# Comment} other {# Comments}}',
-        fieldRequired: 'This field is required',
-        leaveComment: 'Leave your comment',
-        login: 'login',
-        noComments: 'Be the first to comment',
-        noUser: 'In order to submit a comment, you must {login} or {register} first.',
-        register: 'create an account',
-        submit: 'Submit'
-    },
-    es: {
-        comments: '{total, plural, =1 {# Comentario} other {# Comentarios}}',
-        fieldRequired: 'Este campo es obligatorio',
-        leaveComment: 'Deje su comentario',
-        login: 'login',
-        noComments: 'Sea el primero en comentar',
-        noUser: 'Para ingresar un comentario, primeiro debe {login} o {register}.',
-        register: 'crearse una cuenta',
-        submit: 'Ingresar'
-    }
-};
diff --git a/src/components/common/comments/CommentBox.js b/../simple-store/src/components/common/comments/CommentBox.js
index 82d61bb..fe21fe5 100644
--- a/src/components/common/comments/CommentBox.js
+++ b/../simple-store/src/components/common/comments/CommentBox.js
@@ -2,11 +2,10 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 
 // Required components
 import Button from '../buttons/Button';
@@ -16,11 +15,8 @@ import Textarea from '../forms/Textarea';
 
 import UserComment from './UserComment';
 
-// Translation data for this component
-import intlData from './CommentBox.intl';
-
 // Instantiate debugger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -28,7 +24,8 @@ let debug = require('debug')('tienda765');
 class CommentBox extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -54,12 +51,10 @@ class CommentBox extends React.Component {
 
     handleButtonClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
-
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.message) {
-            fieldErrors.message = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.message = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -75,17 +70,16 @@ class CommentBox extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         // Return the list UI block, according to whether there are comments or not
         let comments = () => {
             if (this.props.comments && this.props.comments.length > 0) {
                 return (
                     <div className="comment-box__list">
-                        {this.props.comments.map(function (comment) {
+                        {this.props.comments.map(function (comment, idx) {
                             return (
-                                <div className="comment-box__comment-item">
+                                <div key={idx} className="comment-box__comment-item">
                                     <UserComment author={comment.user.name} date={comment.createdAt}>
                                         {comment.message}
                                     </UserComment>
@@ -98,8 +92,7 @@ class CommentBox extends React.Component {
                 return (
                     <div className="comment-box__no-comments">
                         <Text>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'noComments')}
-                                              locales={intlStore.getCurrentLocale()} />!
+                            <FormattedMessage id="noComments" />!
                         </Text>
                     </div>
                 );
@@ -107,19 +100,17 @@ class CommentBox extends React.Component {
         };
 
         let loginTranslation = (
-            <Link className="comment-box__link" to="login" params={routeParams}>
+            <Link className="comment-box__link" to={`/${locale}/login`} >
                 <Text>
-                    <FormattedMessage message={intlStore.getMessage(intlData, 'login')}
-                                      locales={intlStore.getCurrentLocale()} />
+                    <FormattedMessage id="commentLogin" />
                 </Text>
             </Link>
         );
 
         let registerTranslation = (
-            <Link className="comment-box__link" to="register" params={routeParams}>
+            <Link className="comment-box__link" to={`/${locale}/register`} >
                 <Text>
-                    <FormattedMessage message={intlStore.getMessage(intlData, 'register')}
-                                      locales={intlStore.getCurrentLocale()} />
+                    <FormattedMessage id="commentRegister" />
                 </Text>
             </Link>
         );
@@ -131,15 +122,16 @@ class CommentBox extends React.Component {
             <div className="comment-box">
                 <div className="comment-box__comments" itemScope itemType="http://schema.org/UserComments">
                     <Heading size="medium">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'comments')}
-                                          locales={intlStore.getCurrentLocale()}
-                                          total={(this.props.comments) ? this.props.comments.length : 0} />
+                        <FormattedMessage id="commentComments"
+                                          values={{
+                                            total: (this.props.comments) ? this.props.comments.length : 0
+                                          }} />
                     </Heading>
                     {comments()}
                 </div>
                 {this.props.user ?
                     <div className="comment-box__submit">
-                    <Textarea label={intlStore.getMessage(intlData, 'leaveComment')}
+                    <Textarea label={this.context.intl.formatMessage({id: 'leaveComment'})}
                               onChange={this.handleTextareaChange}
                               error={this.state.fieldErrors.message}
                               disabled={this.props.disabled || this.props.loading} />
@@ -149,8 +141,7 @@ class CommentBox extends React.Component {
                                         disabled={this.props.disabled} loading={this.props.loading}>
                                     <i className="fa fa-comment-o" aria-hidden="true" />
                                     &nbsp;
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'submit')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="commentSubmit" />
                                 </Button>
                             </div>
                         </div>
@@ -158,10 +149,10 @@ class CommentBox extends React.Component {
                     :
                     <div className="comment-box__no-user">
                         <Text>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'noUser')}
-                                              locales={intlStore.getCurrentLocale()}
-                                              login={loginTranslation}
-                                              register={registerTranslation} />
+                            <FormattedMessage id="noUser"
+                                              values={{
+                                                'login': loginTranslation,
+                                                'register': registerTranslation }} />
                         </Text>
                     </div>
                 }
diff --git a/src/components/common/deleteHandler/DeleteHandler.intl.js b/src/components/common/deleteHandler/DeleteHandler.intl.js
deleted file mode 100644
index 99c63b6..0000000
--- a/src/components/common/deleteHandler/DeleteHandler.intl.js
+++ /dev/null
@@ -1,54 +0,0 @@
-export default {
-    en: {
-        back: 'Back',
-        categories: 'Categories',
-        collections: 'Collections',
-        currency: 'Currency',
-        delete: 'Delete',
-        cancel: 'Cancel',
-        deleteProductModalTitle: 'You confirme the deletion?',
-        description: 'Description',
-        enabled: 'Enabled',
-        fieldRequired: 'This field is required',
-        homepage: 'Homepage',
-        listPrice: 'List Price',
-        mainCategory: 'Main Category',
-        mainCollection: 'Main Collection',
-        name: 'Name',
-        pricing: 'Pricing',
-        retailPrice: 'Retail Price',
-        save: 'Save',
-        sections: 'Featured in Sections',
-        sku: 'SKU',
-        stock: 'Stock',
-        title: 'Edit Product',
-        type: 'Type',
-        vat: '% VAT (Included)'
-    },
-    es: {
-        back: 'Volver',
-        categories: 'Categorias',
-        collections: 'Colecciones',
-        deleteProductModalTitle: 'Confirma la eliminacion?',
-        currency: 'Moneda',
-        delete: 'Remover',
-        cancel: 'Cancelar',
-        description: 'Descripción',
-        enabled: 'Activar',
-        fieldRequired: 'Este campo es obligatorio',
-        homepage: 'Página Principal',
-        listPrice: 'Lista de Precios',
-        mainCategory: 'Categoria Principal',
-        mainCollection: 'Colección Principal',
-        name: 'Nombre',
-        pricing: 'Precio',
-        retailPrice: 'Precio Final',
-        save: 'Guardar',
-        sections: 'Destacados en Secciones',
-        sku: 'SKU',
-        stock: 'Stock',
-        title: 'Editar Producto',
-        type: 'Tipo',
-        vat: '% IVA (Incluído)'
-    }
-};
diff --git a/src/components/common/deleteHandler/DeleteHandler.js b/src/components/common/deleteHandler/DeleteHandler.js
deleted file mode 100644
index 98b4389..0000000
--- a/src/components/common/deleteHandler/DeleteHandler.js
+++ /dev/null
@@ -1,88 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import { FormattedMessage } from 'react-intl';
-import { Link } from 'react-router';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../buttons/Button';
-import Select from '../forms/Select';
-import Text from '../typography/Text';
-
-// Translation data for this component
-import intlData from './DeleteHandler.intl';
-import deleteProduct from '../../../actions/Admin/deleteProduct';
-
-// Instantiate logger
-let debug = require('debug')('tienda765');
-
-/**
- * Component
- */
-class DeleteHandler extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./DeleteHandler.scss');
-    }
-
-    //*** Template ***//
-
-    render() {
-
-        //
-        // Helper methods & variables
-        //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = { locale: intlStore.getCurrentLocale() }; // Base route params
-
-        //
-        // Return
-        //
-        return (
-            <div className="admin-products-upload">
-                <div className="admin-products-upload__actions">
-                    <div className="admin-products-upload__button">
-                        <Button type="default" onClick={this.props.onCancelClick}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
-                        </Button>
-                    </div>
-                    <div className="admin-products-upload__button">
-                        <Link to="admin-panel" params={routeParams}>
-                            <Button type="primary" onClick={this.props.onSubmitClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'delete')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
-                        </Link>
-                    </div>
-                </div>
-            </div>
-        );
-    }
-}
-
-/**
-* Default Props
-*/
-DeleteHandler.defaultProps = {
-    onCancelClick: function () { debug('onCancelClick not defined'); }
-};
-/**
-* Exports
-*/
-export default DeleteHandler;
diff --git a/src/components/common/deleteHandler/DeleteHandler.scss b/src/components/common/deleteHandler/DeleteHandler.scss
deleted file mode 100644
index 75ba6d7..0000000
--- a/src/components/common/deleteHandler/DeleteHandler.scss
+++ /dev/null
@@ -1,30 +0,0 @@
-@import '../../../styles/variables.scss';
-
-.admin-products-upload__form-item {
-
-    &:not(:first-child) {
-        margin-top: 20px;
-    }
-}
-
-.admin-products-upload__actions {
-    display: flex;
-    justify-content: flex-end;
-    margin-top: 20px;
-}
-
-.admin-products-upload__button {
-
-    &:not(:first-child) {
-        margin-left: 10px;
-    }
-}
-
-.admin-products-upload__error {
-    margin-top: 3px;
-    color: $color-error;
-
-    & > span {
-        color: $color-error;
-    }
-}
diff --git a/src/components/common/files/FileLibrary.intl.js b/src/components/common/files/FileLibrary.intl.js
deleted file mode 100644
index 95822fd..0000000
--- a/src/components/common/files/FileLibrary.intl.js
+++ /dev/null
@@ -1,10 +0,0 @@
-export default {
-    en: {
-        delete: 'Delete',
-        viewURL: 'URL'
-    },
-    es: {
-        delete: 'Remover',
-        viewURL: 'URL'
-    }
-};
diff --git a/src/components/common/files/FileLibrary.js b/src/components/common/files/FileLibrary.js
deleted file mode 100644
index f1492e8..0000000
--- a/src/components/common/files/FileLibrary.js
+++ /dev/null
@@ -1,90 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../buttons/Button';
-
-// Translation data for this component
-import intlData from './FileLibrary.intl';
-
-// Instantiate logger
-let debug = require('debug')('tienda765');
-
-/**
- * Component
- */
-class FileLibrary extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    state = {
-      image: undefined
-    };
-
-    componentDidMount() {
-        require('./FileLibrary.scss');
-
-        this.setState({
-            image: require('./file_image.png')
-        });
-    }
-
-    //*** View Controllers ***//
-
-    handleViewURLClick = (idx) => {
-        alert(this.props.files[idx].url);
-    };
-
-    handleRemoveClick = (idx) => {
-        let files = this.props.files;
-        files.splice(idx, 1);
-        this.props.onChange(files);
-    };
-
-    //*** Template ***//
-
-    render() {
-        let intlStore = this.context.getStore(IntlStore);
-        return (
-            <div className="file-library">
-                {this.props.files.map((idx) => {
-                    return (
-                        <div key={idx} className="file-library__placeholder">
-                        <img src={this.state.image} />
-                            <div className="file-library__placeholder-overlay">
-                                <div className="file-library__placeholder-overlay-content">
-                                    <div className="file-library__button">
-                                        <Button type="primary" onClick={this.handleRemoveClick.bind(null, idx)}>
-                                            <FormattedMessage message={intlStore.getMessage(intlData, 'delete')}
-                                                              locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                    </div>
-                                </div>
-                            </div>
-                        </div>
-                    );
-                })}
-            </div>
-        );
-    }
-}
-
-/**
- * Default Props
- */
-FileLibrary.defaultProps = {
-    onChange: function (files) { debug('onChange not defined.', files); }
-};
-
-/**
- * Exports
- */
-export default FileLibrary;
diff --git a/src/components/common/files/FileLibrary.scss b/src/components/common/files/FileLibrary.scss
deleted file mode 100644
index fc616ed..0000000
--- a/src/components/common/files/FileLibrary.scss
+++ /dev/null
@@ -1,43 +0,0 @@
-.file-library {
-    display: flex;
-    flex-wrap: wrap;
-    margin-top: 25px;
-}
-
-.file-library__placeholder {
-    display: flex;
-    position: relative;
-    width: 187px;
-    height: 187px;
-    margin: 7.5px;
-    border: solid 1px #eee;
-
-    & > img {
-        position: absolute;
-        width: 180px;
-        height: 180px;
-    }
-
-    &:hover > .file-library__placeholder-overlay {
-        display: flex;
-    }
-}
-
-.file-library__placeholder-overlay {
-    position: absolute;
-    width: 100%;
-    height: 100%;
-    display: none;
-}
-
-.file-library__placeholder-overlay-content {
-    align-self: center;
-    padding: 0 30px 0 30px;
-}
-
-.file-library__button {
-
-    &:not(:first-child) {
-        margin-top: 7.5px;
-    }
-}
diff --git a/src/components/common/files/FileUpload.intl.js b/src/components/common/files/FileUpload.intl.js
deleted file mode 100644
index ba0651a..0000000
--- a/src/components/common/files/FileUpload.intl.js
+++ /dev/null
@@ -1,14 +0,0 @@
-export default {
-    en: {
-        cancel: 'Cancel',
-        fieldRequired: 'This field is required',
-        submit: 'Upload',
-        content: 'Content Type'
-    },
-    es: {
-        cancel: 'Cancelar',
-        fieldRequired: 'Este campo es obligatorio',
-        submit: 'Subir',
-        content: 'Contenido'
-    }
-};
diff --git a/src/components/common/files/FileUpload.js b/src/components/common/files/FileUpload.js
deleted file mode 100644
index 9068c6e..0000000
--- a/src/components/common/files/FileUpload.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-
-// Required components
-import Button from '../buttons/Button';
-
-// Instantiate logger
-let debug = require('debug')('tienda765');
-
-import IntlStore from '../../../stores/Application/IntlStore';
-import intlData from './FileUpload.intl';
-
-import {FormattedMessage} from 'react-intl';
-
-class FileUpload extends React.Component {
-
-    static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    state = {
-      files: undefined,
-      image: undefined,
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        require('./FileUpload.scss');
-
-        this.setState({
-            image: require('./file_placeholder.png')
-        });
-    }
-
-    //*** View Controllers ***//
-
-    handlePlaceholderClick = () => {
-        this.refs.input.getDOMNode().click();
-    };
-
-    handleSubmitClick = () => {
-          this.props.onSubmit(this.state.files);
-    };
-
-    handleFileChange = (evt) => {
-      let files = evt.target.files[0];
-      var reader = new FileReader();
-      reader.readAsDataURL(files);
-      this.setState({files: files});
-
-    };
-
-
-    //*** Template ***//
-
-    render() {
-      let intlStore = this.context.getStore(IntlStore);
-      let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
-
-        return (
-            <div className="file-upload">
-                <input ref="input" type="file" className="file-upload__input" onChange={this.handleFileChange} />
-
-                <div className="file-upload__actions">
-                    <Button type="primary" disabled={this.props.disabled === true || !this.state.files} onClick={this.handleSubmitClick}>
-                      <FormattedMessage
-                          message={intlStore.getMessage(intlData, 'submit')}
-                          locales={intlStore.getCurrentLocale()} />
-                    </Button>
-                </div>
-            </div>
-        );
-    }
-}
-
-/**
- * Default Props
- */
-FileUpload.defaultProps = {
-    onSubmit: function (files) { debug('onSubmit not defined.', files); }
-};
-
-/**
- * Exports
- */
-export default FileUpload;
diff --git a/src/components/common/files/FileUpload.scss b/src/components/common/files/FileUpload.scss
deleted file mode 100644
index f277b12..0000000
--- a/src/components/common/files/FileUpload.scss
+++ /dev/null
@@ -1,22 +0,0 @@
-.file-upload {
-    width: 140px;
-}
-
-.file-upload__input {
-
-}
-
-.file-upload__placeholder {
-    border: 1px solid #eee;
-    border-radius: 3px;
-    cursor: pointer;
-
-    & > img {
-        width: 140px;
-        height: 140px;
-    }
-}
-
-.file-upload__actions {
-    margin-top: 5px;
-}
diff --git a/src/components/common/files/file_image.png b/src/components/common/files/file_image.png
deleted file mode 100644
index 182e2fa..0000000
Binary files a/src/components/common/files/file_image.png and /dev/null differ
diff --git a/src/components/common/files/file_placeholder.png b/src/components/common/files/file_placeholder.png
deleted file mode 100644
index 37623ee..0000000
Binary files a/src/components/common/files/file_placeholder.png and /dev/null differ
diff --git a/src/components/common/files/image_placeholder.png b/src/components/common/files/image_placeholder.png
deleted file mode 100644
index 101aa9d..0000000
Binary files a/src/components/common/files/image_placeholder.png and /dev/null differ
diff --git a/src/components/common/forms/AddressField.intl.js b/src/components/common/forms/AddressField.intl.js
deleted file mode 100644
index 9f19a6a..0000000
--- a/src/components/common/forms/AddressField.intl.js
+++ /dev/null
@@ -1,32 +0,0 @@
-export default {
-    en: {
-        address: 'Address',
-        cancel: 'Cancel',
-        addressLine2: 'Comment or notes for delivery',
-        city: 'City',
-        country: 'Country',
-        fieldRequired: 'This field is required',
-        name: 'Full Name',
-        phoneNumber: 'Phone Number',
-        postalCode: 'Postal Code',
-        savedAddresses: 'Choose one of your saved addresses',
-        state: 'State',
-        submit: 'Submit',
-        dni: 'Identification Number'
-    },
-    es: {
-        address: 'Dirección',
-        cancel: 'Cancelar',
-        addressLine2: 'Comentario para el delivery',
-        city: 'Ciudad',
-        country: 'País',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre Completo',
-        phoneNumber: 'Número de Teléfono',
-        postalCode: 'Código Postal',
-        savedAddresses: 'Elija una de sus direcciones guardadas',
-        state: 'Estado/Provincia',
-        submit: 'Enviar',
-        dni: 'Número de DNI'
-    }
-};
diff --git a/src/components/common/forms/AddressField.js b/../simple-store/src/components/common/forms/AddressField.js
index bb50ba1..8765cb7 100644
--- a/src/components/common/forms/AddressField.js
+++ b/../simple-store/src/components/common/forms/AddressField.js
@@ -2,7 +2,8 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
 import IntlStore from '../../../stores/Application/IntlStore';
@@ -14,16 +15,14 @@ import InlineItems from './InlineItems';
 import InputField from './InputField';
 import Select from './Select';
 
-// Translation data for this component
-import intlData from './AddressField.intl';
-
 /**
  * Component
  */
 class AddressField extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -53,42 +52,37 @@ class AddressField extends React.Component {
         this.setState({address: address});
     };
 
-    setCountryAndProvince = () => {
-        let address = this.state.address;
-        address.state = "Chaco";
-        address.country = "Argentina";
-        address.postalCode = 3500;
-        this.setState({address: address});
-    };
-
     handleSubmitClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         // Client-side validations
         let fieldErrors = {};
 
         if (!this.state.address.name) {
-            fieldErrors.name = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.address.phone) {
-            fieldErrors.phone = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.address.dni) {
-            fieldErrors.dni = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.name = intl.formatMessage({id: 'fieldRequired'});
         }
+
         if (!this.state.address.addressLine1) {
-            fieldErrors.addressLine1 = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.addressLine1 = intl.formatMessage({id: 'fieldRequired'});
+        }
+
+        if (!this.state.address.postalCode) {
+            fieldErrors.postalCode = intl.formatMessage({id: 'fieldRequired'});
         }
+
         if (!this.state.address.city) {
-            fieldErrors.city = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.city = intl.formatMessage({id: 'fieldRequired'});
+        }
+
+        if (!this.state.address.country) {
+            fieldErrors.country = intl.formatMessage({id: 'fieldRequired'});
         }
 
         this.setState({fieldErrors: fieldErrors});
 
         // Validation passed, trigger request
         if (Object.keys(fieldErrors).length === 0) {
-            this.setCountryAndProvince();
             this.props.onSubmit(this.state.address);
         }
     };
@@ -97,10 +91,10 @@ class AddressField extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
-        let cityOptions = [
-            {name: 'Resistencia', value: 'Resistencia'}
+        let countryOptions = [
+            {name: 'Ukraine', value: 'UA'}
         ];
 
         let addressOptions;
@@ -117,7 +111,7 @@ class AddressField extends React.Component {
             <div className="address-field">
                 {addressOptions ?
                     <div className="address-field__item address-field__saved-addresses">
-                        <Select label={intlStore.getMessage(intlData, 'savedAddresses')}
+                        <Select label={intl.formatMessage({id: 'savedAddresses'})}
                                 labelWeight="normal"
                                 labelSize="small"
                                 placeholder
@@ -129,48 +123,68 @@ class AddressField extends React.Component {
                 }
                 <div className="address-field__item">
                     <InlineItems>
-                        <InputField label={intlStore.getMessage(intlData, 'name')}
+                        <InputField label={intl.formatMessage({id: 'fullName'})}
                                     labelWeight={this.props.labelWeight}
-                                    value={this.state.address.name}
+                                    value={this.state.address.name || ''}
                                     onChange={this.handleFieldChange.bind(null, 'name')}
                                     error={this.state.fieldErrors['name']} />
-                        <InputField label={intlStore.getMessage(intlData, 'phoneNumber')}
+                        <InputField label={intl.formatMessage({id: 'phoneNumber'})}
                                     labelWeight={this.props.labelWeight}
-                                    value={this.state.address.phone}
+                                    value={this.state.address.phone || ''}
                                     onChange={this.handleFieldChange.bind(null, 'phone')}
                                     error={this.state.fieldErrors['phone']} />
                     </InlineItems>
                 </div>
                 <div className="address-field__item">
-                    <InputField label={intlStore.getMessage(intlData, 'address')}
+                    <InputField label={intl.formatMessage({id: 'vatin'})}
+                                labelWeight={this.props.labelWeight}
+                                value={this.state.address.vatin || ''}
+                                onChange={this.handleFieldChange.bind(null, 'vatin')}
+                                error={this.state.fieldErrors['vatin']} />
+                </div>
+                <div className="address-field__item">
+                    <InputField label={intl.formatMessage({id: 'address'})}
                                 labelWeight={this.props.labelWeight}
-                                value={this.state.address.addressLine1}
+                                value={this.state.address.addressLine1 || ''}
                                 onChange={this.handleFieldChange.bind(null, 'addressLine1')}
                                 error={this.state.fieldErrors['addressLine1']} />
                 </div>
                 <div className="address-field__address-line2">
-                    <InputField label={intlStore.getMessage(intlData, 'addressLine2')}
-                                labelWeight={this.props.labelWeight}
-                                value={this.state.address.addressLine2}
+                    <InputField labelWeight={this.props.labelWeight}
+                                value={this.state.address.addressLine2 || ''}
                                 onChange={this.handleFieldChange.bind(null, 'addressLine2')}
                                 error={this.state.fieldErrors['addressLine2']} />
                 </div>
                 <div className="address-field__item">
                     <InlineItems>
-                        <InputField label={intlStore.getMessage(intlData, 'dni')}
+                        <InputField label={intl.formatMessage({id: 'postalCode'})}
                                     labelWeight={this.props.labelWeight}
-                                    value={this.state.address.dni}
-                                    onChange={this.handleFieldChange.bind(null, 'dni')}
-                                    error={this.state.fieldErrors['dni']} />
-                       <Select label={intlStore.getMessage(intlData, 'city')}
-                                    placeholder
-                                    options={cityOptions}
+                                    value={this.state.address.postalCode || ''}
+                                    onChange={this.handleFieldChange.bind(null, 'postalCode')}
+                                    error={this.state.fieldErrors['postalCode']} />
+                        <InputField label={intl.formatMessage({id: 'city'})}
                                     labelWeight={this.props.labelWeight}
-                                    value={this.state.address.city}
+                                    value={this.state.address.city || ''}
                                     onChange={this.handleFieldChange.bind(null, 'city')}
                                     error={this.state.fieldErrors['city']} />
                     </InlineItems>
                 </div>
+                <div className="address-field__item">
+                    <InlineItems>
+                        <InputField label={intl.formatMessage({id: 'state'})}
+                                    labelWeight={this.props.labelWeight}
+                                    value={this.state.address.state || ''}
+                                    onChange={this.handleFieldChange.bind(null, 'state')}
+                                    error={this.state.fieldErrors['state']} />
+                        <Select label={intl.formatMessage({id: 'country'})}
+                                placeholder
+                                options={countryOptions}
+                                labelWeight={this.props.labelWeight}
+                                value={this.state.address.country || ''}
+                                onChange={this.handleFieldChange.bind(null, 'country')}
+                                error={this.state.fieldErrors['country']} />
+                    </InlineItems>
+                </div>
                 {this.props.onCancel || this.props.onSubmit ?
                     <div className="address-field__item">
                         <InlineItems>
@@ -180,7 +194,7 @@ class AddressField extends React.Component {
                                             onClick={this.props.onCancel}
                                             disabled={this.props.disabled}
                                             loading={this.props.loading}>
-                                        {this.props.cancelLabel || intlStore.getMessage(intlData, 'cancel')}
+                                        {this.props.cancelLabel || intl.formatMessage({id: 'cancelButton'})}
                                     </Button>
                                     :
                                     null
@@ -192,7 +206,7 @@ class AddressField extends React.Component {
                                             onClick={this.handleSubmitClick}
                                             disabled={this.props.disabled}
                                             loading={this.props.loading}>
-                                        {this.props.submitLabel || intlStore.getMessage(intlData, 'submit')}
+                                        {this.props.submitLabel || intl.formatMessage({id: 'updateButton'})}
                                     </Button>
                                     :
                                     null
diff --git a/src/components/common/forms/AddressFieldNoShipping.js b/src/components/common/forms/AddressFieldNoShipping.js
deleted file mode 100644
index 9fcea6a..0000000
--- a/src/components/common/forms/AddressFieldNoShipping.js
+++ /dev/null
@@ -1,177 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../buttons/Button';
-
-import InlineItems from './InlineItems';
-import InputField from './InputField';
-import Select from './Select';
-
-// Translation data for this component
-import intlData from './AddressFieldShipping.intl';
-
-/**
- * Component
- */
-class AddressFieldNoShipping extends React.Component {
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    state = {
-        address: this.props.address || {},
-        fieldErrors: {}
-    };
-
-    componentDidMount() {
-        require('./AddressFieldShipping.scss');
-    }
-
-    //*** View Controllers ***//
-
-    handleSavedAddressChange = (idx) => {
-        this.props.onSubmit(this.props.savedAddresses[idx]);
-    };
-
-    handleFieldChange = (field, value) => {
-        let address = this.state.address;
-        address[field] = value;
-        this.setState({address: address});
-    };
-
-    setCountryAndProvinceAndName = () => {
-        let address = this.state.address;
-        address.state = "Chaco";
-        address.country = "Argentina";
-        address.city = "Resistencia";
-        address.dni = "000000000";
-        address.postalCode = 3500;
-        console.log("checkout",this.props.checkout);
-        if (this.props.checkout.customer) {
-            address.name = this.props.checkout.customer.name;
-            console.log("checkout",this.props.checkout);
-        }
-        this.setState({address: address});
-    };
-
-    handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Client-side validations
-        let fieldErrors = {};
-
-        if (!this.state.address.addressLine1) {
-            fieldErrors.addressLine1 = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-
-        if (!this.state.address.phone) {
-            fieldErrors.phone = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-
-        this.setState({fieldErrors: fieldErrors});
-
-        // Validation passed, trigger request
-        if (Object.keys(fieldErrors).length === 0) {
-            this.setCountryAndProvinceAndName();
-            this.props.onSubmit(this.state.address);
-        }
-    };
-
-    //*** Template ***//
-
-    render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let addressOptions;
-        if (this.props.savedAddresses && this.props.savedAddresses.length > 0) {
-            addressOptions = this.props.savedAddresses.map(function (address, idx) {
-                return {
-                    value: idx,
-                    name: `${address.name}, ${address.addressLine1} ${address.addressLine2}, ${address.postalCode} ${address.city}`
-                };
-            });
-        }
-
-        return (
-            <div className="address-field">
-                {addressOptions ?
-                    <div className="address-field__item address-field__saved-addresses">
-                        <Select label={intlStore.getMessage(intlData, 'savedAddresses')}
-                                labelWeight="normal"
-                                labelSize="small"
-                                placeholder
-                                options={addressOptions}
-                                onChange={this.handleSavedAddressChange} />
-                    </div>
-                    :
-                    null
-                }
-                <div className="address-field__item">
-                    <InlineItems>
-                        <InputField label={intlStore.getMessage(intlData, 'phoneNumber')}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.state.address.phone}
-                                    onChange={this.handleFieldChange.bind(null, 'phone')}
-                                    error={this.state.fieldErrors['phone']} />
-                        <InputField label={intlStore.getMessage(intlData, 'addressLine2')}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.state.address.addressLine2}
-                                    onChange={this.handleFieldChange.bind(null, 'addressLine2')}
-                                    error={this.state.fieldErrors['addressLine2']} />
-                    </InlineItems>
-                </div>
-                <div className="address-field__item">
-                    <InputField label={intlStore.getMessage(intlData, 'address')}
-                                labelWeight={this.props.labelWeight}
-                                value={this.state.address.addressLine1}
-                                onChange={this.handleFieldChange.bind(null, 'addressLine1')}
-                                error={this.state.fieldErrors['addressLine1']} />
-                </div>
-                {this.props.onCancel || this.props.onSubmit ?
-                    <div className="address-field__item">
-                        <InlineItems>
-                            <div>
-                                {this.props.onCancel ?
-                                    <Button type="default"
-                                            onClick={this.props.onCancel}
-                                            disabled={this.props.disabled}
-                                            loading={this.props.loading}>
-                                        {this.props.cancelLabel || intlStore.getMessage(intlData, 'cancel')}
-                                    </Button>
-                                    :
-                                    null
-                                }
-                            </div>
-                            <div>
-                                {this.props.onSubmit ?
-                                    <Button type="primary"
-                                            onClick={this.handleSubmitClick}
-                                            disabled={this.props.disabled}
-                                            loading={this.props.loading}>
-                                        {this.props.submitLabel || intlStore.getMessage(intlData, 'submit')}
-                                    </Button>
-                                    :
-                                    null
-                                }
-                            </div>
-                        </InlineItems>
-                    </div>
-                    :
-                    null
-                }
-            </div>
-        );
-    }
-}
-
-/**
- * Exports
- */
-export default AddressFieldNoShipping;
diff --git a/src/components/common/forms/AddressFieldShipping.intl.js b/src/components/common/forms/AddressFieldShipping.intl.js
deleted file mode 100644
index e5ae82b..0000000
--- a/src/components/common/forms/AddressFieldShipping.intl.js
+++ /dev/null
@@ -1,34 +0,0 @@
-export default {
-    en: {
-        address: 'Address',
-        cancel: 'Cancel',
-        addressLine2: 'Comment or notes for delivery',
-        city: 'City',
-        country: 'Country',
-        fieldRequired: 'This field is required',
-        name: 'Full Name',
-        phoneNumber: 'Phone Number',
-        addressLine1: 'Necesita tener una dirección dentro de las zonas de envío',
-        postalCode: 'Postal Code',
-        savedAddresses: 'Choose one of your saved addresses',
-        state: 'State',
-        submit: 'Submit',
-        dni: 'Identification Number'
-    },
-    es: {
-        address: 'Dirección',
-        cancel: 'Cancelar',
-        addressLine2: 'Comentario para el delivery',
-        city: 'Ciudad',
-        country: 'País',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre Completo',
-        addressLine1: 'Necesita tener una dirección dentro de las zonas de envío',
-        phoneNumber: 'Número de Teléfono',
-        postalCode: 'Código Postal',
-        savedAddresses: 'Elija una de sus direcciones guardadas',
-        state: 'Estado/Provincia',
-        submit: 'Enviar',
-        dni: 'Número de DNI'
-    }
-};
diff --git a/src/components/common/forms/AddressFieldShipping.js b/src/components/common/forms/AddressFieldShipping.js
deleted file mode 100644
index 351888a..0000000
--- a/src/components/common/forms/AddressFieldShipping.js
+++ /dev/null
@@ -1,276 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../buttons/Button';
-
-import InlineItems from './InlineItems';
-import InputField from './InputField';
-import Select from './Select';
-import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';
-
-// Translation data for this component
-import intlData from './AddressFieldShipping.intl';
-
-/**
- * Component
- */
-class AddressFieldShipping extends React.Component {
-    constructor(props) {
-      super(props)
-      this.state = { address: this.props.address || {}, fieldErrors: {}, locationAddress: '',addressErrorMessage: '',checkout: {} }
-      this.onChange = (locationAddress) => this.setState({ locationAddress })
-    }
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    componentDidMount() {
-        require('./AddressFieldShipping.scss');
-    }
-
-    componentWillReceiveProps(nextProps) {
-        this.setState({
-            checkout: nextProps._checkout
-        });
-    }
-
-    //*** View Controllers ***//
-
-    handleAddressShippingCheck = (event) => {
-      event.preventDefault()
-
-      if (!this.state.locationAddress) {
-        this.setState({showAddressError: true});
-        return null;
-      }
-      geocodeByAddress(this.state.locationAddress)
-       .then(results => getLatLng(results[0]))
-       .then(latLng => {
-         console.log('Success', latLng);
-         let checkPoint = new google.maps.LatLng(latLng.lat, latLng.lng);
-
-         const zona2= [
-           {lat: -27.45504 , lng: -59.01082},
-           {lat: -27.42251 , lng: -58.97632},
-           {lat: -27.44285 , lng: -58.94894},
-           {lat: -27.47697 , lng: -58.98679}
-         ];
-
-         const zona1= [
-           {lat: -27.45367 , lng: -58.99804},
-           {lat: -27.43166 , lng: -58.97418},
-           {lat: -27.4408 , lng: -58.9607},
-           {lat: -27.4638 , lng: -58.98688}
-         ];
-
-         let poly1 = new google.maps.Polygon({path: zona1});
-         let poly2 = new google.maps.Polygon({path: zona2});
-
-         if ( google.maps.geometry.poly.containsLocation(checkPoint, poly1)) {
-           let address = this.state.address;
-           address.addressLine1 = this.state.locationAddress;
-           this.setState({address: address, addressErrorMessage: 'zona1'});
-         } else if (google.maps.geometry.poly.containsLocation(checkPoint, poly2)) {
-           let address = this.state.address;
-           address.addressLine1 = this.state.locationAddress;
-           this.setState({address: address, addressErrorMessage: 'zona2'});
-         } else {
-           let address = this.state.address;
-           address.addressLine1 = {};
-           this.setState({address: address, addressErrorMessage: 'outside'});
-         }
-       })
-       .catch(error => console.error('Error', error))
-     }
-
-    handleSavedAddressChange = (idx) => {
-        this.props.onSubmit(this.props.savedAddresses[idx]);
-    };
-
-    handleFieldChange = (field, value) => {
-        let address = this.state.address;
-        address[field] = value;
-        this.setState({address: address});
-    };
-
-    setCountryAndProvinceAndName = () => {
-        let address = this.state.address;
-        address.state = "Chaco";
-        address.country = "Argentina";
-        address.city = "Resistencia";
-        address.dni = "000000000";
-        address.postalCode = 3500;
-        console.log("checkout",this.props.checkout);
-        if (this.props.checkout.customer) {
-            address.name = this.props.checkout.customer.name;
-            console.log("checkout",this.props.checkout);
-        }
-        this.setState({address: address});
-    };
-
-    handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Client-side validations
-        let fieldErrors = {};
-
-        if (!this.state.address.phone) {
-            fieldErrors.phone = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (this.state.addressErrorMessage !== 'zona1' && this.state.addressErrorMessage !== 'zona2') {
-            this.setState({addressErrorMessage: 'showWarning'});
-            fieldErrors.address = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        console.log("checkout",this.props.checkout);
-        this.setState({fieldErrors: fieldErrors});
-
-        // Validation passed, trigger request
-        if (Object.keys(fieldErrors).length === 0) {
-            this.setCountryAndProvinceAndName();
-            this.props.onSubmit(this.state.address);
-        }
-    };
-
-    //*** Template ***//
-
-    render() {
-
-        let inputProps = {
-             value: this.state.locationAddress,
-             onChange: this.onChange,
-        }
-
-        let addressErrorMessage = () => {
-            if (this.state.addressErrorMessage == 'zona1') {
-                return (
-                  <div className="address-field__error">
-                      Delivery gratis
-                  </div>
-                );
-            } else if (this.state.addressErrorMessage == 'zona2') {
-              return (
-                <div className="address-field__error">
-                    $10 de delivery
-                </div>
-              );
-            } else if (this.state.addressErrorMessage == 'outside') {
-              return (
-                <div className="address-field__error">
-                    Estas afuera de nuestra zona de delivery
-                </div>
-              );
-            } else {
-              return (
-                  null
-              );
-            }
-        };
-
-        let intlStore = this.context.getStore(IntlStore);
-        let addressOptions;
-        if (this.props.savedAddresses && this.props.savedAddresses.length > 0) {
-            addressOptions = this.props.savedAddresses.map(function (address, idx) {
-                return {
-                    value: idx,
-                    name: `${address.name}, ${address.addressLine1} ${address.addressLine2}, ${address.postalCode} ${address.city}`
-                };
-            });
-        }
-
-        return (
-            <div className="address-field">
-                {addressOptions ?
-                    <div className="address-field__item address-field__saved-addresses">
-                        <Select label={intlStore.getMessage(intlData, 'savedAddresses')}
-                                labelWeight="normal"
-                                labelSize="small"
-                                placeholder
-                                options={addressOptions}
-                                onChange={this.handleSavedAddressChange} />
-                    </div>
-                    :
-                    null
-                }
-                <div className="address-field__item">
-                    <InlineItems>
-                        <InputField label={intlStore.getMessage(intlData, 'phoneNumber')}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.state.address.phone}
-                                    onChange={this.handleFieldChange.bind(null, 'phone')}
-                                    error={this.state.fieldErrors['phone']} />
-                        <InputField label={intlStore.getMessage(intlData, 'addressLine2')}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.state.address.addressLine2}
-                                    onChange={this.handleFieldChange.bind(null, 'addressLine2')}
-                                    error={this.state.fieldErrors['addressLine2']} />
-                    </InlineItems>
-                </div>
-                <div className="address-field__item">
-                  <FormattedMessage
-                      message={intlStore.getMessage(intlData, 'address')}
-                      locales={intlStore.getCurrentLocale()} />
-                  <form onSubmit={this.handleAddressShippingCheck.bind()}>
-                     <PlacesAutocomplete inputProps={inputProps} />
-                     <div className="row">
-                     <button className="button-shipping button-shipping-primary button-shipping-font-small" type="submit">Checkear mi dirección</button>
-                     {addressErrorMessage()}
-                     {this.state.addressErrorMessage == 'showWarning' ?
-                       <div className="address-field__error">
-                           Necesitas checkear una dirección valida
-                       </div>
-                         :
-                         null
-                     }
-                     </div>
-                   </form>
-                </div>
-                {this.props.onCancel || this.props.onSubmit ?
-                    <div className="address-field__item">
-                        <InlineItems>
-                            <div>
-                                {this.props.onCancel ?
-                                    <Button type="default"
-                                            onClick={this.props.onCancel}
-                                            disabled={this.props.disabled}
-                                            loading={this.props.loading}>
-                                        {this.props.cancelLabel || intlStore.getMessage(intlData, 'cancel')}
-                                    </Button>
-                                    :
-                                    null
-                                }
-                            </div>
-                            <div>
-                                {this.props.onSubmit ?
-                                    <Button type="primary"
-                                            onClick={this.handleSubmitClick}
-                                            disabled={this.props.disabled}
-                                            loading={this.props.loading}>
-                                        {this.props.submitLabel || intlStore.getMessage(intlData, 'submit')}
-                                    </Button>
-                                    :
-                                    null
-                                }
-                            </div>
-                        </InlineItems>
-                    </div>
-                    :
-                    null
-                }
-            </div>
-        );
-    }
-}
-
-/**
- * Exports
- */
-export default AddressFieldShipping;
diff --git a/src/components/common/forms/AddressFieldShipping.scss b/src/components/common/forms/AddressFieldShipping.scss
deleted file mode 100644
index b4f6c6c..0000000
--- a/src/components/common/forms/AddressFieldShipping.scss
+++ /dev/null
@@ -1,172 +0,0 @@
-@import '../../../styles/variables.scss';
-.address-field__item {
-
-    &:not(:first-child) {
-        margin-top: 15px;
-    }
-}
-
-.address-field__address-line2 {
-    margin-top: 10px;
-}
-
-.address-field__saved-addresses {
-    padding: 10px;
-    background-color: #eee;
-    border-radius: 3px;
-}
-
-.address-field__input {
-    width: 100%;
-    max-width: 100%;
-    min-height: 32px;
-    padding: 15px 0px;
-    margin: 0px;
-    outline: none;
-    box-sizing: border-box;
-    border: 1px solid #eeeeee;
-    border-radius: 3px;
-    text-indent: 10px;
-    font: $font-size-small $font-family-body;
-    color: $color-body;
-    transition: border-color 0.2s linear, box-shadow 0.2s ease;
-
-    &:hover,
-    &:focus {
-        box-shadow: 0 0 3px rgba(0,0,0,.2);
-        min-height: 32px;
-    }
-
-    &--error {
-        border-color: $color-error;
-    }
-}
-
-.address-field__error {
-    margin: 0 0 0 10;
-    color: $color-error;
-
-    & > span {
-        color: $color-error;
-    }
-}
-
-
-#map {
- height: 100%;
-}
-.controls {
- margin-top: 10px;
- border: 1px solid transparent;
- border-radius: 2px 0 0 2px;
- box-sizing: border-box;
- -moz-box-sizing: border-box;
- height: 32px;
- outline: none;
- box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
-}
-
-#pac-input {
- background-color: #fff;
- font-family: Roboto;
- font-size: 15px;
- font-weight: 300;
- margin-left: 12px;
- padding: 0 11px 0 13px;
- text-overflow: ellipsis;
- width: 300px;
-}
-
-#pac-input:focus {
- border-color: #4d90fe;
-}
-
-.pac-container {
- font-family: Roboto;
-}
-
-#type-selector {
- color: #fff;
- background-color: #4d90fe;
- padding: 5px 11px 0px 11px;
-}
-
-#type-selector label {
- font-family: Roboto;
- font-size: 13px;
- font-weight: 300;
-}
-
-.row {
-  display: flex;
-  flex-direction: row;
-  margin-top: 6px;
-}
-
-.button-shipping {
-    display: inline-block;
-    width: 40%;
-    height: 40px;
-    padding-bottom: 0px;
-    padding-left: 20px;
-    padding-right: 20px;
-    padding-top: 0px;
-
-    cursor: pointer;
-
-    transition-delay: 0s, 0s;
-    transition-duration: 0.5s, 0.5s;
-    transition-property: background, color;
-    transition-timing-function: ease, ease;
-
-    border-style: none;
-    border-radius: 3px 3px 3px 3px;
-
-    font-family: $font-family-heading;
-    font-stretch: normal;
-    font-style: normal;
-    font-variant: normal;
-    font-weight: normal;
-    letter-spacing: 1px;
-    line-height: 40px;
-    text-align: center;
-    text-decoration: none;
-    text-indent: 0px;
-    text-rendering: auto;
-    text-shadow: none;
-    text-transform: uppercase;
-
-    &-font-small {
-        font-size: 10px;
-    }
-
-    &-font-medium {
-        font-size: 14px;
-    }
-
-    &-font-large {
-        font-size: 18px;
-    }
-
-    &-default {
-        background-color: rgb(192, 192, 192);
-        color: rgb(255, 255, 255);
-        &:hover:not(.button--disabled) {
-            color: #ffffff;
-            background: #A5A5A5;
-        }
-    }
-
-    &-primary {
-        background-color: $color-primary;
-        color: rgb(255, 255, 255);
-        &:hover:not(.button--disabled) {
-            color: #ffffff;
-            background: $color-primary-hover;
-        }
-    }
-
-    &--disabled {
-        opacity: 0.3;
-    }
-}
diff --git a/src/components/common/forms/AddressPreview.intl.js b/src/components/common/forms/AddressPreview.intl.js
deleted file mode 100644
index 0c35a7f..0000000
--- a/src/components/common/forms/AddressPreview.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        delete: 'Delete',
-        edit: 'Edit',
-        vatLabel: 'VAT'
-    },
-    es: {
-        delete: 'Eliminar',
-        edit: 'Editar',
-        vatLabel: 'NIF'
-    }
-}
diff --git a/src/components/common/forms/AddressPreview.js b/../simple-store/src/components/common/forms/AddressPreview.js
index 427c307..a3c1a55 100644
--- a/src/components/common/forms/AddressPreview.js
+++ b/../simple-store/src/components/common/forms/AddressPreview.js
@@ -2,25 +2,21 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../buttons/Button';
 import Text from '../typography/Text';
 
-// Translation data for this component
-import intlData from './AddressPreview.intl';
-
 /**
  * Component
  */
 class AddressPreview extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -34,7 +30,7 @@ class AddressPreview extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
+
         return (
             <div className="address-preview">
                 <div className="address-preview__name">
@@ -50,9 +46,7 @@ class AddressPreview extends React.Component {
                 {this.props.address.vatin ?
                     <div className="address-preview__vatin">
                         <Text>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'vatLabel')}
-                                locales={intlStore.getCurrentLocale()} />: {this.props.address.vatin}
+                            <FormattedMessage id="vatLabel" />: {this.props.address.vatin}
                         </Text>
                     </div>
                     :
@@ -88,9 +82,7 @@ class AddressPreview extends React.Component {
                     {this.props.onEditClick ?
                         <div className="address-preview__edit" onClick={this.props.onEditClick}>
                             <Text weight="bold">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'edit')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="editButton" />
                             </Text>
                         </div>
                         :
@@ -99,9 +91,7 @@ class AddressPreview extends React.Component {
                     {this.props.onDeleteClick ?
                         <div className="address-preview__delete" onClick={this.props.onDeleteClick}>
                             <Text>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'delete')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="deleteButton" />
                             </Text>
                         </div>
                         :
diff --git a/src/components/common/forms/Checkbox.js b/../simple-store/src/components/common/forms/Checkbox.js
index ac1052d..72ab20a 100644
--- a/src/components/common/forms/Checkbox.js
+++ b/../simple-store/src/components/common/forms/Checkbox.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -10,7 +11,7 @@ import ApplicationStore from '../../../stores/Application/ApplicationStore';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Components
@@ -18,7 +19,7 @@ let debug = require('debug')('tienda765');
 class Checkbox extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
diff --git a/src/components/common/forms/CreditCardForm.intl.js b/src/components/common/forms/CreditCardForm.intl.js
deleted file mode 100644
index 4df55f2..0000000
--- a/src/components/common/forms/CreditCardForm.intl.js
+++ /dev/null
@@ -1,26 +0,0 @@
-export default {
-    en: {
-        email: 'Enter email',
-        creditCardNumber: 'Enter credit card number',
-        securityCode: 'Enter credit card code',
-        cardExpirationMonth: 'Enter expiration month',
-        cardExpirationYear: 'Enter expiration year',
-        cardHolderName: 'Enter card holder name',
-        documentType: 'Enter document type',
-        documentNumber: 'Enter document number',
-        submit: 'Send',
-        fieldRequired: 'Required field'
-    },
-    es: {
-        email: 'Introducir correo',
-        creditCardNumber: 'Introducir número de tarjeta de crédito',
-        securityCode: 'Introducir código de seguridad',
-        cardExpirationMonth: 'Introducir mes de expiración',
-        cardExpirationYear: 'Introducir año de expiración',
-        cardHolderName: 'Introducir nombre del dueño de la tarjeta',
-        documentType: 'Introducir tipo de documento',
-        documentNumber: 'Introducir número de documento',
-        submit: 'Enviar',
-        fieldRequired: 'Campo requerido'
-    }
-}
diff --git a/src/components/common/forms/CreditCardForm.js b/src/components/common/forms/CreditCardForm.js
deleted file mode 100644
index 7ad1ef2..0000000
--- a/src/components/common/forms/CreditCardForm.js
+++ /dev/null
@@ -1,139 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import IntlStore from '../../../stores/Application/IntlStore';
-
-import Button from '../buttons/Button';
-import InputField from './InputField';
-import Select from './Select';
-
-import intlData from './CreditCardForm.intl';
-
-const docTypeOptions = [
-    {name: 'DNI', value: 'dni'},
-    {name: 'PASSPORT', value: 'passport'}
-];
-
-class CreditCardForm extends React.Component {
-    constructor(props) {
-      super(props)
-      this.state = {
-          ccPayload: {
-            email: '',
-            creditCardNumber: '',
-            securityCode: '',
-            cardExpirationMonth: '',
-            cardExpirationYear: '',
-            cardHolderName: '',
-            documentType: '',
-            documentNumber: '',
-          },
-          fieldErrors: {},
-        }
-    }
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    componentDidMount() {
-        require('./CreditCardForm.scss');
-    }
-
-    handleFieldChange = (field, value) => {
-        const payload = this.state.ccPayload;
-        payload[field]= value;
-        this.setState({ ccPayload: payload });
-    };
-
-    handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Client-side validations
-        let fieldErrors = {};
-        const errorFieldTranslation = intlStore.getMessage(intlData, 'fieldRequired');
-        if (!this.state.ccPayload.email) { fieldErrors.email = errorFieldTranslation; }
-        if (!this.state.ccPayload.creditCardNumber) { fieldErrors.creditCardNumber = errorFieldTranslation; }
-        if (!this.state.ccPayload.securityCode) { fieldErrors.securityCode = errorFieldTranslation; }
-        if (!this.state.ccPayload.cardExpirationMonth) { fieldErrors.cardExpirationMonth = errorFieldTranslation; }
-        if (!this.state.ccPayload.cardExpirationYear) { fieldErrors.cardExpirationYear = errorFieldTranslation; }
-        if (!this.state.ccPayload.cardHolderName) { fieldErrors.cardHolderName = errorFieldTranslation; }
-        if (!this.state.ccPayload.documentType) { fieldErrors.documentType = errorFieldTranslation; }
-        if (!this.state.ccPayload.documentNumber) { fieldErrors.documentNumber = errorFieldTranslation; }
-
-        this.setState({fieldErrors: fieldErrors});
-
-        // Validation passed, trigger request
-        if (Object.keys(fieldErrors).length === 0) {
-            this.props.handleTestMercadoPagoSubmit(this.state.ccPayload);
-        }
-    };
-
-    render() {
-        const intlStore = this.context.getStore(IntlStore);
-        return (
-            <div className="address-field">
-                <InputField label={intlStore.getMessage(intlData, 'email')}
-                        onChange={this.handleFieldChange.bind(null, 'email')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="Enter Email"
-                        error={this.state.fieldErrors['email']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'creditCardNumber')}
-                        onChange={this.handleFieldChange.bind(null, 'creditCardNumber')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="4509 9535 6623 3704"
-                        error={this.state.fieldErrors['creditCardNumber']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'securityCode')}
-                        onChange={this.handleFieldChange.bind(null, 'securityCode')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="123"
-                        error={this.state.fieldErrors['securityCode']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'cardExpirationMonth')}
-                        onChange={this.handleFieldChange.bind(null, 'cardExpirationMonth')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="123"
-                        error={this.state.fieldErrors['cardExpirationMonth']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'cardExpirationYear')}
-                        onChange={this.handleFieldChange.bind(null, 'cardExpirationYear')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="2016"
-                        error={this.state.fieldErrors['cardExpirationYear']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'cardHolderName')}
-                        onChange={this.handleFieldChange.bind(null, 'cardHolderName')}
-                        onEnterPress={this.handleSubmitClick}
-                        placeholder="APRO"
-                        error={this.state.fieldErrors['cardHolderName']} />
-
-                <Select label={intlStore.getMessage(intlData, 'documentType')}
-                    placeholder
-                    options={docTypeOptions}
-                    labelWeight={this.props.labelWeight}
-                    value={this.state.docType}
-                    onChange={this.handleFieldChange.bind(null, 'documentType')}
-                    error={this.state.fieldErrors['documentType']} />
-
-                <InputField label={intlStore.getMessage(intlData, 'documentNumber')}
-                            onChange={this.handleFieldChange.bind(null, 'documentNumber')}
-                            onEnterPress={this.handleSubmitClick}
-                            placeholder="35693266"
-                            error={this.state.fieldErrors['documentNumber']} />
-
-                <Button type="primary"
-                        onClick={this.handleSubmitClick}
-                        disabled={this.props.disabled}
-                        loading={this.props.loading}>
-                    {this.props.submitLabel || intlStore.getMessage(intlData, 'submit')}
-                </Button>
-            </div>
-        );
-    }
-}
-
-export default CreditCardForm;
diff --git a/src/components/common/forms/CreditCardForm.scss b/src/components/common/forms/CreditCardForm.scss
deleted file mode 100644
index e69de29..0000000
diff --git a/src/components/common/forms/InputField.js b/../simple-store/src/components/common/forms/InputField.js
index a11134f..089d125 100644
--- a/src/components/common/forms/InputField.js
+++ b/../simple-store/src/components/common/forms/InputField.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -11,7 +12,7 @@ import FormLabel from '../forms/FormLabel';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -19,7 +20,7 @@ let debug = require('debug')('tienda765');
 class InputField extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
@@ -76,6 +77,7 @@ class InputField extends React.Component {
                            placeholder={this.props.placeholder}
                            onChange={this.handleChange}
                            onKeyDown={this.handleKeyDown}
+                           disabled={this.props.disabled}
                            value={this.props.value} />
                 </div>
                 {this.props.error ?
diff --git a/src/components/common/forms/MarkdownEditor.js b/../simple-store/src/components/common/forms/MarkdownEditor.js
index d86e16c..0465669 100644
--- a/src/components/common/forms/MarkdownEditor.js
+++ b/../simple-store/src/components/common/forms/MarkdownEditor.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -11,7 +12,7 @@ import FormLabel from './FormLabel';
 import Textarea from './Textarea';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -19,7 +20,7 @@ let debug = require('debug')('tienda765');
 class MarkdownEditor extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Initial State ***//
diff --git a/src/components/common/forms/NewsletterSubscription.intl.js b/src/components/common/forms/NewsletterSubscription.intl.js
deleted file mode 100644
index a2a66de..0000000
--- a/src/components/common/forms/NewsletterSubscription.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        newsletterDescription: 'Get the latest on sales, new releases and more!',
-        newsletterPlaceholder: 'Enter your email address...',
-        newsletterSubmitButton: 'Sign Up'
-    },
-    es: {
-        newsletterDescription: 'Mantenete informado sobre ofertas, nuevos lanzamientos y mucho más!',
-        newsletterPlaceholder: 'Ingrese su dirección de email...',
-        newsletterSubmitButton: 'Registrarse'
-    }
-};
diff --git a/src/components/common/forms/NewsletterSubscription.js b/../simple-store/src/components/common/forms/NewsletterSubscription.js
index a8d8c37..7fccbda 100644
--- a/src/components/common/forms/NewsletterSubscription.js
+++ b/../simple-store/src/components/common/forms/NewsletterSubscription.js
@@ -2,14 +2,12 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import config from '../../../config';
 import {isValidEmail} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Button from '../buttons/Button';
 import Text from '../typography/Text';
@@ -17,7 +15,6 @@ import Text from '../typography/Text';
 import InputField from './InputField';
 
 // Translation data for this component
-import intlData from './NewsletterSubscription.intl';
 
 /**
  * Component
@@ -25,7 +22,7 @@ import intlData from './NewsletterSubscription.intl';
 class NewsletterSubscription extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -56,22 +53,15 @@ class NewsletterSubscription extends React.Component {
 
     render() {
 
-        //
-        // Helper methods & variables
-        //
-        let intlStore = this.context.getStore(IntlStore);
-
         // Return the mailchimp default subscription form that will be hidden and triggered by our UI
         let mailChimpForm = () => {
             return (
-                <form action="https://tienda765.us14.list-manage.com/subscribe/post"
-                      method="POST" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" target="_blank" noValidate
+                <form action={config.mailChimp.signupFormPostURL}
+                      method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" target="_blank" noValidate
                       style={{position: 'absolute', left: '-5000px', ariaHidden: 'true'}}>
                     <div id="mc_embed_signup_scroll">
-                        <label htmlFor="MERGE0">Subscribe to our mailing list</label>
-                        <input type="hidden" name="u" value="67b5228d8d11af7ae1311f884" />
-                        <input type="hidden" name="id" value="18e7e3eea1" />
-                        <input type="email" value={this.state.newsletterEmail} name="MERGE0" id="MERGE0" required />
+                        <label htmlFor="mce-EMAIL">Subscribe to our mailing list</label>
+                        <input type="email" value={this.state.newsletterEmail} name="EMAIL" id="mce-EMAIL" required />
                         {this.props.signupSource ?
                             <input type="hidden" name="SIGNUP" id="SIGNUP" value={this.props.signupSource} />
                             :
@@ -94,24 +84,20 @@ class NewsletterSubscription extends React.Component {
         return (
             <div className="newsletter-subscription">
                 <div className="newsletter-subscription__description">
-                    <Text color="white" size="small">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'newsletterDescription')}
-                                          locales={intlStore.getCurrentLocale()} />
+                    <Text size="small">
+                        <FormattedMessage id="newsletterDescription" />
                     </Text>
                 </div>
                 <div className="newsletter-subscription__content">
                     {mailChimpForm()}
                     <div className="newsletter-subscription__content-item">
-                        <InputField placeholder={intlStore.getMessage(intlData, 'newsletterPlaceholder')}
+                        <InputField placeholder={this.context.intl.formatMessage({id: 'newsletterPlaceholder'})}
                                     onChange={this.handleNewsletterEmailChange} />
                     </div>
                     <div className="newsletter-subscription__content-item">
                         <Button type="primary" onClick={this.handleNewsletterSubmitClick}
                                 disabled={!isValidEmail(this.state.newsletterEmail)}>
-                            <Text color="white" size="small">
-                               <FormattedMessage message={intlStore.getMessage(intlData, 'newsletterSubmitButton')}
-                                              locales={intlStore.getCurrentLocale()} />
-                            </Text>
+                            {this.context.intl.formatMessage({id: 'newsletterSubmitButton'})}
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/common/forms/QuantitySelector.js b/../simple-store/src/components/common/forms/QuantitySelector.js
index 7409ce0..d8564e2 100644
--- a/src/components/common/forms/QuantitySelector.js
+++ b/../simple-store/src/components/common/forms/QuantitySelector.js
@@ -4,7 +4,7 @@
 import React from 'react';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
diff --git a/src/components/common/forms/RadioSelect.js b/../simple-store/src/components/common/forms/RadioSelect.js
index cf6c95a..ec746f0 100644
--- a/src/components/common/forms/RadioSelect.js
+++ b/../simple-store/src/components/common/forms/RadioSelect.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -10,7 +11,7 @@ import ApplicationStore from '../../../stores/Application/ApplicationStore';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -18,7 +19,7 @@ let debug = require('debug')('tienda765');
 class RadioSelect extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
@@ -33,11 +34,6 @@ class RadioSelect extends React.Component {
 
     render() {
         let groupId = `radio-select-${this.context.getStore(ApplicationStore).uniqueId()}`;
-        let inputClass = 'input-field__input';
-
-        if (this.props.error) {
-            inputClass += ' input-field__input--error';
-        }
         return (
             <div className="radio-select">
                 {this.props.options.map((option, idx) => {
@@ -75,13 +71,6 @@ class RadioSelect extends React.Component {
                         </div>
                     );
                 })}
-                {this.props.error ?
-                    <div className="input-field__error">
-                        <Text size="small">{this.props.error}</Text>
-                    </div>
-                    :
-                    null
-                }
             </div>
         );
     }
diff --git a/src/components/common/forms/RadioSelect.scss b/../simple-store/src/components/common/forms/RadioSelect.scss
index 2978992..b9b7003 100644
--- a/src/components/common/forms/RadioSelect.scss
+++ b/../simple-store/src/components/common/forms/RadioSelect.scss
@@ -1,5 +1,3 @@
-@import '../../../styles/variables.scss';
-
 .radio-select {
     display: flex;
     flex-direction: column;
@@ -14,32 +12,6 @@
     }
 }
 
-.input-field__input {
-    width: 100%;
-    max-width: 100%;
-    min-height: 32px;
-    padding: 15px 0px;
-    margin: 0px;
-    outline: none;
-    box-sizing: border-box;
-    border: 1px solid #eeeeee;
-    border-radius: 3px;
-    text-indent: 10px;
-    font: $font-size-small $font-family-body;
-    color: $color-body;
-    transition: border-color 0.2s linear, box-shadow 0.2s ease;
-
-    &:hover,
-    &:focus {
-        box-shadow: 0 0 3px rgba(0,0,0,.2);
-        min-height: 32px;
-    }
-
-    &--error {
-        border-color: $color-error;
-    }
-}
-
 /*
  * Radio item option
  */
@@ -67,4 +39,4 @@
 
 .radio-select__children {
     margin-top: 15px;
-}
+}
\ No newline at end of file
diff --git a/src/components/common/forms/Select.js b/../simple-store/src/components/common/forms/Select.js
index 59eef4d..3922f99 100644
--- a/src/components/common/forms/Select.js
+++ b/../simple-store/src/components/common/forms/Select.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -11,7 +12,7 @@ import FormLabel from '../forms/FormLabel';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -19,7 +20,7 @@ let debug = require('debug')('tienda765');
 class Select extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Initial State ***//
@@ -31,7 +32,6 @@ class Select extends React.Component {
     //*** Componet Lifecycle ***//
 
     componentDidMount() {
-
         // Component styles
         require('./Select.scss');
     }
@@ -52,6 +52,7 @@ class Select extends React.Component {
         // Helper methods and variables
         //
         let id = `select-${this.context.getStore(ApplicationStore).uniqueId()}`;
+        // let id = 23;
         let options = this.props.options || [];
 
         let componentClass = 'select';
@@ -85,7 +86,7 @@ class Select extends React.Component {
                     :
                     null
                 }
-                <select key={id}
+                <select
                         id={id}
                         className={selectClass}
                         value={this.state.value}
diff --git a/src/components/common/forms/Textarea.js b/../simple-store/src/components/common/forms/Textarea.js
index 23cee62..d68e76c 100644
--- a/src/components/common/forms/Textarea.js
+++ b/../simple-store/src/components/common/forms/Textarea.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
 
 // Flux
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
@@ -11,7 +12,7 @@ import FormLabel from './FormLabel';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -19,7 +20,7 @@ let debug = require('debug')('tienda765');
 class Textarea extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
@@ -51,7 +52,9 @@ class Textarea extends React.Component {
             <div className="textarea">
                 {this.props.label ?
                     <div className="textarea__label">
-                        <FormLabel for={id}>{this.props.label}</FormLabel>
+                        <FormLabel for={id} size={this.props.labelSize} weight={this.props.labelWeight}>
+                            {this.props.label}
+                        </FormLabel>
                     </div>
                     :
                     null
diff --git a/src/components/common/forms/Textarea.scss b/../simple-store/src/components/common/forms/Textarea.scss
index 9d419b7..5893aec 100644
--- a/src/components/common/forms/Textarea.scss
+++ b/../simple-store/src/components/common/forms/Textarea.scss
@@ -17,6 +17,7 @@
     font: $font-size-small $font-family-body;
     color: $color-body;
     transition: border-color 0.2s linear, box-shadow 0.2s ease;
+    resize: vertical;
 
     &:hover,
     &:focus {
diff --git a/src/components/common/groups/GroupAddForm.intl.js b/src/components/common/groups/GroupAddForm.intl.js
deleted file mode 100644
index fc1e0ff..0000000
--- a/src/components/common/groups/GroupAddForm.intl.js
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-    en: {
-        add: 'Add',
-        cancel: 'Cancel',
-        cajonchico: 'Cajón Chico',
-        cajonmediano: 'Cajón Mediano',
-        cajongrande: 'Cajón Grande',
-        fieldRequired: 'This field is required',
-        name: 'Name',
-        type: 'Type'
-    },
-    es: {
-        add: 'Agregar',
-        cancel: 'Cancelar',
-        cajonchico: 'Cajón Chico',
-        cajonmediano: 'Cajón Mediano',
-        cajongrande: 'Cajón Grande',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre',
-        type: 'Tipo'
-    }
-};
diff --git a/src/components/common/groups/GroupAddForm.js b/src/components/common/groups/GroupAddForm.js
deleted file mode 100644
index 8b212ed..0000000
--- a/src/components/common/groups/GroupAddForm.js
+++ /dev/null
@@ -1,149 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../../common/buttons/Button';
-import InputField from '../../common/forms/InputField';
-import Select from '../../common/forms/Select';
-
-// Translation data for this component
-import intlData from './GroupAddForm.intl';
-
-// Instantiate debugger
-let debug = require('debug')('tienda765');
-
-/**
- * Component
- */
-class GroupAddForm extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    //*** Initial State ***//
-
-    state = {
-        name: {en: '', es: ''},
-        tags: [],
-        buyers: [],
-        fieldErrors: {}
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-        require('./GroupAddForm.scss');
-    }
-
-    //*** View Controllers ***//
-
-    handleNameChange = (locale, value) => {
-        let name = this.state.name;
-        name[locale] = value;
-        this.setState({name: name});
-    };
-
-    handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
-
-        this.setState({fieldErrors: {}});
-        let fieldErrors = {};
-        if (!this.state.tags) {
-            fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.name.en) {
-            fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.name.es) {
-            fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        this.setState({fieldErrors: fieldErrors});
-
-        if (Object.keys(fieldErrors).length === 0) {
-            this.props.onSubmitClick({
-                name: this.state.name,
-                buyers: this.state.buyers,
-                tags: this.state.tags
-            });
-        }
-    };
-
-    handleTypeChange = (value) => {
-        this.setState({tags: [value]});
-    };
-
-    //*** Template ***//
-
-    render() {
-
-        let intlStore = this.context.getStore(IntlStore);
-
-        let groupTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'cajonchico'), value: 'Cajón Chico'},
-            {name: intlStore.getMessage(intlData, 'cajonmediano'), value: 'Cajón Mediano'},
-            {name: intlStore.getMessage(intlData, 'cajongrande'), value: 'Cajón Grande'}
-        ];
-
-        let fieldError = (field) => {
-            return this.state.fieldErrors[field];
-        };
-
-        return (
-            <div className="group-add-form">
-                <div className="group-add-form__item">
-                    <Select label={intlStore.getMessage(intlData, 'type')}
-                            placeholder
-                            options={groupTypeOptions}
-                            onChange={this.handleTypeChange}
-                            error={fieldError('type')} />
-                </div>
-                <div className="group-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
-                                onChange={this.handleNameChange.bind(null, 'en')}
-                                error={fieldError('nameEN')} />
-                </div>
-                <div className="group-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                onChange={this.handleNameChange.bind(null, 'es')}
-                                error={fieldError('nameES')} />
-                </div>
-                <div className="group-add-form__actions">
-                    <div className="group-add-form__button">
-                        <Button type="default" onClick={this.props.onCancelClick}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
-                        </Button>
-                    </div>
-                    <div className="group-add-form__button">
-                        <Button type="primary" onClick={this.handleSubmitClick}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'add')}
-                                locales={intlStore.getCurrentLocale()} />
-                        </Button>
-                    </div>
-                </div>
-            </div>
-        );
-    }
-}
-
-/**
- * Default Props
- */
-GroupAddForm.defaultProps = {
-    onCancelClick: function () { debug('onCancelClick not defined'); },
-    onSubmitClick: function (data) { debug(`onSubmitClick not defined. Value: ${data}`); }
-};
-
-/**
- * Exports
- */
-export default GroupAddForm;
diff --git a/src/components/common/groups/GroupAddForm.scss b/src/components/common/groups/GroupAddForm.scss
deleted file mode 100644
index 89afc8b..0000000
--- a/src/components/common/groups/GroupAddForm.scss
+++ /dev/null
@@ -1,19 +0,0 @@
-.group-add-form__item {
-
-    &:not(:first-child) {
-        margin-top: 20px;
-    }
-}
-
-.group-add-form__actions {
-    display: flex;
-    justify-content: flex-end;
-    margin-top: 20px;
-}
-
-.group-add-form__button {
-
-    &:not(:first-child) {
-        margin-left: 10px;
-    }
-}
diff --git a/src/components/common/images/Carousel.scss b/../simple-store/src/components/common/images/Carousel.scss
index 1af5497..23141ee 100644
--- a/src/components/common/images/Carousel.scss
+++ b/../simple-store/src/components/common/images/Carousel.scss
@@ -40,8 +40,6 @@
 
     .gallery .item {
         position: absolute;
-        max-height: 495.45px;
-        width: 100%;
         top: 0;
         left: 0;
         pointer-events: none;
diff --git a/src/components/common/images/ImageGallery.js b/../simple-store/src/components/common/images/ImageGallery.js
index 4447c30..3765e5c 100644
--- a/src/components/common/images/ImageGallery.js
+++ b/../simple-store/src/components/common/images/ImageGallery.js
@@ -1,4 +1,3 @@
-
 /**
  * Imports
  */
diff --git a/src/components/common/images/ImageGallery.scss b/../simple-store/src/components/common/images/ImageGallery.scss
index 4747222..6fc666d 100644
--- a/src/components/common/images/ImageGallery.scss
+++ b/../simple-store/src/components/common/images/ImageGallery.scss
@@ -18,8 +18,7 @@
     }
 
     img {
-        max-width: 400px;
-        max-height: 400px;
+        width: 100%;
     }
 }
 
diff --git a/src/components/common/images/ImageLibrary.intl.js b/src/components/common/images/ImageLibrary.intl.js
deleted file mode 100644
index 95822fd..0000000
--- a/src/components/common/images/ImageLibrary.intl.js
+++ /dev/null
@@ -1,10 +0,0 @@
-export default {
-    en: {
-        delete: 'Delete',
-        viewURL: 'URL'
-    },
-    es: {
-        delete: 'Remover',
-        viewURL: 'URL'
-    }
-};
diff --git a/src/components/common/images/ImageLibrary.js b/../simple-store/src/components/common/images/ImageLibrary.js
index de52808..a3e7017 100644
--- a/src/components/common/images/ImageLibrary.js
+++ b/../simple-store/src/components/common/images/ImageLibrary.js
@@ -2,19 +2,14 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../buttons/Button';
 
-// Translation data for this component
-import intlData from './ImageLibrary.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -22,7 +17,7 @@ let debug = require('debug')('tienda765');
 class ImageLibrary extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -48,7 +43,6 @@ class ImageLibrary extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="image-library">
                 {this.props.images.map((img, idx) => {
@@ -59,16 +53,14 @@ class ImageLibrary extends React.Component {
                                 <div className="image-library__placeholder-overlay-content">
                                     <div className="image-library__button">
                                         <Button type="default" onClick={this.handleViewURLClick.bind(null, idx)}>
-                                            <FormattedMessage message={intlStore.getMessage(intlData, 'viewURL')}
-                                                              locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="viewURL" />
                                         </Button>
                                     </div>
                                     <div className="image-library__button">
                                         <Button type="primary" onClick={this.handleRemoveClick.bind(null, idx)}>
-                                            <FormattedMessage message={intlStore.getMessage(intlData, 'delete')}
-                                                              locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="deleteButton" />
                                         </Button>
-                                    </div>
+                                        </div>
                                 </div>
                             </div>
                         </div>
@@ -89,4 +81,4 @@ ImageLibrary.defaultProps = {
 /**
  * Exports
  */
-export default ImageLibrary;
+export default ImageLibrary;
\ No newline at end of file
diff --git a/src/components/common/images/ImageUpload.js b/../simple-store/src/components/common/images/ImageUpload.js
index 5e523e7..33714f6 100644
--- a/src/components/common/images/ImageUpload.js
+++ b/../simple-store/src/components/common/images/ImageUpload.js
@@ -7,7 +7,7 @@ import React from 'react';
 import Button from '../buttons/Button';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -37,7 +37,7 @@ class ImageUpload extends React.Component {
     //*** View Controllers ***//
 
     handlePlaceholderClick = () => {
-        this.refs.input.getDOMNode().click();
+        this.fileInput.click();
     };
 
     handleFileChange = (evt) => {
@@ -64,7 +64,7 @@ class ImageUpload extends React.Component {
     render() {
         return (
             <div className="image-upload">
-                <input ref="input" type="file" className="image-upload__input" onChange={this.handleFileChange} />
+                <input ref={fileInput => this.fileInput = fileInput} type="file" className="image-upload__input" onChange={this.handleFileChange} />
                 <div className="image-upload__placeholder" onClick={this.handlePlaceholderClick}>
                     <img src={this.state.image} />
                 </div>
diff --git a/src/components/common/layout/.DS_Store b/src/components/common/layout/.DS_Store
deleted file mode 100644
index 7d65ba4..0000000
Binary files a/src/components/common/layout/.DS_Store and /dev/null differ
diff --git a/src/components/common/layout/Drawer/Drawer.js b/../simple-store/src/components/common/layout/Drawer/Drawer.js
index 0d50b50..ac90e57 100644
--- a/src/components/common/layout/Drawer/Drawer.js
+++ b/../simple-store/src/components/common/layout/Drawer/Drawer.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import React from 'react';
+import ReactDOM from 'react-dom';
 
 /**
  * Component
diff --git a/src/components/common/layout/Footer/Footer.intl.js b/src/components/common/layout/Footer/Footer.intl.js
deleted file mode 100644
index 0984679..0000000
--- a/src/components/common/layout/Footer/Footer.intl.js
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-    en: {
-        infoTitle: 'Info',
-        newsletterTitle: 'News & Updates',
-        socialTitle: 'Social',
-        storesTitle: 'Our Store',
-        stores: 'Info of out store',
-        clientService: 'Clients support',
-        shipInfo: 'Shipping information',
-        termsAndCond: 'Terms & Conditions',
-    },
-    es: {
-        infoTitle: 'Información',
-        newsletterTitle: 'Últimas Novedades',
-        socialTitle: 'Social',
-        storesTitle: 'Nuestra tienda',
-        stores: 'Info de nuestra tienda',
-        clientService: 'Soporte al consumidor',
-        shipInfo: 'Información de envios',
-        termsAndCond: 'Términos & Condiciones',
-    }
-};
diff --git a/src/components/common/layout/Footer/Footer.js b/../simple-store/src/components/common/layout/Footer/Footer.js
index f61bdfc..2d715d3 100644
--- a/src/components/common/layout/Footer/Footer.js
+++ b/../simple-store/src/components/common/layout/Footer/Footer.js
@@ -2,19 +2,14 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Required Components
 import Heading from '../../typography/Heading';
 import NewsletterSubscription from '../../forms/NewsletterSubscription';
 import Text from '../../typography/Text';
-import StoresPage from '../../../pages/StaticContent/StoresPage.js';
-// Translation data for this component
-import intlData from './Footer.intl';
 
 /**
  * Component
@@ -22,7 +17,7 @@ import intlData from './Footer.intl';
 class Footer extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -37,20 +32,10 @@ class Footer extends React.Component {
 
     render() {
 
-        //
-        // Helper methods & variables
-        //
-
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()};
-
-
-
         // Info links
         let infoLinks = [
-            {name: intlStore.getMessage(intlData, 'clientService'), link: {to: 'info', params: routeParams}},
-            {name: intlStore.getMessage(intlData, 'shipInfo'), link: {to: 'info', params: routeParams}},
-            {name: intlStore.getMessage(intlData, 'termsAndCond'), link: {to: 'info', params: routeParams}}
+            {name: this.context.intl.formatMessage({id: 'infoLink'}), link: {to: `/${this.context.intl.locale}/info`}},
+            {name: this.context.intl.formatMessage({id: 'deliveryLink'}), link: {to: `/${this.context.intl.locale}/delivery`}},
         ];
 
         // Return a content block's items
@@ -58,8 +43,8 @@ class Footer extends React.Component {
             return items.map(function (item, idx) {
                 return (
                     <li key={idx} className="footer__list-item">
-                        <Link className="footer__link" to={item.link.to} params={item.link.params}>
-                            <Text color="white" size="small">{item.name}</Text>
+                        <Link className="footer__link" to={item.link.to}>
+                            <Text size="small">{item.name}</Text>
                         </Link>
                     </li>
                 );
@@ -77,25 +62,8 @@ class Footer extends React.Component {
 
                         <div className="footer__block">
                             <div className="footer__block-title">
-                                <Heading color="yellow" size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'storesTitle')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Heading>
-                            </div>
-                            <div className="footer__block-content">
-
-                              <StoresPage />
-
-                            </div>
-                        </div>
-
-                        <div className="footer__block">
-                            <div className="footer__block-title">
-                                <Heading color="yellow" size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'infoTitle')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                <Heading size="small">
+                                    <FormattedMessage id="infoTitle" />
                                 </Heading>
                             </div>
                             <div className="footer__block-content">
@@ -107,10 +75,8 @@ class Footer extends React.Component {
 
                         <div className="footer__block">
                             <div className="footer__block-title">
-                                <Heading color="yellow" size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'socialTitle')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                <Heading size="small">
+                                    <FormattedMessage id="socialTitle" />
                                 </Heading>
                             </div>
                             <div className="footer__block-content">
@@ -118,16 +84,16 @@ class Footer extends React.Component {
                                     <li className="footer__social-item">
                                         <div className="footer__social-icon footer__facebook-icon"></div>
                                         <div>
-                                            <a className="footer__link footer__social-link" href="//facebook.com/tienda765" target="_blank">
-                                                <Text color="white" size="small">Facebook</Text>
+                                            <a className="footer__link footer__social-link" href="//facebook.com" target="_blank">
+                                                <Text size="small">Facebook</Text>
                                             </a>
                                         </div>
                                     </li>
                                     <li className="footer__social-item">
                                         <div className="footer__social-icon footer__instagram-icon"></div>
                                         <div>
-                                            <a className="footer__link footer__social-link" href="//instagram.com/tienda765" target="_blank">
-                                                <Text color="white"size="small">Instagram</Text>
+                                            <a className="footer__link footer__social-link" href="//instagram.com" target="_blank">
+                                                <Text size="small">Instagram</Text>
                                             </a>
                                         </div>
                                     </li>
@@ -137,10 +103,8 @@ class Footer extends React.Component {
 
                         <div className="footer__block">
                             <div className="footer__block-title">
-                                <Heading color="yellow" size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'newsletterTitle')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                <Heading size="small">
+                                    <FormattedMessage id="newsletterTitle" />
                                 </Heading>
                             </div>
                             <div className="footer__block-content">
@@ -150,7 +114,7 @@ class Footer extends React.Component {
 
                     </div>
                     <div className="footer__copyright">
-                        <Text color="white" size="small">© {new Date().getFullYear()} Tienda 765</Text>
+                        <Text size="small">© {new Date().getFullYear()} {this.props.brandName}</Text>
                     </div>
                 </div>
             </div>
diff --git a/src/components/common/layout/Footer/Footer.scss b/../simple-store/src/components/common/layout/Footer/Footer.scss
index 555d21c..7760d3a 100644
--- a/src/components/common/layout/Footer/Footer.scss
+++ b/../simple-store/src/components/common/layout/Footer/Footer.scss
@@ -4,8 +4,9 @@
 .footer {
     display: flex;
     justify-content: center;
-    padding: 40px 0 40px 0;
-    background-color: black;
+    padding: 40px 0 20px 0;
+    border-top: 1px solid $color-heading;
+    background-color: $color-secondary;
 }
 
 /*
@@ -134,7 +135,4 @@
     display: flex;
     justify-content: center;
     margin-top: 40px;
-    & > span {
-        color: white;
-    }
 }
diff --git a/src/components/common/layout/Header/DesktopHeader.intl.js b/src/components/common/layout/Header/DesktopHeader.intl.js
deleted file mode 100644
index 53bcb23..0000000
--- a/src/components/common/layout/Header/DesktopHeader.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        hi: 'Hi',
-        login: 'Login',
-        logout: 'Logout',
-        myAccount: 'My Account',
-        register: 'Register',
-        adminPanel: 'Admin Panel'
-    },
-    es: {
-        hi: 'Hola',
-        login: 'Login',
-        logout: 'Logout',
-        myAccount: 'Mi cuenta',
-        register: 'Registrarse',
-        adminPanel: 'Admin Panel'
-    }
-};
diff --git a/src/components/common/layout/Header/DesktopHeader.js b/../simple-store/src/components/common/layout/Header/DesktopHeader.js
index 09642b4..b4b5615 100644
--- a/src/components/common/layout/Header/DesktopHeader.js
+++ b/../simple-store/src/components/common/layout/Header/DesktopHeader.js
@@ -3,14 +3,14 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import { Link } from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import AccountStore from '../../../../stores/Account/AccountStore';
 import CartStore from '../../../../stores/Cart/CartStore';
 import DrawerStore from '../../../../stores/Application/DrawerStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 import triggerDrawer from '../../../../actions/Application/triggerDrawer';
 
 // Required components
@@ -19,18 +19,15 @@ import CollectionTreeMenu from '../../navigation/CollectionTreeMenu';
 import MainNavigation from '../../navigation/MainNavigation';
 import Text from '../../typography/Text';
 
-// Translation data for this component
-import intlData from './DesktopHeader.intl';
-
 /**
  * Component
  */
 class DesktopHeader extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -45,7 +42,6 @@ class DesktopHeader extends React.Component {
     //*** Component Lifecycle ***//
 
     componentDidMount() {
-
         // Component styles
         require('./DesktopHeader.scss');
     }
@@ -68,65 +64,40 @@ class DesktopHeader extends React.Component {
 
     render() {
 
-        // Helper variables
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()};
-
-        // Check if user logged-in is an Admin
-        let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
-
         // Return
         return (
             <div className="desktop-header">
                 <div className="desktop-header__container">
                     <div className="desktop-header__row">
                         <div className="desktop-header__container-left-column">
-                            <Link className="desktop-header__logo-link" to='homepage' params={routeParams}>
-                              <div className="desktop-header__logo"></div>
+                            <Link className="desktop-header__logo-link" to={`/${this.context.intl.locale}`}>
+                                <div className="desktop-header__logo">
+                                </div>
                             </Link>
                             <div className="desktop-header__navigation">
-                                <MainNavigation menutype="admin" links={this.props.collections} />
+                                <MainNavigation links={this.props.collections} />
                             </div>
                         </div>
                         <div className="desktop-header__container-right-column">
                             {this.state.user ?
                                 <div className="desktop-header__account">
-                                    { isAdmin ?
-                                        <div className="desktop-header__logout-button">
-                                            <Link to='admin-panel' params={routeParams}>
-                                                <Text size="small" weight="bold" color="white">
-                                                    <FormattedMessage
-                                                        message={intlStore.getMessage(intlData, 'adminPanel')}
-                                                        locales={intlStore.getCurrentLocale()} />
-                                                </Text>
-                                            </Link>
-                                        </div>
-                                        :
-                                        null
-                                    }
                                     <div className="desktop-header__logout-button">
-                                        <Link to='logout' params={routeParams}>
-                                            <Text size="small" weight="bold" color="white">
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'logout')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                        <Link to={`/${this.context.intl.locale}/logout`}>
+                                            <Text size="small">
+                                                <FormattedMessage id="logoutHeader" />
                                             </Text>
                                         </Link>
                                     </div>
                                     <div className="desktop-header__account-button">
-                                        <Link to='account' params={routeParams}>
+                                        <Link to={`/${this.context.intl.locale}/account`}>
                                             <div>
-                                                <Text size="small" weight="bold" color="white">
-                                                    <FormattedMessage
-                                                        message={intlStore.getMessage(intlData, 'hi')}
-                                                        locales={intlStore.getCurrentLocale()} />, {this.state.user.name.split(' ')[0]}
+                                                <Text size="small">
+                                                    <FormattedMessage id="hi" />, {this.state.user.name.split(' ')[0]}
                                                 </Text>
                                             </div>
                                             <div>
-                                                <Text size="small" weight="bold" color="white">
-                                                    <FormattedMessage
-                                                        message={intlStore.getMessage(intlData, 'myAccount')}
-                                                        locales={intlStore.getCurrentLocale()} />
+                                                <Text size="small" weight="bold">
+                                                    <FormattedMessage id="myAccount" />
                                                 </Text>
                                             </div>
                                         </Link>
@@ -135,20 +106,16 @@ class DesktopHeader extends React.Component {
                                 :
                                 <div className="desktop-header__account">
                                     <div className="desktop-header__register-button">
-                                        <Link to='register' params={routeParams}>
-                                            <Text size="medium" color="white">
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'register')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                        <Link to={`/${this.context.intl.locale}/register`}>
+                                            <Text size="medium">
+                                                <FormattedMessage id="registerHeader" />
                                             </Text>
                                         </Link>
                                     </div>
                                     <div className="desktop-header__login-button">
-                                        <Link to='login' params={routeParams}>
-                                            <Text size="medium" color="white">
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'login')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                        <Link to={`/${this.context.intl.locale}/login`} >
+                                            <Text size="medium">
+                                                <FormattedMessage id="loginHeader" />
                                             </Text>
                                         </Link>
                                     </div>
@@ -179,7 +146,7 @@ DesktopHeader = connectToStores(DesktopHeader, [AccountStore, CartStore, DrawerS
     return {
         _cartTotalItems: context.getStore(CartStore).getTotalItems(),
         _user: context.getStore(AccountStore).getAccountDetails(),
-        _openedDrawer: context.getStore(DrawerStore).getOpenedDrawer()
+        _openedDrawer: context.getStore(DrawerStore).getOpenedDrawer(),
     };
 });
 
diff --git a/src/components/common/layout/Header/DesktopHeader.scss b/../simple-store/src/components/common/layout/Header/DesktopHeader.scss
index fb666c0..e4048e0 100644
--- a/src/components/common/layout/Header/DesktopHeader.scss
+++ b/../simple-store/src/components/common/layout/Header/DesktopHeader.scss
@@ -3,7 +3,7 @@
 .desktop-header {
     display: flex;
     justify-content: center;
-    background-color: black;
+    border-bottom: solid 1px #eeeeee;
 }
 
 /*
@@ -15,8 +15,7 @@
     flex-direction: column;
     width: 100%;
     max-width: $layout-max-width;
-    padding: 5px 32px 5px 32px;
-    height: 70px;
+    padding: 10px 32px 10px 32px;
     @media only screen and (min-width: $layout-max-width) {
         padding-left: 0;
         padding-right: 0;
@@ -35,13 +34,13 @@
 .desktop-header__container-left-column {
     display: flex;
     width: 100%;
-
 }
 
 .desktop-header__container-right-column {
     display: flex;
+    flex-shrink: 0;
     justify-content: flex-end;
-    min-width: 350px;
+    min-width: 240px;
     align-self: center;
 }
 
@@ -50,50 +49,17 @@
  */
 
 .desktop-header__logo {
-    width: 80;
-    height: 80;
-    position:static;
-    background: url('./tienda-santa.png');
-    background-size: 100%;
-    background-repeat: no-repeat;
-    background-position: top center;
-}
-
-.desktop-header__tienda {
-  display: inline;
-  font-size: 30px;
-  font-weight: bold;
-  letter-spacing: 1px;
-  vertical-align: baseline;
-  background: transparent;
-  color: white;
-  text-decoration: none;
-  font-weight: 700;
-
-}
-
-.desktop-header__765 {
-  display: inline;
-  font-size: 30px;
-  font-weight: bold;
-  letter-spacing: 1px;
-  vertical-align: baseline;
-  background: transparent;
-  color: white;
-  font-family: $font-family-heading;
-  text-decoration: none;
-  font-weight: 700;
+    img {
+        width: 58px;
+        height: 52px;
+        background: url('../../../../../static/logo.png');
+        background-size: 100%;
+        background-repeat: no-repeat;
+    }
 }
 
 .desktop-header__logo-link {
     align-self: center;
-    cursor: pointer;
-    padding: 10px;
-    &:hover {
-        span {
-            color: $color-primary;
-        }
-    }
 }
 
 .desktop-header__button {
@@ -137,9 +103,9 @@
 
 .desktop-header__login-button,
 .desktop-header__account-button {
-    padding: 8px;
+    padding: 10px;
     margin-left: 10px;
-    border: 1px solid red;
+    border: 1px solid #eee;
     border-radius: 3px;
 
     a {
@@ -159,6 +125,7 @@
     width: 30px;
     height: 30px;
     cursor: pointer;
-    background: url('./cart-white.png');
+    background: url('./cart.png');
     background-size: 100%;
+    background-repeat: no-repeat;
 }
diff --git a/src/components/common/layout/Header/HandheldsHeader.js b/../simple-store/src/components/common/layout/Header/HandheldsHeader.js
index 49eaa3d..c513726 100644
--- a/src/components/common/layout/Header/HandheldsHeader.js
+++ b/../simple-store/src/components/common/layout/Header/HandheldsHeader.js
@@ -3,12 +3,13 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {Link} from 'react-router';
+import { injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import CartStore from '../../../../stores/Cart/CartStore';
 import DrawerStore from '../../../../stores/Application/DrawerStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 import triggerDrawer from '../../../../actions/Application/triggerDrawer';
 
 // Required components
@@ -20,8 +21,9 @@ import Badge from '../../indicators/Badge';
 class HandheldsHeader extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -34,7 +36,6 @@ class HandheldsHeader extends React.Component {
     //*** Component Lifecycle ***//
 
     componentDidMount() {
-
         // Component styles
         require('./HandheldsHeader.scss');
     }
@@ -55,10 +56,6 @@ class HandheldsHeader extends React.Component {
     //*** Template ***//
 
     render() {
-
-        // Helper variables
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()};
-
         // Return
         return (
             <div className="handhelds-header">
@@ -69,9 +66,10 @@ class HandheldsHeader extends React.Component {
                         <div className="handhelds-header__close-button" onClick={this.handleBtnClick.bind(null, 'menu')}></div>
                     }
                 </div>
-                <div className="handhelds-header__logo-link">
-                    <Link to='homepage' params={routeParams}>
-                        <div className="handhelds-header__logo"></div>
+                <div className="handhelds-header__title">
+                    <Link to={`/${this.context.intl.locale}`}>
+                        <div className="handhelds-header__logo">
+                        </div>
                     </Link>
                 </div>
                 <div className="handhelds-header__right-actions">
diff --git a/src/components/common/layout/Header/HandheldsHeader.scss b/../simple-store/src/components/common/layout/Header/HandheldsHeader.scss
index 225d539..e163b84 100644
--- a/src/components/common/layout/Header/HandheldsHeader.scss
+++ b/../simple-store/src/components/common/layout/Header/HandheldsHeader.scss
@@ -1,10 +1,7 @@
-@import '../../../../styles/variables.scss';
-
 .handhelds-header {
     display: flex;
-    padding: 5px;
-    background-color: black;
-    height: 60;
+    padding: 15px;
+    border-bottom: solid 1px #eeeeee;
 }
 
 /*
@@ -14,51 +11,13 @@
 .handhelds-header__left-actions {
     align-self: center;
     text-align: left;
-    width: 38%;
+    width: 20%;
 }
 
 /*
  * Logo
  */
 
- .handhelds-header__logo-link {
-   align-self: center;
-   cursor: pointer;
-   padding: 10px;
-
-     &:hover {
-         span {
-             color: $color-primary;
-         }
-     }
- }
-
- .handhelds-header__logo-link a { text-decoration: none; }
-
- .handhelds-header__tienda {
-   display: inline;
-   font-size: 30px;
-   letter-spacing: 1px;
-   text-decoration: none;
-   vertical-align: baseline;
-   background: transparent;
-   color: white;
-   font-weight: 700;
-
- }
-
- .handhelds-header__765 {
-   display: inline;
-   font-size: 30px;
-   letter-spacing: 1px;
-   vertical-align: baseline;
-   background: transparent;
-   color: white;
-   font-family: $font-family-heading;
-   text-decoration: none;
-   font-weight: 700;
- }
-
 .handhelds-header__title {
     display: flex;
     justify-content: center;
@@ -67,13 +26,14 @@
 }
 
 .handhelds-header__logo {
-    width: 60;
-    height: 60;
-    position:static;
-    background: url('./tienda-santa.png');
-    background-size: 100%;
-    background-repeat: no-repeat;
-    background-position: top center;
+    img {
+        width: 100%;
+        min-width: 58px;
+        max-width: 58px;
+        height: 52px;
+        background: url('../../../../../static/logo.png') no-repeat;
+        background-size: 100%;
+    }
 }
 
 /*
@@ -84,7 +44,7 @@
     display: flex;
     justify-content: flex-end;
     align-self: center;
-    width: 38%;
+    width: 20%;
 }
 
 /*
@@ -92,19 +52,18 @@
  */
 
 .handhelds-header__menu-button {
-    width: 60px;
-    height: 50px;
+    width: 30px;
+    height: 30px;
     cursor: pointer;
-    background: url('./menu-black.png');
-    background-color: black;
+    background: url('./menu.png');
     background-size: 100%;
 }
 
 .handhelds-header__cart-button {
-    width: 45px;
-    height: 45px;
+    width: 30px;
+    height: 30px;
     cursor: pointer;
-    background: url('./cart-white.png');
+    background: url('./cart.png');
     background-size: 100%;
 }
 
@@ -112,6 +71,6 @@
     width: 30px;
     height: 30px;
     cursor: pointer;
-    background: url('./close-white.png');
+    background: url('./close.png');
     background-size: 100%;
 }
diff --git a/src/components/common/layout/Header/HeaderHighlight.intl.js b/src/components/common/layout/Header/HeaderHighlight.intl.js
deleted file mode 100644
index 9ff2c28..0000000
--- a/src/components/common/layout/Header/HeaderHighlight.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        freeShipping: 'Free shipping over'
-    },
-    es: {
-        freeShipping: 'Envío gratis para compras mayores a'
-    }
-};
diff --git a/src/components/common/layout/Header/HeaderHighlight.js b/../simple-store/src/components/common/layout/Header/HeaderHighlight.js
index f5682af..54788a2 100644
--- a/src/components/common/layout/Header/HeaderHighlight.js
+++ b/../simple-store/src/components/common/layout/Header/HeaderHighlight.js
@@ -2,7 +2,8 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
 import IntlStore from '../../../../stores/Application/IntlStore';
@@ -10,16 +11,14 @@ import IntlStore from '../../../../stores/Application/IntlStore';
 // Required components
 import Text from '../../typography/Text';
 
-// Translation data for this component
-import intlData from './HeaderHighlight.intl';
-
 /**
  * Component
  */
 class HeaderHighlight extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -34,7 +33,6 @@ class HeaderHighlight extends React.Component {
 
     render() {
         let intlStore = this.context.getStore(IntlStore);
-
         return (
             <div className="header-highlight">
                 <div className="header-highlight__shipping-icon">
@@ -42,12 +40,11 @@ class HeaderHighlight extends React.Component {
                 </div>
                 <div className="header-highlight__shipping-text">
                     <Text size="small" weight="bold">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'freeShipping')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="freeShipping" />
                         &nbsp;
-                        <FormattedNumber value="199"
+                        <FormattedNumber value="19.90"
                                          style="currency"
-                                         currency="ARS" />
+                                         currency="EUR" />
                     </Text>
                 </div>
             </div>
diff --git a/src/components/common/layout/Header/HeaderHighlight.scss b/../simple-store/src/components/common/layout/Header/HeaderHighlight.scss
index bfcd033..fbd4e79 100644
--- a/src/components/common/layout/Header/HeaderHighlight.scss
+++ b/../simple-store/src/components/common/layout/Header/HeaderHighlight.scss
@@ -2,7 +2,7 @@
     display: flex;
     justify-content: center;
     padding: 7.5px 0;
-    background-color: white;
+    background-color: #eee;
 }
 
 .header-highlight__shipping-icon {
diff --git a/src/components/common/layout/Header/cart-white.png b/src/components/common/layout/Header/cart-white.png
deleted file mode 100644
index c8d3b37..0000000
Binary files a/src/components/common/layout/Header/cart-white.png and /dev/null differ
diff --git a/../simple-store/src/components/common/layout/Header/cart.png b/../simple-store/src/components/common/layout/Header/cart.png
new file mode 100644
index 0000000..28cbe66
Binary files /dev/null and b/../simple-store/src/components/common/layout/Header/cart.png differ
diff --git a/src/components/common/layout/Header/close-white.png b/src/components/common/layout/Header/close-white.png
deleted file mode 100644
index abb620c..0000000
Binary files a/src/components/common/layout/Header/close-white.png and /dev/null differ
diff --git a/src/components/common/modals/close.png b/../simple-store/src/components/common/layout/Header/close.png
similarity index 100%
rename from src/components/common/modals/close.png
rename to ../simple-store/src/components/common/layout/Header/close.png
diff --git a/src/components/common/layout/Header/index.js b/../simple-store/src/components/common/layout/Header/index.js
index c001ff7..3aa5157 100644
--- a/src/components/common/layout/Header/index.js
+++ b/../simple-store/src/components/common/layout/Header/index.js
@@ -6,6 +6,7 @@ import React from 'react';
 // Required components
 import Breakpoint from '../../../core/Breakpoint';
 
+
 import DesktopHeader from './DesktopHeader';
 import HandheldsHeader from './HandheldsHeader';
 import HeaderHighlight from './HeaderHighlight';
diff --git a/src/components/common/layout/Header/menu-black.png b/src/components/common/layout/Header/menu-black.png
deleted file mode 100644
index d6ce150..0000000
Binary files a/src/components/common/layout/Header/menu-black.png and /dev/null differ
diff --git a/../simple-store/src/components/common/layout/Header/menu.png b/../simple-store/src/components/common/layout/Header/menu.png
new file mode 100644
index 0000000..d7039a7
Binary files /dev/null and b/../simple-store/src/components/common/layout/Header/menu.png differ
diff --git a/src/components/common/layout/Header/tienda-santa-2.png b/src/components/common/layout/Header/tienda-santa-2.png
deleted file mode 100644
index 7617e04..0000000
Binary files a/src/components/common/layout/Header/tienda-santa-2.png and /dev/null differ
diff --git a/src/components/common/layout/Header/tienda-santa.png b/src/components/common/layout/Header/tienda-santa.png
deleted file mode 100644
index e6a0b73..0000000
Binary files a/src/components/common/layout/Header/tienda-santa.png and /dev/null differ
diff --git a/src/components/common/modals/Modal.js b/../simple-store/src/components/common/modals/Modal.js
index 109e77f..05de3a7 100644
--- a/src/components/common/modals/Modal.js
+++ b/../simple-store/src/components/common/modals/Modal.js
@@ -32,7 +32,7 @@ class Modal extends React.Component {
                             </div>
                             <div className="modal__close">
                                 {this.props.onCloseClick ?
-                                    <div className="modal__close-button" onClick={this.props.onCloseClick}></div>
+                                    <a role="button" className="modal__close-button" onClick={this.props.onCloseClick}>&times;</a>
                                     :
                                     null
                                 }
diff --git a/src/components/common/modals/Modal.scss b/../simple-store/src/components/common/modals/Modal.scss
index 650950c..1a161bb 100644
--- a/src/components/common/modals/Modal.scss
+++ b/../simple-store/src/components/common/modals/Modal.scss
@@ -10,13 +10,14 @@
     height: 100%;
     z-index: 99;
     background-color: rgba(0, 0, 0, 0.3);
+    overflow-y: auto;
 }
 
 .modal__container {
     align-self: center;
+    max-height: 100%;
 
     @include breakpoint(handhelds) {
-        max-height: 100%;
         overflow: scroll;
     }
 }
@@ -51,11 +52,10 @@
 }
 
 .modal__close-button {
-  width: 40px;
-  height: 40px;
-  cursor: pointer;
-  background: url('./close.png');
-  background-size: 100%;
+    float: right;
+    margin: -15px 0;
+    cursor: pointer;
+    font-size: 1.6em;
 }
 
 /*
diff --git a/src/components/common/navigation/Breadcrumbs.js b/../simple-store/src/components/common/navigation/Breadcrumbs.js
index be766fd..37faac3 100644
--- a/src/components/common/navigation/Breadcrumbs.js
+++ b/../simple-store/src/components/common/navigation/Breadcrumbs.js
@@ -3,7 +3,8 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {Link} from 'react-router';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import ResponsiveStore from '../../../stores/Application/ResponsiveStore';
@@ -17,7 +18,7 @@ import Text from '../typography/Text';
 class Breadcrumbs extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Initial State ***//
@@ -44,7 +45,7 @@ class Breadcrumbs extends React.Component {
 
         // In mobile, only last crumb with link is shown. Figure out what it is.
         let backLink;
-        let links = this.props.links.filter(l => l.to && l.params);
+        let links = this.props.links.filter(l => l.to );
         if (links.length > 0) {
             backLink = links[links.length-1];
         }
@@ -61,10 +62,10 @@ class Breadcrumbs extends React.Component {
                     <nav>
                         <ul className="breadcrumbs__list">
                             {this.props.links && this.props.links.map(function (link, idx) {
-                                if (link.to && link.params) {
+                                if (link.to) {
                                     return (
                                         <li key={idx} className="breadcrumbs__list-item">
-                                            <Link className="breadcrumbs__link" to={link.to} params={link.params}>
+                                            <Link className="breadcrumbs__link" to={link.to}>
                                                 <Text size="small">{link.name}</Text>
                                             </Link>
                                         </li>
@@ -91,7 +92,7 @@ class Breadcrumbs extends React.Component {
                     :
                     <div className="breadcrumbs__back">
                         {backLink ?
-                            <Link className="breadcrumbs__back-link" to={backLink.to} params={backLink.params}>
+                            <Link className="breadcrumbs__back-link" to={backLink.to}>
                                 <Text>
                                     &#10094; {backLink.name}
                                 </Text>
diff --git a/src/components/common/navigation/CollectionTreeMenu.js b/../simple-store/src/components/common/navigation/CollectionTreeMenu.js
index 3ea8da2..7b8a7c6 100644
--- a/src/components/common/navigation/CollectionTreeMenu.js
+++ b/../simple-store/src/components/common/navigation/CollectionTreeMenu.js
@@ -2,14 +2,12 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Text from '../typography/Text';
 
@@ -21,7 +19,8 @@ import TreeMenu from './TreeMenu';
 class CollectionTreeMenu extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -29,11 +28,11 @@ class CollectionTreeMenu extends React.Component {
     state = {
         openedDrawer: undefined
     };
-    
+
     //*** Component Lifecycle ***//
-    
+
     componentDidMount() {
-        
+
         // Component styles
         require('./CollectionTreeMenu.scss');
     }
@@ -47,17 +46,15 @@ class CollectionTreeMenu extends React.Component {
     handleMouseLeave = () => {
         this.setState({openedDrawer: null});
     };
-    
+
     //*** Template ***//
-    
+
     render() {
 
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
-
+        let locale = this.context.intl.locale;
         //
         // Return
         //
@@ -70,18 +67,12 @@ class CollectionTreeMenu extends React.Component {
                             if (this.state.openedDrawer && this.state.openedDrawer.id === collection.id) {
                                 className += ' collection-tree-menu__root-item--selected';
                             }
-                            let params = Object.assign({
-                                collectionId: collection.id,
-                                collectionSlug: slugify(intlStore.getMessage(collection.name))
-                            }, routeParams);
                             return (
                                 <li key={idx} className={className}
                                     onMouseEnter={this.handleMouseEnter.bind(null, collection)}>
                                     <Text className="collection-tree-menu__root-item-label" size="medium">
-                                        <Link to='collection-slug' params={params}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(collection.name)}
-                                                locales={intlStore.getCurrentLocale()} />
+                                        <Link to={`/${locale}/collections/${collection.id}/${slugify(collection.name[locale])}`}>
+                                            {collection.name[locale]}
                                         </Link>
                                     </Text>
                                 </li>
@@ -93,12 +84,8 @@ class CollectionTreeMenu extends React.Component {
                             <div className="collection-tree-menu__drawer-block">
                                 <TreeMenu links={this.state.openedDrawer.children.map(function (collection) {
                                     return {
-                                        name: intlStore.getMessage(collection.name),
-                                        to: 'collection-slug',
-                                        params: Object.assign({
-                                            collectionId: collection.id,
-                                            collectionSlug: slugify(intlStore.getMessage(collection.name))
-                                        }, routeParams)
+                                        name: collection.name[locale],
+                                        to: `/${locale}/collections/${collection.id}/${slugify(collection.name[locale])}`,
                                     };
                                 })} />
                             </div>
diff --git a/src/components/common/navigation/MainNavigation.js b/../simple-store/src/components/common/navigation/MainNavigation.js
index 27b0a10..aab173a 100644
--- a/src/components/common/navigation/MainNavigation.js
+++ b/../simple-store/src/components/common/navigation/MainNavigation.js
@@ -2,10 +2,8 @@
  * Imports
  */
 import React from 'react';
-import {Link} from 'react-router';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 /**
  * Component
@@ -13,7 +11,7 @@ import IntlStore from '../../../stores/Application/IntlStore';
 class MainNavigation extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Component Lifecycle ***//
@@ -28,15 +26,6 @@ class MainNavigation extends React.Component {
 
     render() {
 
-        // Base route params
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()};
-        let textClass = undefined;
-        if ('admin'.indexOf(this.props.menutype) != -1) {
-            textClass = `main-navigation__item-regular`;
-        } else {
-            textClass = 'main-navigation__item-admin';
-        }
-
         // Return
         return (
             <div className="main-navigation">
@@ -44,8 +33,8 @@ class MainNavigation extends React.Component {
                     <ul>
                         {this.props.links.map(function (link, idx) {
                             return (
-                                <li key={idx} className={textClass}>
-                                    <Link to={link.to} params={Object.assign(link.params || {}, routeParams)}>
+                                <li key={idx} className="main-navigation__item">
+                                    <Link to={link.to}>
                                         {link.name}
                                     </Link>
                                 </li>
diff --git a/src/components/common/navigation/MainNavigation.scss b/../simple-store/src/components/common/navigation/MainNavigation.scss
index 0892ef9..3cea755 100644
--- a/src/components/common/navigation/MainNavigation.scss
+++ b/../simple-store/src/components/common/navigation/MainNavigation.scss
@@ -9,49 +9,14 @@
     display: inline;
     margin-left: 20px;
     font-size: 20px;
-    font-weight: 400;
+    font-weight: bold;
     letter-spacing: 1px;
-    text-transform: uppercase;
 
     & > a {
-        color: yellow;
+        color: $color-heading;
         text-decoration: none;
         &:hover {
             color: $color-primary;
         }
     }
 }
-
-.main-navigation__item-admin {
-  display: inline;
-  margin-left: 20px;
-  font-size: 20px;
-  font-weight: 400;
-  letter-spacing: 1px;
-  text-transform: uppercase;
-
-  & > a {
-      color: black;
-      text-decoration: none;
-      &:hover {
-          color: $color-primary;
-      }
-  }
-}
-
-.main-navigation__item-regular {
-  display: inline;
-  margin-left: 20px;
-  font-size: 20px;
-  font-weight: 400;
-  letter-spacing: 1px;
-  text-transform: uppercase;
-
-  & > a {
-      color: yellow;
-      text-decoration: none;
-      &:hover {
-          color: $color-primary;
-      }
-  }
-}
diff --git a/src/components/common/navigation/Pagination.intl.js b/src/components/common/navigation/Pagination.intl.js
deleted file mode 100644
index 7a7ba98..0000000
--- a/src/components/common/navigation/Pagination.intl.js
+++ /dev/null
@@ -1,10 +0,0 @@
-export default {
-    en: {
-        next: 'Next',
-        previous: 'Previous'
-    },
-    es: {
-        next: 'Próxima',
-        previous: 'Anterior'
-    }
-};
diff --git a/src/components/common/navigation/Pagination.js b/../simple-store/src/components/common/navigation/Pagination.js
index eeea046..b68a544 100644
--- a/src/components/common/navigation/Pagination.js
+++ b/../simple-store/src/components/common/navigation/Pagination.js
@@ -2,14 +2,10 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Translation data for this component
-import intlData from './Pagination.intl';
+import queryString from 'query-string';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 /**
  * Component
@@ -17,7 +13,8 @@ import intlData from './Pagination.intl';
 class Pagination extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -35,8 +32,8 @@ class Pagination extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let query = this.props.query || {};
+
+        let query = queryString.parse(this.props.location.search);
         let previousPage = (this.props.currentPage > 1) ? this.props.currentPage-1 : 1;
         let nextPage = (this.props.currentPage < this.props.totalPages) ? this.props.currentPage+1 : this.props.totalPages;
 
@@ -52,8 +49,11 @@ class Pagination extends React.Component {
                 } else {
                     links.push(
                         <li key={i} className="pagination__item">
-                            <Link className="pagination__link" to={this.props.to}
-                                  params={this.props.params} query={Object.assign({page: i+1}, query)}>
+                            <Link className="pagination__link"
+                                  to={{
+                                    pathname: this.props.to,
+                                    search: queryString.stringify(Object.assign({}, query, {page: i+1}))
+                                  }}>
                                 {i+1}
                             </Link>
                         </li>
@@ -70,20 +70,22 @@ class Pagination extends React.Component {
             <div className="pagination">
                 <ul>
                     <li className="pagination__item">
-                        <Link className="pagination__link" to={this.props.to}
-                            params={this.props.params} query={Object.assign({page: previousPage}, query)}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'previous')}
-                                locales={intlStore.getCurrentLocale()} />
+                        <Link className="pagination__link"
+                              to={{
+                                pathname: this.props.to,
+                                search: queryString.stringify(Object.assign({}, query, {page: previousPage}))
+                              }}>
+                            <FormattedMessage id="previous"/>
                         </Link>
                     </li>
                     {pageLinks()}
                     <li className="pagination__item">
-                        <Link className="pagination__link" to={this.props.to}
-                              params={this.props.params} query={Object.assign({page: nextPage}, query)}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'next')}
-                                locales={intlStore.getCurrentLocale()} />
+                        <Link className="pagination__link"
+                              to={{
+                                pathname: this.props.to,
+                                search: queryString.stringify(Object.assign({}, query, {page: nextPage}))
+                              }}>
+                            <FormattedMessage id="next" />
                         </Link>
                     </li>
                 </ul>
diff --git a/src/components/common/navigation/SideMenu.intl.js b/src/components/common/navigation/SideMenu.intl.js
deleted file mode 100644
index 9693826..0000000
--- a/src/components/common/navigation/SideMenu.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        hi: 'Hi',
-        login: 'Login',
-        logout: 'Logout',
-        homepage: 'Homepage',
-        myAccount: 'My Account',
-        register: 'Register'
-    },
-    es: {
-        hi: 'Hola',
-        login: 'Login',
-        logout: 'Logout',
-        homepage: 'Página Principal',
-        myAccount: 'Mi cuenta',
-        register: 'Registrarse'
-    }
-};
diff --git a/src/components/common/navigation/SideMenu.js b/../simple-store/src/components/common/navigation/SideMenu.js
index ee4df93..b30d549 100644
--- a/src/components/common/navigation/SideMenu.js
+++ b/../simple-store/src/components/common/navigation/SideMenu.js
@@ -3,29 +3,26 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
-import IntlStore from '../../../stores/Application/IntlStore';
-
 import triggerDrawer from '../../../actions/Application/triggerDrawer';
 
 // Required Components
 import Text from '../typography/Text';
 
-// Translation data for this component
-import intlData from './SideMenu.intl';
-
 /**
  * Component
  */
 class SideMenu extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -55,18 +52,14 @@ class SideMenu extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()};
         return (
             <div className="side-menu">
                 <nav>
                     <ul className="side-menu__homepage">
                         <li className="side-menu__item side-menu__collection-item" onClick={this.handleItemClick}>
-                            <Link to='homepage' params={routeParams}>
+                            <Link to={`/${this.context.intl.locale}`}>
                                 <Text size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'homepage')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="homepage" />
                                 </Text>
                             </Link>
                         </li>
@@ -75,7 +68,7 @@ class SideMenu extends React.Component {
                         {this.props.collections && this.props.collections.map((obj, idx) => {
                             return (
                                 <li key={idx} className="side-menu__item side-menu__collection-item" onClick={this.handleItemClick}>
-                                    <Link to={obj.to} params={Object.assign(obj.params || {}, routeParams)}>
+                                    <Link to={obj.to}>
                                         <Text size="medium">{obj.name}</Text>
                                     </Link>
                                 </li>
@@ -85,29 +78,23 @@ class SideMenu extends React.Component {
                     {this.state.user ?
                         <ul className="side-menu__account">
                             <li className="side-menu__item side-menu__account-item" onClick={this.handleItemClick}>
-                                <Link to='account' params={routeParams}>
+                                <Link to={`/${this.context.intl.locale}/account`}>
                                     <div>
                                         <Text size="small">
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'hi')}
-                                                locales={intlStore.getCurrentLocale()} />, {this.state.user.name.split(' ')[0]}
+                                            <FormattedMessage id="hi" />, {this.state.user.name.split(' ')[0]}
                                         </Text>
                                     </div>
                                     <div>
                                         <Text size="small" weight="bold">
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'myAccount')}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="myAccount" />
                                         </Text>
                                     </div>
                                 </Link>
                             </li>
                             <li className="side-menu__item side-menu__account-item" onClick={this.handleItemClick}>
-                                <Link to='logout' params={routeParams}>
+                                <Link to={`/${this.context.intl.locale}/logout`} >
                                     <Text size="small" weight="bold">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'logout')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="logoutButton" />
                                     </Text>
                                 </Link>
                             </li>
@@ -115,20 +102,16 @@ class SideMenu extends React.Component {
                         :
                         <ul className="side-menu__account">
                             <li className="side-menu__item side-menu__account-item" onClick={this.handleItemClick}>
-                                <Link to='login' params={routeParams}>
+                                <Link to={`/${this.context.intl.locale}/login`}>
                                     <Text size="small" weight="bold">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'login')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="loginHeader" />
                                     </Text>
                                 </Link>
                             </li>
                             <li className="side-menu__item side-menu__account-item" onClick={this.handleItemClick}>
-                                <Link to='register' params={routeParams}>
+                                <Link to={`/${this.context.intl.locale}/register`}>
                                     <Text size="small" weight="bold">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'register')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="registerHeader" />
                                     </Text>
                                 </Link>
                             </li>
diff --git a/src/components/common/navigation/TreeMenu.js b/../simple-store/src/components/common/navigation/TreeMenu.js
index 611cf9c..750e78b 100644
--- a/src/components/common/navigation/TreeMenu.js
+++ b/../simple-store/src/components/common/navigation/TreeMenu.js
@@ -2,12 +2,13 @@
  * Imports
  */
 import React from 'react';
+import queryString from 'query-string';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 import ResponsiveStore from '../../../stores/Application/ResponsiveStore';
 
 // Required Components
@@ -15,7 +16,7 @@ import Heading from '../typography/Heading';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -23,7 +24,8 @@ let debug = require('debug')('tienda765');
 class TreeMenu extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -72,7 +74,7 @@ class TreeMenu extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
 
         // Process title class
         let titleClass = 'tree-menu__title';
@@ -119,9 +121,7 @@ class TreeMenu extends React.Component {
                                 <div className={getItemClass(child)}>
                                     <Text size="small">
                                         <span className="tree-menu__link">
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(child.name)}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            {child.name[locale]}
                                         </span>
                                     </Text>
                                 </div>
@@ -144,8 +144,11 @@ class TreeMenu extends React.Component {
                     return (
                         <li key={idx} className={itemClass}>
                             <Link className="tree-menu__link"
-                                  to={link.to} params={link.params} query={link.query}>
-                                <Text size="small">{link.name}</Text>
+                                  to={{
+                                    pathname: link.to,
+                                    search: queryString.stringify(link.query)
+                                  }}>
+                                <Text size="small">{link.name[locale]}</Text>
                             </Link>
                         </li>
                     );
@@ -157,9 +160,7 @@ class TreeMenu extends React.Component {
                             <div className={getItemClass(item)}>
                                 <Text size="small">
                                     <span className="tree-menu__link">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(item.name)}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        {item.name[locale]}
                                     </span>
                                 </Text>
                             </div>
diff --git a/src/components/common/notifications/PopTopNotification.js b/../simple-store/src/components/common/notifications/PopTopNotification.js
index 58d8b99..6bc6e1c 100644
--- a/src/components/common/notifications/PopTopNotification.js
+++ b/../simple-store/src/components/common/notifications/PopTopNotification.js
@@ -7,7 +7,7 @@ import React from 'react';
 import Text from '../typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
diff --git a/src/components/common/orders/OrderDetails.intl.js b/src/components/common/orders/OrderDetails.intl.js
deleted file mode 100644
index 31b18fd..0000000
--- a/src/components/common/orders/OrderDetails.intl.js
+++ /dev/null
@@ -1,52 +0,0 @@
-export default {
-    en: {
-        billingDetails: 'Billing Information',
-        createdAt: 'Created at',
-        customer: 'Customer',
-        id: 'ID',
-        nameHeading: 'Name',
-        paymentMethod: 'Payment Method',
-        priceHeading: 'Price',
-        products: 'Products',
-        quantityHeading: 'Qty.',
-        shipping: 'Shipping',
-        shippingCost: 'Shipping Cost',
-        shippingSchedule: 'Date of Shipping',
-        shippingDetails: 'Shipping Information',
-        shippingMethod: 'Shipping Method',
-        skuHeading: 'SKU',
-        status: 'Status',
-        subTotal: 'Sub-total',
-        total: 'Total',
-        vat: 'VAT',
-        pagetypeHeading: 'Page type',
-        pagenumHeading: 'Page qty.',
-        filesHeading: 'File',
-        anilladoHeading: 'Anillado'
-    },
-    es: {
-        billingDetails: 'Datos de facturacción',
-        createdAt: 'Creada en',
-        customer: 'Cliente',
-        id: 'ID',
-        nameHeading: 'Nombre',
-        paymentMethod: 'Método de Pago',
-        priceHeading: 'Precio',
-        products: 'Productos',
-        quantityHeading: 'Cantidad',
-        shipping: 'Envío',
-        shippingCost: 'Costo de Envío',
-        shippingSchedule: 'Fecha de Envío',
-        shippingDetails: 'Datos de Envío',
-        shippingMethod: 'Forma de Envío',
-        skuHeading: 'SKU',
-        status: 'Estado',
-        subTotal: 'Sub-total',
-        total: 'Total',
-        vat: 'IVA',
-        pagetypeHeading: 'Hoja',
-        pagenumHeading: 'Cant hojas',
-        filesHeading: 'Archivo',
-        anilladoHeading: 'Anillado'
-    }
-};
diff --git a/src/components/common/orders/OrderDetails.js b/../simple-store/src/components/common/orders/OrderDetails.js
index ceb4691..27461b3 100644
--- a/src/components/common/orders/OrderDetails.js
+++ b/../simple-store/src/components/common/orders/OrderDetails.js
@@ -3,11 +3,10 @@
  */
 import React from 'react';
 import moment from 'moment';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Required components
 import AddressPreview from '../forms/AddressPreview';
@@ -18,22 +17,19 @@ import Text from '../typography/Text';
 
 import OrderStatus from './OrderStatus';
 
-// Translation data for this component
-import intlData from './OrderDetails.intl';
-
 /**
  * Component
  */
 class OrderDetails extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
 
     componentDidMount() {
-
         // Component styles
         require('./OrderDetails.scss');
     }
@@ -45,74 +41,36 @@ class OrderDetails extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         // Order products list table
         let headings = [
-            <FormattedMessage message={intlStore.getMessage(intlData, 'nameHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <span>ID</span>,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'skuHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'quantityHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'priceHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'pagetypeHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'pagenumHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'filesHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'anilladoHeading')}
-                              locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="nameHeading" />,
+            <FormattedMessage id="id" />,
+            <FormattedMessage id="skuHeading" />,
+            <FormattedMessage id="quantityHeading" />,
+            <FormattedMessage id="priceHeading" />
         ];
-
         let rows = this.props.order.checkout.cart.products.map((product) => {
-          if (product.details.copies && product.details.tags.indexOf('fotocopias') !== -1) {
             return {
                 data: [
                     <Text size="medium">
-                        <FormattedMessage message={intlStore.getMessage(product.details.name)}
-                                          locales={intlStore.getCurrentLocale()} />
+                        {product.details.name[locale]}
                     </Text>,
                     <span className="order-details__link">
-                        <Link to="product" params={Object.assign({productId: product.id}, routeParams)}>
+                        <Link to={`/${locale}/products/${product.id}`}>
                             <Text size="small">{product.id}</Text>
                         </Link>
                     </span>,
                     <Text size="medium">{product.details.sku}</Text>,
                     <Text size="medium">{product.quantity}</Text>,
-                    <FormattedNumber value={product.details.pricing.retail}
-                                     style="currency"
-                                     currency={this.props.order.checkout.currency} />,
-                    <Text size="medium">{product.details.copies.pagetype}</Text>,
-                    <Text size="medium">{product.details.copies.pagesnum}</Text>,
-                    <Text size="medium">{product.details.copies.files}</Text>,
-                    <Text size="medium">{product.details.copies.anillado.toString()}</Text>
-                ]
-            };
-          } else {
-            return {
-                data: [
                     <Text size="medium">
-                        <FormattedMessage message={intlStore.getMessage(product.details.name)}
-                                          locales={intlStore.getCurrentLocale()} />
-                    </Text>,
-                    <span className="order-details__link">
-                        <Link to="product" params={Object.assign({productId: product.id}, routeParams)}>
-                            <Text size="small">{product.id}</Text>
-                        </Link>
-                    </span>,
-                    <Text size="medium">{product.details.sku}</Text>,
-                    <Text size="medium">{product.quantity}</Text>,
-                    <FormattedNumber value={product.details.pricing.retail}
+                        <FormattedNumber value={product.details.pricing.retail}
                                      style="currency"
                                      currency={this.props.order.checkout.currency} />
+                    </Text>
                 ]
             };
-          }
         });
 
         //
@@ -125,8 +83,7 @@ class OrderDetails extends React.Component {
                         <div className="order-details__overview-item">
                             <div className="order-details__overview-item-label">
                                 <Text size="medium" weight="bold">
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'customer')}
-                                                      locales={intlStore.getCurrentLocale()} />:
+                                    <FormattedMessage id="customer" />:
                                 </Text>
                             </div>
                             <div className="order-details__overview-item-value">
@@ -148,8 +105,7 @@ class OrderDetails extends React.Component {
                     <div className="order-details__overview-item">
                         <div className="order-details__overview-item-label">
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'createdAt')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="createdAt" />:
                             </Text>
                         </div>
                         <div className="order-details__overview-item-value">
@@ -161,8 +117,7 @@ class OrderDetails extends React.Component {
                     <div className="order-details__overview-item">
                         <div className="order-details__overview-item-label">
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'id')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="id" />:
                             </Text>
                         </div>
                         <div className="order-details__overview-item-value">
@@ -174,8 +129,7 @@ class OrderDetails extends React.Component {
                     <div className="order-details__overview-item">
                         <div className="order-details__overview-item-label">
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'status')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="status" />:
                             </Text>
                         </div>
                         <div className="order-details__overview-item-value">
@@ -185,8 +139,7 @@ class OrderDetails extends React.Component {
                 </div>
                 <div className="order-details__detail">
                     <Heading size="medium">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'billingDetails')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="billingDetails" />
                     </Heading>
                     <div className="order-details__detail-content">
                         <div>
@@ -194,19 +147,16 @@ class OrderDetails extends React.Component {
                         </div>
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'paymentMethod')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="paymentMethod" />:
                             </Text>
                             <br />
                             <Text size="medium">{this.props.order.checkout.paymentMethod}</Text>
                         </div>
                     </div>
-
                 </div>
                 <div className="order-details__detail">
                     <Heading size="medium">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'shippingDetails')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="shippingDetails" />
                     </Heading>
                     <div className="order-details__detail-content">
                         <div>
@@ -214,16 +164,14 @@ class OrderDetails extends React.Component {
                         </div>
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'shippingMethod')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="shippingMethod" />:
                             </Text>
                             <br />
                             <Text size="medium">{this.props.order.checkout.shippingMethod}</Text>
                             <br />
                             <br />
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'shippingCost')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="shippingCost" />:
                             </Text>
                             <br />
                             <Text size="medium">
@@ -231,24 +179,12 @@ class OrderDetails extends React.Component {
                                                  style="currency"
                                                  currency={this.props.order.checkout.currency} />
                             </Text>
-                            <br />
-                            <br />
-                            <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'shippingSchedule')}
-                                                  locales={intlStore.getCurrentLocale()} />:
-                            </Text>
-                            <br />
-                            <Text size="medium">
-                                <Text size="medium">{this.props.order.checkout.shippingDay} </Text>
-                                <Text size="medium">{this.props.order.checkout.shippingTime}</Text>
-                            </Text>
                         </div>
                     </div>
                 </div>
                 <div className="order-details__detail">
                     <Heading size="medium">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'products')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="products" />
                     </Heading>
                     <div className="order-details__detail-content">
                         <Breakpoint point="handhelds">
@@ -275,8 +211,7 @@ class OrderDetails extends React.Component {
                     <div className="order-details__detail-content order-details__detail-content--column">
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'subTotal')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="subTotal" />:
                             </Text>
                             <br />
                             <FormattedNumber value={this.props.order.checkout.subTotal}
@@ -285,8 +220,7 @@ class OrderDetails extends React.Component {
                         </div>
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'shipping')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="shipping" />:
                             </Text>
                             <br />
                             <FormattedNumber value={this.props.order.checkout.shippingCost}
@@ -295,8 +229,7 @@ class OrderDetails extends React.Component {
                         </div>
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'vat')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="vat" />:
                             </Text>
                             <br />
                             <FormattedNumber value={this.props.order.checkout.vatTotal}
@@ -305,8 +238,7 @@ class OrderDetails extends React.Component {
                         </div>
                         <div>
                             <Text size="medium" weight="bold">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'total')}
-                                                  locales={intlStore.getCurrentLocale()} />:
+                                <FormattedMessage id="total" />:
                             </Text>
                             <br />
                             <FormattedNumber value={this.props.order.checkout.total}
diff --git a/src/components/common/orders/OrderStatus.intl.js b/src/components/common/orders/OrderStatus.intl.js
deleted file mode 100644
index 191055a..0000000
--- a/src/components/common/orders/OrderStatus.intl.js
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-    en: {
-        created: 'Created',
-        pendingPayment: 'Pending Payment',
-        paymentError: 'Payment Error',
-        paid: 'Paid',
-        canceled: 'Canceled',
-        processing: 'Processing',
-        ready: 'Ready',
-        shipped: 'Shipped'
-    },
-    es: {
-        created: 'Creada',
-        pendingPayment: 'Pago pendiente',
-        paymentError: 'Error de pago',
-        paid: 'Pagado',
-        canceled: 'Cancelado',
-        processing: 'En Proceso',
-        ready: 'Listo',
-        shipped: 'Enviado'
-    }
-}
diff --git a/src/components/common/orders/OrderStatus.js b/../simple-store/src/components/common/orders/OrderStatus.js
index 4276207..a8976e6 100644
--- a/src/components/common/orders/OrderStatus.js
+++ b/../simple-store/src/components/common/orders/OrderStatus.js
@@ -2,31 +2,27 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage } from 'react-intl';
+import PropTypes from 'prop-types';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 
 // Required components
 import Label from '../indicators/Label';
 import StatusIndicator from '../indicators/StatusIndicator';
 
-// Translation data for this component
-import intlData from './OrderStatus.intl';
-
 /**
  * Component
  */
 class OrderStatus extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
     };
 
     //*** Template ***//
 
     render() {
-        
+
         //
         // Component configurable props
         //
@@ -63,12 +59,7 @@ class OrderStatus extends React.Component {
             default:
                 break;
         }
-        
-        //
-        // Helper methods & variables
-        //
-        let intlStore = this.context.getStore(IntlStore);
-        
+
         //
         // Return
         //
@@ -76,8 +67,7 @@ class OrderStatus extends React.Component {
             <div className="order-status">
                 {this.props.label !== false ?
                     <Label type={labelType} size={labelSize} weight={labelWeight}>
-                        <FormattedMessage message={intlStore.getMessage(intlData, this.props.status)}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id={`status_${this.props.status}`} />
                     </Label>
                     :
                     <StatusIndicator status={labelType} />
diff --git a/src/components/common/orders/OrderSummary.intl.js b/src/components/common/orders/OrderSummary.intl.js
deleted file mode 100644
index e10d1eb..0000000
--- a/src/components/common/orders/OrderSummary.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        name: 'Product',
-        quantityAndPrice: 'Qty / Price',
-        shipping: 'Shipping',
-        subTotal: 'Sub-total',
-        anillado: 'Anillado',
-        total: 'Total'
-    },
-    es: {
-        name: 'Producto',
-        anillado: 'Anillado',
-        quantityAndPrice: 'Cantidad / Precio',
-        shipping: 'Envío',
-        subTotal: 'Sub-total',
-        total: 'Total'
-    }
-};
diff --git a/src/components/common/orders/OrderSummary.js b/../simple-store/src/components/common/orders/OrderSummary.js
index 3701189..90953ac 100644
--- a/src/components/common/orders/OrderSummary.js
+++ b/../simple-store/src/components/common/orders/OrderSummary.js
@@ -2,17 +2,13 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Breakpoint from '../../core/Breakpoint';
 import Text from '../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './OrderSummary.intl';
 
 /**
  * Component
@@ -20,7 +16,8 @@ import intlData from './OrderSummary.intl';
 class OrderSummary extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -34,191 +31,75 @@ class OrderSummary extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Process Subtotal
-        let subTotal = {value: 0, currency: undefined};
-        let total = {value: 0, currency: undefined};
-        let anilladoProduct = false;
-        if (this.props.checkout.cart && this.props.checkout.cart.products.length > 0) {
-            this.props.checkout.cart.products.forEach(function (product) {
-                if (!subTotal.currency) {
-                    subTotal.currency = product.details.pricing.currency;
-                }
-
-                if (product.details.copies && product.details.tags.indexOf('fotocopias') !== -1) {
-                  if (product.details.copies.anillado) {
-                    subTotal.value += product.details.copies.price * product.quantity;
-                    subTotal.value += 35;
-                    anilladoProduct = true;
-                  } else if (product.details.copies) {
-                    subTotal.value += product.details.copies.price * product.quantity;
-                  }
-                } else {
-                  subTotal.value += product.details.pricing.retail * product.quantity;
-                }
-            });
-        }
 
-        let anilladoDiv = () => {
-            if (anilladoProduct) {
-                return (
-                  <div key={5} className="order-summary__row order-summary__item">
-                       <div className="order-summary__list-name">
-                           <Breakpoint point="handhelds">
-                               <Text size="small">
-                                   {intlStore.getMessage(intlData, 'anillado')}
-                               </Text>
-                           </Breakpoint>
-                           <Breakpoint point="medium-screens">
-                               <Text>
-                                   {intlStore.getMessage(intlData, 'anillado')}
-                               </Text>
-                           </Breakpoint>
-                           <Breakpoint point="wide-screens">
-                               <Text>
-                                   {intlStore.getMessage(intlData, 'anillado')}
-                               </Text>
-                           </Breakpoint>
-                       </div>
-                       <div className="order-summary__list-quantity-price">
-                           <Text>{1}</Text>
-                           &nbsp;x&nbsp;
-                           <Text>
-                               <FormattedNumber
-                                   value={35}
-                                   style="currency"
-                                   currency="ARS" />
-                           </Text>
-                       </div>
-                       <div className="order-summary__list-total">
-                           <Text>
-                               <FormattedNumber
-                                   value={35}
-                                   style="currency"
-                                   currency="ARS" />
-                           </Text>
-                       </div>
-                  </div>
-                );
-            }
-        };
+        //
+        // Helper methods & variables
+        //
+        let locale = this.context.intl.locale;
 
+        //
+        // Return
+        //
         return (
             <div className="order-summary">
                 <div className="order-summary__list">
                     <div className="order-summary__row order-summary__item-labels">
                         <div className="order-summary__list-name">
                             <Text size="small">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'name')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="orderSummaryName" />
                             </Text>
                         </div>
                         <div className="order-summary__list-quantity-price">
                             <Text size="small">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'quantityAndPrice')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="quantityAndPrice" />
                             </Text>
                         </div>
                         <div className="order-summary__list-total">
                             <Text size="small">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'total')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="total" />
                             </Text>
                         </div>
                     </div>
                     {this.props.checkout.cart.products.map(function (product, idx) {
                         return (
-                              <div>
-                              { product.details.copies.price ?
-                                  <div>
-                                       <div key={idx} className="order-summary__row order-summary__item">
-                                            <div className="order-summary__list-name">
-                                                <Breakpoint point="handhelds">
-                                                    <Text size="small">
-                                                        {intlStore.getMessage(product.details.name)}
-                                                    </Text>
-                                                </Breakpoint>
-                                                <Breakpoint point="medium-screens">
-                                                    <Text>
-                                                        {intlStore.getMessage(product.details.name)}
-                                                    </Text>
-                                                </Breakpoint>
-                                                <Breakpoint point="wide-screens">
-                                                    <Text>
-                                                        {intlStore.getMessage(product.details.name)}
-                                                    </Text>
-                                                </Breakpoint>
-                                            </div>
-                                            <div className="order-summary__list-quantity-price">
-                                                <Text>
-                                                    {product.quantity}
-                                                </Text>
-                                                &nbsp;x&nbsp;
-                                                <Text>
-                                                    <FormattedNumber
-                                                        value={product.details.copies.price}
-                                                        style="currency"
-                                                        currency={product.details.pricing.currency} />
-                                                </Text>
-                                            </div>
-                                            <div className="order-summary__list-total">
-                                                <Text>
-                                                    <FormattedNumber
-                                                        value={product.quantity * product.details.copies.price}
-                                                        style="currency"
-                                                        currency={product.details.pricing.currency} />
-                                                </Text>
-                                            </div>
-                                        </div>
-                                        {anilladoDiv()}
-                                    </div>
-                                    :
-                                    <div>
-                                      <div key={idx} className="order-summary__row order-summary__item">
-                                        <div className="order-summary__list-name">
-                                            <Breakpoint point="handhelds">
-                                                <Text size="small">
-                                                    {intlStore.getMessage(product.details.name)}
-                                                </Text>
-                                            </Breakpoint>
-                                            <Breakpoint point="medium-screens">
-                                                <Text>
-                                                    {intlStore.getMessage(product.details.name)}
-                                                </Text>
-                                            </Breakpoint>
-                                            <Breakpoint point="wide-screens">
-                                                <Text>
-                                                    {intlStore.getMessage(product.details.name)}
-                                                </Text>
-                                            </Breakpoint>
-                                        </div>
-                                        <div className="order-summary__list-quantity-price">
-                                            <Text>
-                                                {product.quantity}
-                                            </Text>
-                                            &nbsp;x&nbsp;
-                                            <Text>
-                                                <FormattedNumber
-                                                    value={product.details.pricing.retail}
-                                                    style="currency"
-                                                    currency={product.details.pricing.currency} />
-                                            </Text>
-                                        </div>
-                                        <div className="order-summary__list-total">
-                                            <Text>
-                                                <FormattedNumber
-                                                    value={product.quantity * product.details.pricing.retail}
-                                                    style="currency"
-                                                    currency={product.details.pricing.currency} />
-                                            </Text>
-                                        </div>
-                                      </div>
-                                    </div>
-                                }
+                            <div key={idx} className="order-summary__row order-summary__item">
+                                <div className="order-summary__list-name">
+                                    <Breakpoint point="handhelds">
+                                        <Text size="small">
+                                            {product.details.name[locale]}
+                                        </Text>
+                                    </Breakpoint>
+                                    <Breakpoint point="medium-screens">
+                                        <Text>
+                                            {product.details.name[locale]}
+                                        </Text>
+                                    </Breakpoint>
+                                    <Breakpoint point="wide-screens">
+                                        <Text>
+                                            {product.details.name[locale]}
+                                        </Text>
+                                    </Breakpoint>
+                                </div>
+                                <div className="order-summary__list-quantity-price">
+                                    <Text>
+                                        {product.quantity}
+                                    </Text>
+                                    &nbsp;x&nbsp;
+                                    <Text>
+                                        <FormattedNumber
+                                            value={product.details.pricing.retail}
+                                            style="currency"
+                                            currency={product.details.pricing.currency} />
+                                    </Text>
+                                </div>
+                                <div className="order-summary__list-total">
+                                    <Text>
+                                        <FormattedNumber
+                                            value={product.quantity * product.details.pricing.retail}
+                                            style="currency"
+                                            currency={product.details.pricing.currency} />
+                                    </Text>
+                                </div>
                             </div>
                         );
                     })}
@@ -228,26 +109,22 @@ class OrderSummary extends React.Component {
                     <div className="order-summary__row">
                         <div className="order-summary__totals-label">
                             <Text>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'subTotal')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="subTotal" />
                             </Text>
                         </div>
                         <div className="order-summary__totals-value">
                             <Text>
                                 <FormattedNumber
-                                    value={subTotal.value}
+                                    value={this.props.checkout.subTotal}
                                     style="currency"
-                                    currency={subTotal.currency} />
+                                    currency={this.props.checkout.currency} />
                             </Text>
                         </div>
                     </div>
                     <div className="order-summary__row">
                         <div className="order-summary__totals-label">
                             <Text>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'shipping')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="shipping" />
                             </Text>
                         </div>
                         <div className="order-summary__totals-value">
@@ -266,27 +143,16 @@ class OrderSummary extends React.Component {
                     <div className="order-summary__row">
                         <div className="order-summary__totals-label">
                             <Text weight="bold">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'total')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="total" />
                             </Text>
                         </div>
                         <div className="order-summary__totals-value">
-                            {this.props.checkout.hasOwnProperty('shippingCost') ?
                             <Text weight="bold">
                                 <FormattedNumber
-                                    value={subTotal.value + this.props.checkout.shippingCost}
+                                    value={this.props.checkout.total}
                                     style="currency"
                                     currency={this.props.checkout.currency} />
                             </Text>
-                                :
-                                <Text weight="bold">
-                                    <FormattedNumber
-                                        value={subTotal.value}
-                                        style="currency"
-                                        currency={this.props.checkout.currency} />
-                                </Text>
-                            }
                         </div>
                     </div>
                 </div>
diff --git a/src/components/common/orders/OrderSummary.scss b/../simple-store/src/components/common/orders/OrderSummary.scss
index 52857a6..fd609ac 100644
--- a/src/components/common/orders/OrderSummary.scss
+++ b/../simple-store/src/components/common/orders/OrderSummary.scss
@@ -61,10 +61,6 @@
     display: flex;
     justify-content: flex-end;
     width: 100%;
-
-    @include breakpoint(handhelds) {
-        justify-content: flex-start;
-    }
 }
 
 .order-summary__totals-value {
diff --git a/src/components/common/products/.DS_Store b/src/components/common/products/.DS_Store
deleted file mode 100644
index 1243cde..0000000
Binary files a/src/components/common/products/.DS_Store and /dev/null differ
diff --git a/src/components/common/products/ProductList.intl.js b/src/components/common/products/ProductList.intl.js
deleted file mode 100644
index e3ab245..0000000
--- a/src/components/common/products/ProductList.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        noResults: 'Your selection did not match any results'
-    },
-    es: {
-        noResults: 'Su busqueda no encontró productos asociados'
-    }
-};
diff --git a/src/components/common/products/ProductList.js b/../simple-store/src/components/common/products/ProductList.js
index 8c2a363..b61ef04 100644
--- a/src/components/common/products/ProductList.js
+++ b/../simple-store/src/components/common/products/ProductList.js
@@ -2,26 +2,17 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Heading from '../typography/Heading';
 import Pagination from '../navigation/Pagination';
 import ProductListItem from './ProductListItem';
-import ProductListItemCajonGrande from './ProductListItemCajonGrande';
-import ProductListItemCajonMediano from './ProductListItemCajonMediano';
-import ProductListItemCajonChico from './ProductListItemCajonChico';
 import Text from '../typography/Text';
 import TreeMenu from '../navigation/TreeMenu';
-import { Link} from 'react-router';
-
-// Translation data for this component
-import intlData from './ProductList.intl';
 
 /**
  * Component
@@ -29,7 +20,8 @@ import intlData from './ProductList.intl';
 class ProductList extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -44,48 +36,12 @@ class ProductList extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
-        let cajonChicoProduct, cajonMedianoProduct, cajonGrandeProduct;
-        let hasDescription = () => {
-            return this.props.collection && this.props.collection.description && this.props.collection.description[intlStore.getCurrentLocale()];
-        };
-        let isCajonCollection = false;
-
-        if (this.props.collection) {
-          isCajonCollection = this.props.collection.name.es == 'Cajon de F&V' ? true : false;
-        }
+        let locale = this.context.intl.locale;
 
-        let bannerDiv = () => {
-          if (this.props.collection) {
-            if (this.props.collection.name.es == 'Cajon de F&V') {
-              isCajonCollection = true;
-              return (
-                <div className="verduras-banner-container"></div>
-              );
-            } else {
-               if (this.props.collection.name.en == 'Library') {
-                return (
-                  <Link to="/es/products/d0d496b3-ffaa-4334-98a0-cb5079a5ba1d/pedido-de-impresion-blanco-y-negro/" params={this.props.routeParams}>
-                    <div className="impresiones-banner-container"></div>
-                  </Link>
-                );
-              }
-            }
-          }
+        let hasDescription = () => {
+            return this.props.collection && this.props.collection.description && this.props.collection.description[locale];
         };
 
-        if (this.props.products.length > 0) {
-          this.props.products.map(function (item) {
-            if (item.name.es == 'Cajón Chico') {
-              cajonChicoProduct = item;
-            } if (item.name.es == 'Cajón Mediano') {
-              cajonMedianoProduct = item;
-            } if (item.name.es == 'Cajón Grande') {
-              cajonGrandeProduct = item;
-            }
-          })
-        }
-
         return (
             <div className="product-list">
                 {this.props.filters ?
@@ -93,13 +49,8 @@ class ProductList extends React.Component {
                         {this.props.filters.map((item, idx) => {
                             let links = item.collections.map((col) => {
                                 return {
-                                    name: intlStore.getMessage(col.name),
-                                    to: 'collection-slug',
-                                    params: {
-                                        locale: intlStore.getCurrentLocale(),
-                                        collectionId: col.id,
-                                        collectionSlug: slugify(intlStore.getMessage(col.name))
-                                    },
+                                    name: col.name,
+                                    to: `/${locale}/collections/${col.id}/${slugify(col.name)}`,
                                     selected: this.props.collection ? col.id === this.props.collection.id : false
                                 };
                             });
@@ -107,9 +58,7 @@ class ProductList extends React.Component {
                                 return (
                                     <div key={idx} className="product-list__filter">
                                         <TreeMenu links={links}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(item.name)}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            {item.name[locale]}
                                         </TreeMenu>
                                     </div>
                                 );
@@ -119,149 +68,59 @@ class ProductList extends React.Component {
                     :
                     null
                 }
-                {isCajonCollection ?
-                    <div className="product-list-cajon">
-                      <div className="product-list__container">
-                          <div>
-                            {bannerDiv()}
-                          </div>
-                          <div className="product-list__collection-description">
-                              <Text weight="bold" size="medium" >
-                                  IMPORTANTE: Envío gratis adentro de las 4 avenidas principales. Fuera de las 4 avenidas $10. Para ver las zonas de envio haga click <a href="https://goo.gl/fGVXkq" target="_blank"><Text weight="bold" color="red" size="medium" >aquí</Text></a>.
-                              </Text>
-                          </div>
-                          {this.props.children ?
-                              <div className="product-list__content">
-                                  {this.props.children}
-                              </div>
-                              :
-                              null
-                          }
-                          <div className="product-list__items">
-                            {cajonChicoProduct ?
-                                <div className="product-list__product-item-cajon-chico">
-                                    <ProductListItemCajonChico product={cajonChicoProduct} />
-                                </div>
-                                :
-                                null
-                            }
-                            {cajonMedianoProduct ?
-                                <div className="product-list__product-item-cajon-mediano">
-                                    <ProductListItemCajonMediano product={cajonMedianoProduct} />
-                                </div>
-                                :
-                                null
-                            }
-                            {cajonGrandeProduct ?
-                                <div className="product-list__product-item-cajon-grande">
-                                    <ProductListItemCajonGrande product={cajonGrandeProduct} />
-                                </div>
-                                :
-                                null
-                            }
-                          </div>
-                          {this.props.totalPages && this.props.currentPage && this.props.routeParams && this.props.totalPages > 1 ?
-                              <div className="product-list__pagination">
-                                  <Pagination to={this.props.paginateTo || 'collection'}
-                                              params={this.props.routeParams}
-                                              totalPages={this.props.totalPages}
-                                              currentPage={this.props.currentPage} />
-                              </div>
-                              :
-                              null
-                          }
-                      </div>
-                      <div className="product-list__container">
-                          <div className="product-list__collection-description">
-                              <Text weight="bold" size="medium" >
-                                  ↓ Personalizá tu cajón agregandole lo que necesites aquí debajo ↓
-                              </Text>
-                          </div>
-                          <div className="product-list__items">
-                              {this.props.products.length > 0 ?
-                                  this.props.products.map(function (item, idx) {
-                                    if (item.tags.includes('verduras')) {
-                                      return (
-                                          <div key={idx} className="product-list__product-item">
-                                              <ProductListItem product={item} />
-                                          </div>
-                                      );
-                                    }
-                                  })
-                                  :
-                                  <div className="product-list__no-results">
-                                      <Text size="medium">
-                                          <FormattedMessage
-                                              message={intlStore.getMessage(intlData, 'noResults')}
-                                              locales={intlStore.getCurrentLocale()} /> :(
-                                      </Text>
-                                  </div>
-                              }
-                          </div>
-                          {this.props.totalPages && this.props.currentPage && this.props.routeParams && this.props.totalPages > 1 ?
-                              <div className="product-list__pagination">
-                                  <Pagination to={this.props.paginateTo || 'collection'}
-                                              params={this.props.routeParams}
-                                              totalPages={this.props.totalPages}
-                                              currentPage={this.props.currentPage} />
-                              </div>
-                              :
-                              null
-                          }
-                      </div>
-                    </div>
-                    :
-                    <div className="product-list__container">
-                        <div>
-                          {bannerDiv()}
+
+                <div className="product-list__container">
+                    {this.props.title ?
+                        <div className="product-list__title">
+                            <Heading size="medium">{this.props.title}</Heading>
                         </div>
-                        {hasDescription() ?
-                            <div className="product-list__collection-description">
-                                <Text size="small">
-                                    {intlStore.getMessage(this.props.collection.description)}
-                                </Text>
-                            </div>
-                            :
-                            null
-                        }
-                        {this.props.children ?
-                            <div className="product-list__content">
-                                {this.props.children}
-                            </div>
-                            :
-                            null
-                        }
-                        <div className="product-list__items">
-                            {this.props.products.length > 0 ?
-                                this.props.products.map(function (item, idx) {
-                                  return (
-                                      <div key={idx} className="product-list__product-item">
-                                          <ProductListItem product={item} />
-                                      </div>
-                                  );
-                                })
-                                :
-                                <div className="product-list__no-results">
-                                    <Text size="medium">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'noResults')}
-                                            locales={intlStore.getCurrentLocale()} /> :(
-                                    </Text>
-                                </div>
-                            }
+                        :
+                        null
+                    }
+                    {hasDescription() ?
+                        <div className="product-list__collection-description">
+                            <Text size="small">
+                                {this.props.collection.description[locale]}
+                            </Text>
                         </div>
-                        {this.props.totalPages && this.props.currentPage && this.props.routeParams && this.props.totalPages > 1 ?
-                            <div className="product-list__pagination">
-                                <Pagination to={this.props.paginateTo || 'collection'}
-                                            params={this.props.routeParams}
-                                            totalPages={this.props.totalPages}
-                                            currentPage={this.props.currentPage} />
-                            </div>
+                        :
+                        null
+                    }
+                    {this.props.children ?
+                        <div className="product-list__content">
+                            {this.props.children}
+                        </div>
+                        :
+                        null
+                    }
+                    <div className="product-list__items">
+                        {this.props.products.length > 0 ?
+                            this.props.products.map(function (item, idx) {
+                                return (
+                                    <div key={idx} className="product-list__product-item">
+                                        <ProductListItem product={item} />
+                                    </div>
+                                );
+                            })
                             :
-                            null
+                            <div className="product-list__no-results">
+                                <Text size="medium">
+                                    <FormattedMessage id="noResults" /> :(
+                                </Text>
+                            </div>
                         }
                     </div>
-                }
+                    {this.props.totalPages && this.props.currentPage && this.props.totalPages > 1 ?
+                        <div className="product-list__pagination">
+                            <Pagination to={this.props.paginateTo || `/${locale}/collections/${this.props.collection.id}`}
+                                        location={this.props.location}
+                                        totalPages={this.props.totalPages}
+                                        currentPage={this.props.currentPage} />
+                        </div>
+                        :
+                        null
+                    }
+                </div>
             </div>
         );
     }
diff --git a/src/components/common/products/ProductList.scss b/../simple-store/src/components/common/products/ProductList.scss
index ec0e150..2cffdd9 100644
--- a/src/components/common/products/ProductList.scss
+++ b/../simple-store/src/components/common/products/ProductList.scss
@@ -8,38 +8,6 @@
     }
 }
 
-.product-list-cajon {
-  display: flex;
-  flex-direction: column;
-}
-
-.verduras-banner-container {
-  width: 100%;
-  height: 240px;
-  cursor: pointer;
-  background: url('./cajon-banner.png');
-  background-repeat: no-repeat;
-  background-size: 100%;
-  @include breakpoint(handhelds) {
-      height: 82px;
-  }
-}
-
-.impresiones-banner-container {
-  width: 100%;
-  height: 240px;
-  cursor: pointer;
-  background: url('./fotocopias-banner.png');
-  background-repeat: no-repeat;
-  background-size: 100%;
-  @include breakpoint(handhelds) {
-      height: 40px;
-  }
-  @include breakpoint(medium-screens) {
-      height: 100px;
-  }
-}
-
 // Sidebar
 
 .product-list__sidebar {
@@ -80,23 +48,12 @@
 .product-list__title {
     width: 100%;
     text-align: center;
-    background-color: #eee;
-    padding: 10px 0  10px 0;
-    border: solid 3px black;
-}
-
-.product-list__banner-container {
-    width: 100%;
-    text-align: center;
-    background-color: #eee;
-    padding: 10px 0  10px 0;
 }
 
 .product-list__collection-description {
     margin-top: 15px;
     background-color: $color-secondary;
     padding: 20px;
-    text-align: center;
 }
 
 .product-list__items {
@@ -111,32 +68,7 @@
     width: 220px;
     padding: 8px;
     @include breakpoint(handhelds) {
-        width: 40%;
-    }
-}
-
-.product-list__product-item-cajon-chico {
-    flex: 0 1 auto;
-    width: 33%;
-    padding: 8px;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-.product-list__product-item-cajon-mediano {
-    flex: 0 1 auto;
-    width: 33%;
-    padding: 8px;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-.product-list__product-item-cajon-grande {
-    flex: 0 1 auto;
-    width: 33%;
-    padding: 8px;
-    @include breakpoint(handhelds) {
-        width: 100%;
+        width: 50%;
     }
 }
 
diff --git a/src/components/common/products/ProductListItem.js b/../simple-store/src/components/common/products/ProductListItem.js
index a97254c..81ff8eb 100644
--- a/src/components/common/products/ProductListItem.js
+++ b/../simple-store/src/components/common/products/ProductListItem.js
@@ -2,22 +2,17 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
-import connectToStores from 'fluxible-addons-react/connectToStores';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
+
 import {slugify} from '../../../utils/strings';
 
 // Flux
-import CartStore from '../../../stores/Cart/CartStore';
-import addToCart from '../../../actions/Cart/addToCart';
 import IntlStore from '../../../stores/Application/IntlStore';
-import intlData from '../../pages/Products/ProductPage.intl';
-import triggerDrawer from '../../../actions/Application/triggerDrawer';
 
 // Required components
 import Text from '../typography/Text';
-import QuantitySelector from '../../common/forms/QuantitySelector';
-import Button from '../../common/buttons/Button';
 
 /**
  * Component
@@ -25,18 +20,14 @@ import Button from '../../common/buttons/Button';
 class ProductListItem extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        executeAction: React.PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
 
     state = {
-        productPlaceholderImage: undefined,
-        quantity:1,
-        cartLoading: this.context.getStore(CartStore).isLoading(),
-        cartProducts: this.context.getStore(CartStore).getProducts(),
-        addingToCart: false,
+        productPlaceholderImage: undefined
     };
 
     //*** Component Lifecycle ***//
@@ -52,129 +43,68 @@ class ProductListItem extends React.Component {
         });
     }
 
-    componentWillReceiveProps(nextProps) {
-        // Check for cart changes when we flagged that we were adding to cart
-        if (this.state.addingToCart && this.state.cartLoading && !nextProps._cartLoading) {
-            this.setState({
-                addingToCart: false,
-                quantity: 1
-            });
-            this.context.executeAction(triggerDrawer, 'cart');
-        }
-
-        this.setState({
-            cartLoading: nextProps._cartLoading,
-            cartProducts: nextProps._cartProducts
-        });
-    }
-
-    getQuantityInCart = () => {
-        let quantity = 0;
-        if (this.props._product) {
-            this.state._cartProducts.filter((product) => {
-                return product.id === this.props._product.id;
-            }).forEach(function (product) {
-                quantity += product.quantity;
-            });
-        }
-        return quantity;
-    };
-
-    handleAddToCartClick = () => {
-        let payload = Object.assign({details: this.props.product}, {
-            id: this.props.product.id,
-            quantity: this.getQuantityInCart() + this.state.quantity
-        });
-        this.setState({addingToCart: true});
-        this.context.executeAction(addToCart, payload);
-      }
-
-    handleQuantityChange = (value) => {
-        this.setState({quantity: value});
-    };
+    //*** Template ***//
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        //
+        // Helper methods & variables
+        //
+        let locale = this.context.intl.locale;
 
+        //
+        // Return
+        //
         return (
-            <div className="product-list-item" itemScope itemType="http://schema.org/Product">
-                <div className="product-list-item__name" itemProp="name">
-                    <Text size="medium" weight="bold">
-                        <FormattedMessage
-                            message={intlStore.getMessage(this.props.product.name)}
-                            locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <span style={{display: 'none'}} itemProp="sku">{this.props.product.sku}</span>
-                </div>
-                <div>
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <span className="product-list-item__image" itemProp="image">
-                            {`//${this.props.product.images[0].url}`}
-                        </span>
-                        :
-                        null
-                    }
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <img className="product-list-item__image-2" src={`//${this.props.product.images[0].url}`} />
-                        :
-                        <img className="product-list-item__image-2" src={this.state.productPlaceholderImage} />
-                    }
-                </div>
-                {this.props.product.pricing ?
-                    <div className="product-list-item__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
-                        <div style={{display: 'none'}} itemProp="price">
-                            {this.props.product.pricing.retail}
-                        </div>
-                        <div style={{display: 'none'}} itemProp="priceCurrency">
-                            {this.props.product.pricing.currency}
-                        </div>
-                        <div>
-                            <Text size="medium" weight="bold">
-                                $ <FormattedNumber value={this.props.product.pricing.retail} />
-                            </Text>
-                        </div>
-                    </div>
-                    :
-                    null
-                }
-                <div className="product-page__quantity">
-                    <Text size="medium" weight="bold">
-                       <FormattedMessage message={intlStore.getMessage(intlData, 'quantity')}
-                                      locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <QuantitySelector value={this.state.quantity}
-                                      onChange={this.handleQuantityChange} />
-                </div>
-                <div className="product-page__add">
-                    <div className="product-page__add-buttons">
-                        {this.props.product.stock > 0 ?
-                            <Button type="primary"
-                                    onClick={this.handleAddToCartClick}
-                                    disabled={this.props.quantity <= 0 || this.state.cartLoading}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'addToCart')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
+            <div className="product-list-item" itemScope itemType="http://schema.org/Product" itemRef='brand-schema'>
+                <Link to={`/${locale}/products/${this.props.product.id}/${slugify(this.props.product.name[locale])}`}>
+                    <div className="product-list-item__image">
+                        {this.props.product.images && this.props.product.images.length > 0 ?
+                            <span style={{display: 'none'}} itemProp="image">
+                                {`//${this.props.product.images[0].url}`}
+                            </span>
                             :
-                            <Button type="primary" disabled={true}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'outOfStock')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
+                            null
+                        }
+                        {this.props.product.images && this.props.product.images.length > 0 ?
+                            <img src={`//${this.props.product.images[0].url}`} />
+                            :
+                            <img src={this.state.productPlaceholderImage} />
                         }
                     </div>
-                </div>
+                    <div className="product-list-item__name" itemProp="name">
+                        <Text size="small">
+                            {this.props.product.name[locale]}
+                        </Text>
+                        <span style={{display: 'none'}} itemProp="sku">{this.props.product.sku}</span>
+                    </div>
+                    {this.props.product.pricing ?
+                        <div className="product-list-item__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
+                            <div style={{display: 'none'}} itemProp="price">
+                                {this.props.product.pricing.retail}
+                            </div>
+                            <div style={{display: 'none'}} itemProp="priceCurrency">
+                                {this.props.product.pricing.currency}
+                            </div>
+                            <div>
+                                <Text size="medium" weight="bold">
+                                    <FormattedNumber
+                                        value={this.props.product.pricing.retail}
+                                        style="currency"
+                                        currency={this.props.product.pricing.currency} />
+                                </Text>
+                            </div>
+                        </div>
+                        :
+                        null
+                    }
+                </Link>
             </div>
         );
     }
 }
 
-ProductListItem = connectToStores(ProductListItem, [CartStore], (context) => {
-    return {
-        _cartLoading: context.getStore(CartStore).isLoading(),
-        _cartProducts: context.getStore(CartStore).getProducts()
-    };
-});
-
+/**
+ * Exports
+ */
 export default ProductListItem;
diff --git a/src/components/common/products/ProductListItem.scss b/../simple-store/src/components/common/products/ProductListItem.scss
index 291368f..806750c 100644
--- a/src/components/common/products/ProductListItem.scss
+++ b/../simple-store/src/components/common/products/ProductListItem.scss
@@ -3,7 +3,6 @@
 .product-list-item {
     padding: 7px;
     text-align: center;
-    max-width: 300px;
 
     & > a {
         text-decoration: none;
@@ -17,64 +16,3 @@
 .product-list-item__price {
     margin-top: 5px;
 }
-
-.product-list-item__image {
-  display: none;
-}
-
-.product-list-item__image-2 {
-  max-height: 190px;
-
-}
-
-.groups-table {
-  flex: 0 1 auto;
-  width: 100%;
-  padding: 8px;
-}
-
-.groups-table__table {
-    width: 100%;
-    border: 1px solid #eeeeee;
-    text-align: left;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-
-.groups-table__row {
-    border-bottom: 1px solid #eeeeee;
-
-
-    &--info {
-        background-color: $background-color-table-info;
-    }
-
-    &--success {
-        background-color: $background-color-table-success;
-    }
-
-    &--warning {
-        background-color: $background-color-table-warning;
-    }
-
-    &--error {
-        background-color: $background-color-table-error;
-    }
-}
-
-.groups-page__description {
-    margin-top: 30px;
-}
-
-.groups-table__heading,
-.groups-table__data {
-    vertical-align: middle;
-    padding: 2px;
-}
-
-.groups-table__body > .groups-table__row {
-    &:hover {
-        background-color: #F9F9F9;
-    }
-}
diff --git a/src/components/common/products/ProductListItemCajonChico.js b/src/components/common/products/ProductListItemCajonChico.js
deleted file mode 100644
index bf86080..0000000
--- a/src/components/common/products/ProductListItemCajonChico.js
+++ /dev/null
@@ -1,509 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
-import connectToStores from 'fluxible-addons-react/connectToStores';
-import {slugify} from '../../../utils/strings';
-
-// Flux
-import CartStore from '../../../stores/Cart/CartStore';
-import IntlStore from '../../../stores/Application/IntlStore';
-import intlData from '../../pages/Products/ProductPage.intl';
-import GroupChicoAddStore from '../../../stores/GroupChico/GroupChicoAddStore';
-import GroupChicoDetailsStore from '../../../stores/GroupChico/GroupChicoDetailsStore';
-import AccountStore from '../../../stores/Account/AccountStore';
-
-// actions
-import addGroupChico from '../../../actions/GroupChico/addGroupChico';
-import fetchGroupChico from '../../../actions/GroupChico/fetchGroupChico';
-import updateGroupChico from '../../../actions/GroupChico/updateGroupChico';
-import triggerDrawer from '../../../actions/Application/triggerDrawer';
-import addToCart from '../../../actions/Cart/addToCart';
-
-// Required components
-import Text from '../typography/Text';
-import QuantitySelector from '../../common/forms/QuantitySelector';
-import Button from '../../common/buttons/Button';
-import Modal from '../../common/modals/Modal';
-import GroupAddForm from '../groups/GroupAddForm';
-
-/**
- * Component
- */
-class ProductListItemCajonChico extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        executeAction: React.PropTypes.func.isRequired,
-    };
-
-    state = {
-        productPlaceholderImage: undefined,
-        quantity:1,
-        cartLoading: this.context.getStore(CartStore).isLoading(),
-        cartProducts: this.context.getStore(CartStore).getProducts(),
-        addingToCart: false,
-        addGroupChico: this.context.getStore(GroupChicoAddStore).getState(),
-        group: this.context.getStore(GroupChicoDetailsStore).getGroup(),
-        user: this.context.getStore(AccountStore).getAccountDetails(),
-        buyers: [],
-        registerModal: false,
-        showNewGroupModal: false,
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./ProductListItemCajonChico.scss');
-
-        // Load static files
-        this.setState({
-            productPlaceholderImage: require('../images/image_placeholder.png')
-        });
-        this.context.executeAction(fetchGroupChico, "666fe91f-ef6a-420e-b669-9535da0c6246");
-    }
-
-    componentWillReceiveProps(nextProps) {
-        // Check for cart changes when we flagged that we were adding to cart
-        if (this.state.addingToCart && this.state.cartLoading && !nextProps._cartLoading) {
-            this.setState({
-                addingToCart: false,
-                quantity: 1
-            });
-            this.context.executeAction(triggerDrawer, 'cart');
-        }
-
-        this.setState({
-            cartLoading: nextProps._cartLoading,
-            cartProducts: nextProps._cartProducts,
-            addGroupChico: nextProps._addGroupChico,
-            group: nextProps._group,
-            user: nextProps._user,
-            buyers: [],
-            registerModal: false,
-            showNewGroupModal: false,
-        });
-    }
-
-    getQuantityInCart = () => {
-        let quantity = 0;
-        if (this.props._product) {
-            this.props._cartProducts.filter((product) => {
-                return product.id === this.props._product.id;
-            }).forEach(function (product) {
-                quantity += product.quantity;
-            });
-        }
-        return quantity;
-    };
-
-    handleAddToCartClick = () => {
-        let payload = Object.assign({details: this.props.product}, {
-            id: this.props.product.id,
-            quantity: this.getQuantityInCart() + this.state.quantity
-        });
-        this.setState({addingToCart: true});
-        this.context.executeAction(addToCart, payload);
-      }
-
-    handleQuantityChange = (value) => {
-        this.setState({quantity: value});
-    };
-
-    handleGetOutGroupClick = () => {
-       let index = this.state.group.buyers.indexOf(this.state.user.email);
-       if (index >= 0) {
-         let groupDuplicateWithoutBuyer = this.state.group;
-         groupDuplicateWithoutBuyer.buyers.splice( index, 1 );
-         this.context.executeAction(updateGroupChico, {
-             id: groupDuplicateWithoutBuyer.id,
-             data: {
-                 name: groupDuplicateWithoutBuyer.name,
-                 tags: groupDuplicateWithoutBuyer.tags,
-                 buyers: groupDuplicateWithoutBuyer.buyers
-             }
-         });
-         this.forceUpdate();
-       }
-   };
-
-   handleGetInGroupClick = () => {
-     let group;
-
-     if (this.state.group && this.state.user.email) {
-       group =  this.state.group;
-       group.buyers.push(this.state.user.email);
-     }
-
-     this.context.executeAction(updateGroupChico, {
-         id: group.id,
-         data: {
-             name: group.name,
-             tags: group.tags,
-             buyers: group.buyers
-         }
-     });
-
-     let payload = Object.assign({details: this.props.product}, {
-         id: this.props.product.id,
-         quantity: this.getQuantityInCart() + this.state.quantity
-     });
-     this.setState({addingToCart: true});
-     this.context.executeAction(addToCart, payload);
-     };
-
-     handleNewGroupClick = () => {
-      this.setState({showNewGroupModal: true});
-      };
-
-      handleNewGroupCloseClick = () => {
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleShowThanksModalCloseClick = () => {
-          this.setState({showThanksModal: false});
-      };
-
-      handleNewGroupSubmitClick = (data) => {
-          this.context.executeAction(addGroupChico, data);
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleRegisterBottom = () => {
-          this.setState({registerModal: true});
-      };
-
-      handleRegiserModalCloseClick = () => {
-          this.setState({registerModal: false});
-      };
-
-      render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let isLogged = this.context.getStore(AccountStore).getAccountDetails();
-        let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
-        let routeParams = {locale: intlStore.getCurrentLocale()};
-
-        let newGroupModal = () => {
-          if (this.state.showNewGroupModal) {
-              return (
-                  <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
-                         onCloseClick={this.handleNewGroupCloseClick}>
-                      <GroupAddForm
-                          onCancelClick={this.handleNewGroupCloseClick}
-                          onSubmitClick={this.handleNewGroupSubmitClick} />
-                  </Modal>
-              );
-          }
-        };
-
-        let thanksModal = () => {
-            if (this.state.showThanksModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'anotadoModalTitle')}
-                            onCloseClick={this.handleShowThanksModalCloseClick}>
-                           <div className="chico-groups-register-modal-container">
-                             <FormattedMessage
-                                 message={intlStore.getMessage(intlData, 'thanksModalText')}
-                                 locales={intlStore.getCurrentLocale()} />
-                              <div className="chico-groups-bottoms-container">
-                                 <div className="chico-groups__register-button">
-                                   <Link to="checkout" params={routeParams}>
-                                     <Button type="primary">
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'checkout')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                   </Link>
-                                 </div>
-                                 <div className="chico-groups__keep-buying-button">
-                                     <Button type="primary" onClick={this.handleShowThanksModalCloseClick}>
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'continueShopping')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                 </div>
-                              </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let registerModal = () => {
-            if (this.state.registerModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'registerModalTitle')}
-                           onCloseClick={this.handleRegiserModalCloseClick}>
-                           <div className="chico-groups-register-modal-container">
-                             <div className="chico-product-page__suscribe-button">
-                               <Link to="login" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'login')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="chico-product-page__suscribe-button">
-                               <Link to="register" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'register')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="chico-product-page__suscribe-button">
-                               <Button type="default" onClick={this.handleRegiserModalCloseClick}>
-                                   <FormattedMessage
-                                       message={intlStore.getMessage(intlData, 'cancel')}
-                                       locales={intlStore.getCurrentLocale()} />
-                               </Button>
-                             </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let productDescription = () => {
-            return (
-               <div className="chico-groups-page__description">
-                   <div className="chico-groups-table">
-                       <table className="chico-groups-table__table">
-                           <thead>
-                               <tr className="chico-groups-table__row">
-                                 <th className="chico-groups-table__heading">
-                                     <Text weight="bold" size="medium">Productos</Text>
-                                 </th>
-                                 <th className="chico-groups-table__heading">
-                                     <Text weight="bold" size="medium">Cantidad</Text>
-                                 </th>
-                               </tr>
-                           </thead>
-                           <tbody className="chico-groups-table__body">
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Tomate Perita</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Zanahoria</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Cebolla</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Papa</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Zapallo Brasilero</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Limones</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">1 unidades</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Huevos</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">3 unidades</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Morrón Verde o Rojo</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">200 o 100 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Banana</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Manzana</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">400 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Zapallito Verde</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">400 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Cebollita de V.</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">1 atado</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Naranja</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">500 grs.</Text></td>
-                             </tr>
-                             <tr className="chico-groups-table__row">
-                               <td className="chico-groups-table__data"><Text size="medium">Tapas Pamp tarta</Text></td>
-                               <td className="chico-groups-table__data"><Text size="medium">2 uni.</Text></td>
-                             </tr>
-                           </tbody>
-                       </table>
-                   </div>
-               </div>
-             );
-        }
-
-        return (
-            <div className="chico-product-list-item" itemScope itemType="http://schema.org/Product">
-             {registerModal()}
-             {thanksModal()}
-                 { isAdmin ?
-                     <div className="chico-groups__toolbar">
-                     {newGroupModal()}
-                         <div className="chico-groups__add-button">
-                             <Button type="primary" onClick={this.handleNewGroupClick}>
-                                 <FormattedMessage
-                                     message={intlStore.getMessage(intlData, 'new')}
-                                     locales={intlStore.getCurrentLocale()} />
-                             </Button>
-                         </div>
-                     </div>
-                     :
-                     null
-                 }
-                <div className="chico-product-list-item__name" itemProp="name">
-                    <Text size="large" weight="bold">
-                        <FormattedMessage
-                            message={intlStore.getMessage(this.props.product.name)}
-                            locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <span style={{display: 'none'}} itemProp="sku">{this.props.product.sku}</span>
-                </div>
-                <div className="chico-product-list-item__image">
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <span style={{display: 'none'}} itemProp="image">
-                            {`//${this.props.product.images[0].url}`}
-                        </span>
-                        :
-                        null
-                    }
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <img src={`//${this.props.product.images[0].url}`} />
-                        :
-                        <img src={this.state.productPlaceholderImage} />
-                    }
-                </div>
-                <div className="chico-product-list-item__name" itemProp="description">
-                    {productDescription()}
-                </div>
-                {this.props.product.pricing ?
-                    <div className="chico-product-list-item__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
-                        <div style={{display: 'none'}} itemProp="price">
-                            {this.props.product.pricing.retail}
-                        </div>
-                        <div style={{display: 'none'}} itemProp="priceCurrency">
-                            {this.props.product.pricing.currency}
-                        </div>
-                        <div>
-                            <Text size="medium" weight="bold">
-                                $ <FormattedNumber value={this.props.product.pricing.retail} />
-                            </Text>
-                        </div>
-                    </div>
-                    :
-                    null
-                }
-                <div className="chico-product-page__quantity">
-                    <Text size="medium" weight="bold">
-                       <FormattedMessage message={intlStore.getMessage(intlData, 'quantity')}
-                                      locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <QuantitySelector value={this.state.quantity}
-                                      onChange={this.handleQuantityChange} />
-                </div>
-
-                { isLogged ?
-                    <div className="chico-product-page__add">
-                        <div className="chico-product-page__add-buttons">
-                            {this.props.product.stock > 0 ?
-                                <div>
-                                  <div className="chico-product-page__add-button">
-                                    <Button type="primary"
-                                            onClick={this.handleAddToCartClick}
-                                            disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'addToCart')}
-                                            locales={intlStore.getCurrentLocale()} />
-                                    </Button>
-                                  </div>
-                                  { this.state.group && this.state.group.buyers.indexOf(this.state.user.email) !== -1 ?
-                                      <div className="chico-product-page__desuscribe-button">
-                                        <Button type="primary" onClick={this.handleGetOutGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'desuscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                    :
-                                      <div className="chico-product-page__suscribe-button">
-                                        <Button type="primary" onClick={this.handleGetInGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'suscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                     }
-                                 </div>
-                                :
-                                <Button type="primary" disabled={true}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'outOfStock')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                            }
-                        </div>
-                    </div>
-                :
-                <div className="chico-product-page__add">
-                    <div className="chico-product-page__add-buttons">
-                        {this.props.product.stock > 0 ?
-                            <div>
-                              <div className="chico-product-page__add-button">
-                                <Button type="primary"
-                                        onClick={this.handleAddToCartClick}
-                                        disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'addToCart')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                              </div>
-                              <div className="chico-product-page__suscribe-button">
-                                  <Button type="primary" onClick={this.handleRegisterBottom}>
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'suscribirse')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Button>
-                              </div>
-                             </div>
-                            :
-                            <Button type="primary" disabled={true}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'outOfStock')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
-                        }
-                      </div>
-                  </div>
-                  }
-            </div>
-        );
-    }
-}
-
-ProductListItemCajonChico = connectToStores(ProductListItemCajonChico, [CartStore, AccountStore, GroupChicoDetailsStore, GroupChicoAddStore], (context) => {
-    return {
-        _cartLoading: context.getStore(CartStore).isLoading(),
-        _cartProducts: context.getStore(CartStore).getProducts(),
-        _user: context.getStore(AccountStore).getAccountDetails(),
-        _group: context.getStore(GroupChicoDetailsStore).getGroup(),
-        _addGroupChico: context.getStore(GroupChicoAddStore).getState(),
-    };
-});
-
-export default ProductListItemCajonChico;
diff --git a/src/components/common/products/ProductListItemCajonChico.scss b/src/components/common/products/ProductListItemCajonChico.scss
deleted file mode 100644
index 43e5bfc..0000000
--- a/src/components/common/products/ProductListItemCajonChico.scss
+++ /dev/null
@@ -1,87 +0,0 @@
-@import '../../../styles/variables.scss';
-
-.chico-product-list-item {
-    padding: 7px;
-    text-align: center;
-    max-width: 300px;
-
-    & > a {
-        text-decoration: none;
-    }
-}
-
-.chico-product-list-item__name {
-    margin-top: 5px;
-}
-
-.chico-product-list-item__price {
-    margin-top: 5px;
-}
-
-.chico-product-list-item__image {
-
-}
-
-.chico-groups-table {
-  flex: 0 1 auto;
-  width: 100%;
-  padding: 8px;
-}
-
-.chico-groups-table__table {
-    width: 100%;
-    border: 1px solid #eeeeee;
-    text-align: left;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-
-.chico-groups-table__row {
-    border-bottom: 1px solid #eeeeee;
-
-
-    &--info {
-        background-color: $background-color-table-info;
-    }
-
-    &--success {
-        background-color: $background-color-table-success;
-    }
-
-    &--warning {
-        background-color: $background-color-table-warning;
-    }
-
-    &--error {
-        background-color: $background-color-table-error;
-    }
-}
-
-.chico-groups-page__description {
-    margin-top: 30px;
-}
-
-.chico-groups-table__heading,
-.chico-groups-table__data {
-    vertical-align: middle;
-    padding: 2px;
-}
-
-.chico-product-page__suscribe-button {
-  margin-top: 5px;
-}
-
-.chico-product-page__desuscribe-button {
-  margin-top: 5px;
-}
-
-.chico-product-page__add-button {
-  margin-top: 5px;
-}
-
-.chico-groups-table__body > .chico-groups-table__row {
-    &:hover {
-        background-color: #F9F9F9;
-    }
-}
diff --git a/src/components/common/products/ProductListItemCajonGrande.js b/src/components/common/products/ProductListItemCajonGrande.js
deleted file mode 100644
index 12342c8..0000000
--- a/src/components/common/products/ProductListItemCajonGrande.js
+++ /dev/null
@@ -1,509 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
-import connectToStores from 'fluxible-addons-react/connectToStores';
-import {slugify} from '../../../utils/strings';
-
-// Flux
-import CartStore from '../../../stores/Cart/CartStore';
-import IntlStore from '../../../stores/Application/IntlStore';
-import intlData from '../../pages/Products/ProductPage.intl';
-import GroupGrandeAddStore from '../../../stores/GroupGrande/GroupGrandeAddStore';
-import GroupGrandeDetailsStore from '../../../stores/GroupGrande/GroupGrandeDetailsStore';
-import AccountStore from '../../../stores/Account/AccountStore';
-
-// actions
-import addGroupGrande from '../../../actions/GroupGrande/addGroupGrande';
-import fetchGroupGrande from '../../../actions/GroupGrande/fetchGroupGrande';
-import updateGroupGrande from '../../../actions/GroupGrande/updateGroupGrande';
-import triggerDrawer from '../../../actions/Application/triggerDrawer';
-import addToCart from '../../../actions/Cart/addToCart';
-
-// Required components
-import Text from '../typography/Text';
-import QuantitySelector from '../../common/forms/QuantitySelector';
-import Button from '../../common/buttons/Button';
-import Modal from '../../common/modals/Modal';
-import GroupAddForm from '../groups/GroupAddForm';
-
-/**
- * Component
- */
-class ProductListItemCajonGrande extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        executeAction: React.PropTypes.func.isRequired,
-    };
-
-    state = {
-        productPlaceholderImage: undefined,
-        quantity:1,
-        cartLoading: this.context.getStore(CartStore).isLoading(),
-        cartProducts: this.context.getStore(CartStore).getProducts(),
-        addingToCart: false,
-        addGroupGrande: this.context.getStore(GroupGrandeAddStore).getState(),
-        group: this.context.getStore(GroupGrandeDetailsStore).getGroup(),
-        user: this.context.getStore(AccountStore).getAccountDetails(),
-        buyers: [],
-        registerModal: false,
-        showNewGroupModal: false,
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./ProductListItemCajonGrande.scss');
-
-        // Load static files
-        this.setState({
-            productPlaceholderImage: require('../images/image_placeholder.png')
-        });
-       this.context.executeAction(fetchGroupGrande, "f6c3e113-a99e-4d24-82a3-a77b559fcb7e");
-    }
-
-    componentWillReceiveProps(nextProps) {
-        // Check for cart changes when we flagged that we were adding to cart
-        if (this.state.addingToCart && this.state.cartLoading && !nextProps._cartLoading) {
-            this.setState({
-                addingToCart: false,
-                quantity: 1
-            });
-            this.context.executeAction(triggerDrawer, 'cart');
-        }
-
-        this.setState({
-            cartLoading: nextProps._cartLoading,
-            cartProducts: nextProps._cartProducts,
-            addGroupGrande: nextProps._addGroupGrande,
-            group: nextProps._group,
-            user: nextProps._user,
-            buyers: [],
-            registerModal: false,
-            showNewGroupModal: false,
-        });
-    }
-
-    getQuantityInCart = () => {
-        let quantity = 0;
-        if (this.props._product) {
-            this.props._cartProducts.filter((product) => {
-                return product.id === this.props._product.id;
-            }).forEach(function (product) {
-                quantity += product.quantity;
-            });
-        }
-        return quantity;
-    };
-
-    handleAddToCartClick = () => {
-        let payload = Object.assign({details: this.props.product}, {
-            id: this.props.product.id,
-            quantity: this.getQuantityInCart() + this.state.quantity
-        });
-        this.setState({addingToCart: true});
-        this.context.executeAction(addToCart, payload);
-      }
-
-    handleQuantityChange = (value) => {
-        this.setState({quantity: value});
-    };
-
-    handleGetOutGroupClick = () => {
-       let index = this.state.group.buyers.indexOf(this.state.user.email);
-       if (index >= 0) {
-         let groupDuplicateWithoutBuyer = this.state.group;
-         groupDuplicateWithoutBuyer.buyers.splice( index, 1 );
-         this.context.executeAction(updateGroupGrande, {
-             id: groupDuplicateWithoutBuyer.id,
-             data: {
-                 name: groupDuplicateWithoutBuyer.name,
-                 tags: groupDuplicateWithoutBuyer.tags,
-                 buyers: groupDuplicateWithoutBuyer.buyers
-             }
-         });
-         this.forceUpdate();
-       }
-   };
-
-   handleGetInGroupClick = () => {
-     let group;
-
-     if (this.state.group && this.state.user.email) {
-       group =  this.state.group;
-       group.buyers.push(this.state.user.email);
-     }
-
-     this.context.executeAction(updateGroupGrande, {
-         id: group.id,
-         data: {
-             name: group.name,
-             tags: group.tags,
-             buyers: group.buyers
-         }
-     });
-
-     let payload = Object.assign({details: this.props.product}, {
-         id: this.props.product.id,
-         quantity: this.getQuantityInCart() + this.state.quantity
-     });
-     this.setState({addingToCart: true});
-     this.context.executeAction(addToCart, payload);
-     };
-
-     handleNewGroupClick = () => {
-      this.setState({showNewGroupModal: true});
-      };
-
-      handleNewGroupCloseClick = () => {
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleShowThanksModalCloseClick = () => {
-          this.setState({showThanksModal: false});
-      };
-
-      handleNewGroupSubmitClick = (data) => {
-          this.context.executeAction(addGroupGrande, data);
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleRegisterBottom = () => {
-          this.setState({registerModal: true});
-      };
-
-      handleRegiserModalCloseClick = () => {
-          this.setState({registerModal: false});
-      };
-
-      render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let isLogged = this.context.getStore(AccountStore).getAccountDetails();
-        let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
-        let routeParams = {locale: intlStore.getCurrentLocale()};
-
-        let newGroupModal = () => {
-          if (this.state.showNewGroupModal) {
-              return (
-                  <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
-                         onCloseClick={this.handleNewGroupCloseClick}>
-                      <GroupAddForm
-                          onCancelClick={this.handleNewGroupCloseClick}
-                          onSubmitClick={this.handleNewGroupSubmitClick} />
-                  </Modal>
-              );
-          }
-        };
-
-        let thanksModal = () => {
-            if (this.state.showThanksModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'anotadoModalTitle')}
-                            onCloseClick={this.handleShowThanksModalCloseClick}>
-                           <div className="grande-groups-register-modal-container">
-                             <FormattedMessage
-                                 message={intlStore.getMessage(intlData, 'thanksModalText')}
-                                 locales={intlStore.getCurrentLocale()} />
-                              <div className="grande-groups-bottoms-container">
-                                 <div className="grande-groups__register-button">
-                                   <Link to="checkout" params={routeParams}>
-                                     <Button type="primary">
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'checkout')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                   </Link>
-                                 </div>
-                                 <div className="grande-groups__keep-buying-button">
-                                     <Button type="primary" onClick={this.handleShowThanksModalCloseClick}>
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'continueShopping')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                 </div>
-                              </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let registerModal = () => {
-            if (this.state.registerModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'registerModalTitle')}
-                           onCloseClick={this.handleRegiserModalCloseClick}>
-                           <div className="grande-groups-register-modal-container">
-                             <div className="grande-product-page__suscribe-button">
-                               <Link to="login" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'login')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="grande-product-page__suscribe-button">
-                               <Link to="register" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'register')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="grande-product-page__suscribe-button">
-                               <Button type="default" onClick={this.handleRegiserModalCloseClick}>
-                                   <FormattedMessage
-                                       message={intlStore.getMessage(intlData, 'cancel')}
-                                       locales={intlStore.getCurrentLocale()} />
-                               </Button>
-                             </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let productDescription = () => {
-          return (
-             <div className="grande-groups-page__description">
-                 <div className="grande-groups-table">
-                     <table className="grande-groups-table__table">
-                         <thead>
-                             <tr className="grande-groups-table__row">
-                               <th className="grande-groups-table__heading">
-                                   <Text weight="bold" size="medium">Productos</Text>
-                               </th>
-                               <th className="grande-groups-table__heading">
-                                   <Text weight="bold" size="medium">Cantidad</Text>
-                               </th>
-                             </tr>
-                         </thead>
-                         <tbody className="grande-groups-table__body">
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Tomate Perita</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.2 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Zanahoria</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.2 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Cebolla</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.2 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Papa</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.2 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Zapallo Brasilero</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.5 kg</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Limones</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">3 unidades</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Huevos</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">8 unidades</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Morrón Verde o Rojo</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">800 o 400 grs.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Banana</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1,5 kgs.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Manzana</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Zapallito Verde</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Cebollita de V.</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">3 atados</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Naranja</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">1.5 kg.</Text></td>
-                           </tr>
-                           <tr className="grande-groups-table__row">
-                             <td className="grande-groups-table__data"><Text size="medium">Tapas Pamp tarta</Text></td>
-                             <td className="grande-groups-table__data"><Text size="medium">2 uni.</Text></td>
-                           </tr>
-                         </tbody>
-                     </table>
-                 </div>
-             </div>
-           );
-        }
-
-        return (
-            <div className="grande-product-list-item" itemScope itemType="http://schema.org/Product">
-             {registerModal()}
-             {thanksModal()}
-                 { isAdmin ?
-                     <div className="grande-groups__toolbar">
-                     {newGroupModal()}
-                         <div className="grande-groups__add-button">
-                             <Button type="primary" onClick={this.handleNewGroupClick}>
-                                 <FormattedMessage
-                                     message={intlStore.getMessage(intlData, 'new')}
-                                     locales={intlStore.getCurrentLocale()} />
-                             </Button>
-                         </div>
-                     </div>
-                     :
-                     null
-                 }
-                <div className="grande-product-list-item__name" itemProp="name">
-                    <Text size="large" weight="bold">
-                        <FormattedMessage
-                            message={intlStore.getMessage(this.props.product.name)}
-                            locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <span style={{display: 'none'}} itemProp="sku">{this.props.product.sku}</span>
-                </div>
-                <div className="grande-product-list-item__image">
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <span style={{display: 'none'}} itemProp="image">
-                            {`//${this.props.product.images[0].url}`}
-                        </span>
-                        :
-                        null
-                    }
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <img src={`//${this.props.product.images[0].url}`} />
-                        :
-                        <img src={this.state.productPlaceholderImage} />
-                    }
-                </div>
-                <div className="grande-product-list-item__name" itemProp="description">
-                    {productDescription()}
-                </div>
-                {this.props.product.pricing ?
-                    <div className="grande-product-list-item__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
-                        <div style={{display: 'none'}} itemProp="price">
-                            {this.props.product.pricing.retail}
-                        </div>
-                        <div style={{display: 'none'}} itemProp="priceCurrency">
-                            {this.props.product.pricing.currency}
-                        </div>
-                        <div>
-                            <Text size="medium" weight="bold">
-                                $ <FormattedNumber value={this.props.product.pricing.retail} />
-                            </Text>
-                        </div>
-                    </div>
-                    :
-                    null
-                }
-                <div className="grande-product-page__quantity">
-                    <Text size="medium" weight="bold">
-                       <FormattedMessage message={intlStore.getMessage(intlData, 'quantity')}
-                                      locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <QuantitySelector value={this.state.quantity}
-                                      onChange={this.handleQuantityChange} />
-                </div>
-
-                { isLogged ?
-                    <div className="grande-product-page__add">
-                        <div className="grande-product-page__add-buttons">
-                            {this.props.product.stock > 0 ?
-                                <div>
-                                  <div className="grande-product-page__add-button">
-                                    <Button type="primary"
-                                            onClick={this.handleAddToCartClick}
-                                            disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'addToCart')}
-                                            locales={intlStore.getCurrentLocale()} />
-                                    </Button>
-                                  </div>
-                                  { this.state.group && this.state.group.buyers.indexOf(this.state.user.email) !== -1 ?
-                                      <div className="grande-product-page__desuscribe-button">
-                                        <Button type="primary" onClick={this.handleGetOutGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'desuscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                    :
-                                      <div className="grande-product-page__suscribe-button">
-                                        <Button type="primary" onClick={this.handleGetInGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'suscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                     }
-                                 </div>
-                                :
-                                <Button type="primary" disabled={true}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'outOfStock')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                            }
-                        </div>
-                    </div>
-                :
-                <div className="grande-product-page__add">
-                    <div className="grande-product-page__add-buttons">
-                        {this.props.product.stock > 0 ?
-                            <div>
-                              <div className="grande-product-page__add-button">
-                                <Button type="primary"
-                                        onClick={this.handleAddToCartClick}
-                                        disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'addToCart')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                              </div>
-                              <div className="grande-product-page__suscribe-button">
-                                  <Button type="primary" onClick={this.handleRegisterBottom}>
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'suscribirse')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Button>
-                              </div>
-                             </div>
-                            :
-                            <Button type="primary" disabled={true}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'outOfStock')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
-                        }
-                      </div>
-                  </div>
-                  }
-            </div>
-        );
-    }
-}
-
-ProductListItemCajonGrande = connectToStores(ProductListItemCajonGrande, [CartStore, AccountStore, GroupGrandeDetailsStore, GroupGrandeAddStore], (context) => {
-    return {
-        _cartLoading: context.getStore(CartStore).isLoading(),
-        _cartProducts: context.getStore(CartStore).getProducts(),
-        _user: context.getStore(AccountStore).getAccountDetails(),
-        _group: context.getStore(GroupGrandeDetailsStore).getGroup(),
-        _addGroupGrande: context.getStore(GroupGrandeAddStore).getState(),
-    };
-});
-
-export default ProductListItemCajonGrande;
diff --git a/src/components/common/products/ProductListItemCajonGrande.scss b/src/components/common/products/ProductListItemCajonGrande.scss
deleted file mode 100644
index 9b37b50..0000000
--- a/src/components/common/products/ProductListItemCajonGrande.scss
+++ /dev/null
@@ -1,87 +0,0 @@
-@import '../../../styles/variables.scss';
-
-.grande-product-list-item {
-    padding: 7px;
-    text-align: center;
-    max-width: 300px;
-
-    & > a {
-        text-decoration: none;
-    }
-}
-
-.grande-product-list-item__name {
-    margin-top: 5px;
-}
-
-.grande-product-list-item__price {
-    margin-top: 5px;
-}
-
-.grande-product-list-item__image {
-
-}
-
-.grande-groups-table {
-  flex: 0 1 auto;
-  width: 100%;
-  padding: 8px;
-}
-
-.grande-groups-table__table {
-    width: 100%;
-    border: 1px solid #eeeeee;
-    text-align: left;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-
-.grande-groups-table__row {
-    border-bottom: 1px solid #eeeeee;
-
-
-    &--info {
-        background-color: $background-color-table-info;
-    }
-
-    &--success {
-        background-color: $background-color-table-success;
-    }
-
-    &--warning {
-        background-color: $background-color-table-warning;
-    }
-
-    &--error {
-        background-color: $background-color-table-error;
-    }
-}
-
-.grande-groups-page__description {
-    margin-top: 30px;
-}
-
-.grande-groups-table__heading,
-.grande-groups-table__data {
-    vertical-align: middle;
-    padding: 2px;
-}
-
-.grande-product-page__suscribe-button {
-  margin-top: 5px;
-}
-
-.grande-product-page__desuscribe-button {
-  margin-top: 5px;
-}
-
-.grande-product-page__add-button {
-  margin-top: 5px;
-}
-
-.grande-groups-table__body > .grande-groups-table__row {
-    &:hover {
-        background-color: #F9F9F9;
-    }
-}
diff --git a/src/components/common/products/ProductListItemCajonMediano.js b/src/components/common/products/ProductListItemCajonMediano.js
deleted file mode 100644
index 8a5218f..0000000
--- a/src/components/common/products/ProductListItemCajonMediano.js
+++ /dev/null
@@ -1,509 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-import {Link} from 'react-router';
-import connectToStores from 'fluxible-addons-react/connectToStores';
-import {slugify} from '../../../utils/strings';
-
-// Flux
-import CartStore from '../../../stores/Cart/CartStore';
-import IntlStore from '../../../stores/Application/IntlStore';
-import intlData from '../../pages/Products/ProductPage.intl';
-import GroupMedianoAddStore from '../../../stores/GroupMediano/GroupMedianoAddStore';
-import GroupMedianoDetailsStore from '../../../stores/GroupMediano/GroupMedianoDetailsStore';
-import AccountStore from '../../../stores/Account/AccountStore';
-
-// actions
-import addGroupMediano from '../../../actions/GroupMediano/addGroupMediano';
-import fetchGroupMediano from '../../../actions/GroupMediano/fetchGroupMediano';
-import updateGroupMediano from '../../../actions/GroupMediano/updateGroupMediano';
-import triggerDrawer from '../../../actions/Application/triggerDrawer';
-import addToCart from '../../../actions/Cart/addToCart';
-
-// Required components
-import Text from '../typography/Text';
-import QuantitySelector from '../../common/forms/QuantitySelector';
-import Button from '../../common/buttons/Button';
-import Modal from '../../common/modals/Modal';
-import GroupAddForm from '../groups/GroupAddForm';
-
-/**
- * Component
- */
-class ProductListItemCajonMediano extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        executeAction: React.PropTypes.func.isRequired,
-    };
-
-    state = {
-        productPlaceholderImage: undefined,
-        quantity:1,
-        cartLoading: this.context.getStore(CartStore).isLoading(),
-        cartProducts: this.context.getStore(CartStore).getProducts(),
-        addingToCart: false,
-        addGroupMediano: this.context.getStore(GroupMedianoAddStore).getState(),
-        group: this.context.getStore(GroupMedianoDetailsStore).getGroup(),
-        user: this.context.getStore(AccountStore).getAccountDetails(),
-        buyers: [],
-        registerModal: false,
-        showNewGroupModal: false,
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./ProductListItemCajonMediano.scss');
-
-        // Load static files
-        this.setState({
-            productPlaceholderImage: require('../images/image_placeholder.png')
-        });
-        this.context.executeAction(fetchGroupMediano, "c976a147-1136-47b9-b573-090edecb09f7");
-    }
-
-    componentWillReceiveProps(nextProps) {
-        // Check for cart changes when we flagged that we were adding to cart
-        if (this.state.addingToCart && this.state.cartLoading && !nextProps._cartLoading) {
-            this.setState({
-                addingToCart: false,
-                quantity: 1
-            });
-            this.context.executeAction(triggerDrawer, 'cart');
-        }
-
-        this.setState({
-            cartLoading: nextProps._cartLoading,
-            cartProducts: nextProps._cartProducts,
-            addGroupMediano: nextProps._addGroupMediano,
-            group: nextProps._group,
-            user: nextProps._user,
-            buyers: [],
-            registerModal: false,
-            showNewGroupModal: false,
-        });
-    }
-
-    getQuantityInCart = () => {
-        let quantity = 0;
-        if (this.props._product) {
-            this.props._cartProducts.filter((product) => {
-                return product.id === this.props._product.id;
-            }).forEach(function (product) {
-                quantity += product.quantity;
-            });
-        }
-        return quantity;
-    };
-
-    handleAddToCartClick = () => {
-        let payload = Object.assign({details: this.props.product}, {
-            id: this.props.product.id,
-            quantity: this.getQuantityInCart() + this.state.quantity
-        });
-        this.setState({addingToCart: true});
-        this.context.executeAction(addToCart, payload);
-      }
-
-    handleQuantityChange = (value) => {
-        this.setState({quantity: value});
-    };
-
-    handleGetOutGroupClick = () => {
-       let index = this.state.group.buyers.indexOf(this.state.user.email);
-       if (index >= 0) {
-         let groupDuplicateWithoutBuyer = this.state.group;
-         groupDuplicateWithoutBuyer.buyers.splice( index, 1 );
-         this.context.executeAction(updateGroupMediano, {
-             id: groupDuplicateWithoutBuyer.id,
-             data: {
-                 name: groupDuplicateWithoutBuyer.name,
-                 tags: groupDuplicateWithoutBuyer.tags,
-                 buyers: groupDuplicateWithoutBuyer.buyers
-             }
-         });
-         this.forceUpdate();
-       }
-   };
-
-   handleGetInGroupClick = () => {
-     let group;
-
-     if (this.state.group && this.state.user.email) {
-       group =  this.state.group;
-       group.buyers.push(this.state.user.email);
-     }
-
-     this.context.executeAction(updateGroupMediano, {
-         id: group.id,
-         data: {
-             name: group.name,
-             tags: group.tags,
-             buyers: group.buyers
-         }
-     });
-
-     let payload = Object.assign({details: this.props.product}, {
-         id: this.props.product.id,
-         quantity: this.getQuantityInCart() + this.state.quantity
-     });
-     this.setState({addingToCart: true});
-     this.context.executeAction(addToCart, payload);
-     };
-
-     handleNewGroupClick = () => {
-      this.setState({showNewGroupModal: true});
-      };
-
-      handleNewGroupCloseClick = () => {
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleShowThanksModalCloseClick = () => {
-          this.setState({showThanksModal: false});
-      };
-
-      handleNewGroupSubmitClick = (data) => {
-          this.context.executeAction(addGroupMediano, data);
-          this.setState({showNewGroupModal: false});
-      };
-
-      handleRegisterBottom = () => {
-          this.setState({registerModal: true});
-      };
-
-      handleRegiserModalCloseClick = () => {
-          this.setState({registerModal: false});
-      };
-
-      render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let isLogged = this.context.getStore(AccountStore).getAccountDetails();
-        let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
-        let routeParams = {locale: intlStore.getCurrentLocale()};
-
-        let newGroupModal = () => {
-          if (this.state.showNewGroupModal) {
-              return (
-                  <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
-                         onCloseClick={this.handleNewGroupCloseClick}>
-                      <GroupAddForm
-                          onCancelClick={this.handleNewGroupCloseClick}
-                          onSubmitClick={this.handleNewGroupSubmitClick} />
-                  </Modal>
-              );
-          }
-        };
-
-        let thanksModal = () => {
-            if (this.state.showThanksModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'anotadoModalTitle')}
-                            onCloseClick={this.handleShowThanksModalCloseClick}>
-                           <div className="mediano-groups-register-modal-container">
-                             <FormattedMessage
-                                 message={intlStore.getMessage(intlData, 'thanksModalText')}
-                                 locales={intlStore.getCurrentLocale()} />
-                              <div className="mediano-groups-bottoms-container">
-                                 <div className="mediano-groups__register-button">
-                                   <Link to="checkout" params={routeParams}>
-                                     <Button type="primary">
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'checkout')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                   </Link>
-                                 </div>
-                                 <div className="mediano-groups__keep-buying-button">
-                                     <Button type="primary" onClick={this.handleShowThanksModalCloseClick}>
-                                         <FormattedMessage
-                                             message={intlStore.getMessage(intlData, 'continueShopping')}
-                                             locales={intlStore.getCurrentLocale()} />
-                                     </Button>
-                                 </div>
-                              </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let registerModal = () => {
-            if (this.state.registerModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'registerModalTitle')}
-                           onCloseClick={this.handleRegiserModalCloseClick}>
-                           <div className="mediano-groups-register-modal-container">
-                             <div className="mediano-product-page__suscribe-button">
-                               <Link to="login" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'login')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="mediano-product-page__suscribe-button">
-                               <Link to="register" params={routeParams}>
-                                 <Button type="primary">
-                                     <FormattedMessage
-                                         message={intlStore.getMessage(intlData, 'register')}
-                                         locales={intlStore.getCurrentLocale()} />
-                                 </Button>
-                               </Link>
-                             </div>
-                             <div className="mediano-product-page__suscribe-button">
-                               <Button type="default" onClick={this.handleRegiserModalCloseClick}>
-                                   <FormattedMessage
-                                       message={intlStore.getMessage(intlData, 'cancel')}
-                                       locales={intlStore.getCurrentLocale()} />
-                               </Button>
-                             </div>
-                          </div>
-                    </Modal>
-                );
-            }
-        };
-
-        let productDescription = () => {
-          return (
-             <div className="mediano-groups-page__description">
-                 <div className="mediano-groups-table">
-                     <table className="mediano-groups-table__table">
-                         <thead>
-                             <tr className="mediano-groups-table__row">
-                               <th className="mediano-groups-table__heading">
-                                   <Text weight="bold" size="medium">Productos</Text>
-                               </th>
-                               <th className="mediano-groups-table__heading">
-                                   <Text weight="bold" size="medium">Cantidad</Text>
-                               </th>
-                             </tr>
-                         </thead>
-                         <tbody className="mediano-groups-table__body">
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Tomate Perita</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Zanahoria</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Cebolla</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Papa</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Zapallo Brasilero</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Limones</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">2 unidades</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Huevos</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">6 unidades</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Morrón Verde o Rojo</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">400 o 200 grs.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Banana</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 Kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Manzana</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">800 grs.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Zapallito Verde</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">800 grs.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Cebollita de V.</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">2 atados</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Naranja</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">1 kg.</Text></td>
-                           </tr>
-                           <tr className="mediano-groups-table__row">
-                             <td className="mediano-groups-table__data"><Text size="medium">Tapas Pamp tarta</Text></td>
-                             <td className="mediano-groups-table__data"><Text size="medium">2 uni.</Text></td>
-                           </tr>
-                         </tbody>
-                     </table>
-                 </div>
-             </div>
-           );
-        }
-
-        return (
-            <div className="mediano-product-list-item" itemScope itemType="http://schema.org/Product">
-             {registerModal()}
-             {thanksModal()}
-                 { isAdmin ?
-                     <div className="mediano-groups__toolbar">
-                     {newGroupModal()}
-                         <div className="mediano-groups__add-button">
-                             <Button type="primary" onClick={this.handleNewGroupClick}>
-                                 <FormattedMessage
-                                     message={intlStore.getMessage(intlData, 'new')}
-                                     locales={intlStore.getCurrentLocale()} />
-                             </Button>
-                         </div>
-                     </div>
-                     :
-                     null
-                 }
-                <div className="mediano-product-list-item__name" itemProp="name">
-                    <Text size="large" weight="bold">
-                        <FormattedMessage
-                            message={intlStore.getMessage(this.props.product.name)}
-                            locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <span style={{display: 'none'}} itemProp="sku">{this.props.product.sku}</span>
-                </div>
-                <div className="mediano-product-list-item__image">
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <span style={{display: 'none'}} itemProp="image">
-                            {`//${this.props.product.images[0].url}`}
-                        </span>
-                        :
-                        null
-                    }
-                    {this.props.product.images && this.props.product.images.length > 0 ?
-                        <img src={`//${this.props.product.images[0].url}`} />
-                        :
-                        <img src={this.state.productPlaceholderImage} />
-                    }
-                </div>
-                <div className="mediano-product-list-item__name" itemProp="description">
-                    {productDescription()}
-                </div>
-                {this.props.product.pricing ?
-                    <div className="mediano-product-list-item__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
-                        <div style={{display: 'none'}} itemProp="price">
-                            {this.props.product.pricing.retail}
-                        </div>
-                        <div style={{display: 'none'}} itemProp="priceCurrency">
-                            {this.props.product.pricing.currency}
-                        </div>
-                        <div>
-                            <Text size="medium" weight="bold">
-                                $ <FormattedNumber value={this.props.product.pricing.retail} />
-                            </Text>
-                        </div>
-                    </div>
-                    :
-                    null
-                }
-                <div className="mediano-product-page__quantity">
-                    <Text size="medium" weight="bold">
-                       <FormattedMessage message={intlStore.getMessage(intlData, 'quantity')}
-                                      locales={intlStore.getCurrentLocale()} />
-                    </Text>
-                    <QuantitySelector value={this.state.quantity}
-                                      onChange={this.handleQuantityChange} />
-                </div>
-
-                { isLogged ?
-                    <div className="mediano-product-page__add">
-                        <div className="mediano-product-page__add-buttons">
-                            {this.props.product.stock > 0 ?
-                                <div>
-                                  <div className="mediano-product-page__add-button">
-                                    <Button type="primary"
-                                            onClick={this.handleAddToCartClick}
-                                            disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'addToCart')}
-                                            locales={intlStore.getCurrentLocale()} />
-                                    </Button>
-                                  </div>
-                                  { this.state.group && this.state.group.buyers.indexOf(this.state.user.email) !== -1 ?
-                                      <div className="mediano-product-page__desuscribe-button">
-                                        <Button type="primary" onClick={this.handleGetOutGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'desuscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                    :
-                                      <div className="mediano-product-page__suscribe-button">
-                                        <Button type="primary" onClick={this.handleGetInGroupClick.bind()}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'suscribirse')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Button>
-                                      </div>
-                                     }
-                                 </div>
-                                :
-                                <Button type="primary" disabled={true}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'outOfStock')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                            }
-                        </div>
-                    </div>
-                :
-                <div className="mediano-product-page__add">
-                    <div className="mediano-product-page__add-buttons">
-                        {this.props.product.stock > 0 ?
-                            <div>
-                              <div className="mediano-product-page__add-button">
-                                <Button type="primary"
-                                        onClick={this.handleAddToCartClick}
-                                        disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'addToCart')}
-                                        locales={intlStore.getCurrentLocale()} />
-                                </Button>
-                              </div>
-                              <div className="mediano-product-page__suscribe-button">
-                                  <Button type="primary" onClick={this.handleRegisterBottom}>
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'suscribirse')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Button>
-                              </div>
-                             </div>
-                            :
-                            <Button type="primary" disabled={true}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'outOfStock')}
-                                    locales={intlStore.getCurrentLocale()} />
-                            </Button>
-                        }
-                      </div>
-                  </div>
-                  }
-            </div>
-        );
-    }
-}
-
-ProductListItemCajonMediano = connectToStores(ProductListItemCajonMediano, [CartStore, AccountStore, GroupMedianoDetailsStore, GroupMedianoAddStore], (context) => {
-    return {
-        _cartLoading: context.getStore(CartStore).isLoading(),
-        _cartProducts: context.getStore(CartStore).getProducts(),
-        _user: context.getStore(AccountStore).getAccountDetails(),
-        _group: context.getStore(GroupMedianoDetailsStore).getGroup(),
-        _addGroupMediano: context.getStore(GroupMedianoAddStore).getState(),
-    };
-});
-
-export default ProductListItemCajonMediano;
diff --git a/src/components/common/products/ProductListItemCajonMediano.scss b/src/components/common/products/ProductListItemCajonMediano.scss
deleted file mode 100644
index 9cdd01d..0000000
--- a/src/components/common/products/ProductListItemCajonMediano.scss
+++ /dev/null
@@ -1,87 +0,0 @@
-@import '../../../styles/variables.scss';
-
-.mediano-product-list-item {
-    padding: 7px;
-    text-align: center;
-    max-width: 300px;
-
-    & > a {
-        text-decoration: none;
-    }
-}
-
-.mediano-product-list-item__name {
-    margin-top: 5px;
-}
-
-.mediano-product-list-item__price {
-    margin-top: 5px;
-}
-
-.mediano-product-list-item__image {
-
-}
-
-.mediano-groups-table {
-  flex: 0 1 auto;
-  width: 100%;
-  padding: 8px;
-}
-
-.mediano-groups-table__table {
-    width: 100%;
-    border: 1px solid #eeeeee;
-    text-align: left;
-    @include breakpoint(handhelds) {
-        width: 100%;
-    }
-}
-
-.mediano-groups-table__row {
-    border-bottom: 1px solid #eeeeee;
-
-
-    &--info {
-        background-color: $background-color-table-info;
-    }
-
-    &--success {
-        background-color: $background-color-table-success;
-    }
-
-    &--warning {
-        background-color: $background-color-table-warning;
-    }
-
-    &--error {
-        background-color: $background-color-table-error;
-    }
-}
-
-.mediano-groups-page__description {
-    margin-top: 30px;
-}
-
-.mediano-groups-table__heading,
-.mediano-groups-table__data {
-    vertical-align: middle;
-    padding: 2px;
-}
-
-.mediano-product-page__suscribe-button {
-  margin-top: 5px;
-}
-
-.mediano-product-page__desuscribe-button {
-  margin-top: 5px;
-}
-
-.mediano-product-page__add-button {
-  margin-top: 5px;
-}
-
-.mediano-groups-table__body > .mediano-groups-table__row {
-    &:hover {
-        background-color: #F9F9F9;
-    }
-}
diff --git a/src/components/common/products/ProductSuggestions.js b/../simple-store/src/components/common/products/ProductSuggestions.js
index b00f682..446c32e 100644
--- a/src/components/common/products/ProductSuggestions.js
+++ b/../simple-store/src/components/common/products/ProductSuggestions.js
@@ -2,13 +2,12 @@
  * Imports
  */
 import React from 'react';
-import {Link} from 'react-router';
+import { injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
 // Required components
 import Heading from '../typography/Heading';
 import Spinner from '../indicators/Spinner';
@@ -20,7 +19,8 @@ import Text from '../typography/Text';
 class ProductSuggestions extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -49,8 +49,7 @@ class ProductSuggestions extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         //
         // Return
@@ -69,20 +68,16 @@ class ProductSuggestions extends React.Component {
                     :
                     <div className="product-suggestions__list">
                         {this.props.products.map((product, idx) => {
-                            let params = Object.assign({
-                                productId: product.id,
-                                productSlug: slugify(intlStore.getMessage(product.name))
-                            }, routeParams);
                             let image = (product.images && product.images.length > 0) ? `//${product.images[0].url}` : this.state.placeholderImage;
                             return (
                                 <div key={idx} className="product-suggestions__item">
-                                    <Link to="product-slug" params={params}>
+                                    <Link to={`/${locale}/products/${product.id}/${slugify(product.name[locale])}`} >
                                         <div className="product-suggestions__item-image">
                                             <img src={image} />
                                         </div>
                                         <div className="product-suggestions__item-name">
                                             <Text size="small">
-                                                {intlStore.getMessage(product.name)}
+                                                {product.name[locale]}
                                             </Text>
                                         </div>
                                     </Link>
diff --git a/src/components/common/products/ProductsSortingSelect.intl.js b/src/components/common/products/ProductsSortingSelect.intl.js
deleted file mode 100644
index 9b0fd5a..0000000
--- a/src/components/common/products/ProductsSortingSelect.intl.js
+++ /dev/null
@@ -1,24 +0,0 @@
-export default {
-    en: {
-        sortAlphabetically: 'Alphabetically: A-Z',
-        sortAlphabeticallyReverse: 'Alphabetically: Z-A',
-        sortBestSelling: 'Best Selling',
-        sortFeatured: 'Featured',
-        sortLabel: 'Sort by',
-        sortOldest: 'Date: Old to New',
-        sortPrice: 'Price: Low to High',
-        sortPriceReverse: 'Price: High to Low',
-        sortRecent: 'Date: New to Old'
-    },
-    es: {
-        sortAlphabetically: 'Alfabeticamente: A-Z',
-        sortAlphabeticallyReverse: 'Alfabeticamente: Z-A',
-        sortBestSelling: 'Más Vendidos',
-        sortFeatured: 'Destacados',
-        sortLabel: 'Ordenar por',
-        sortOldest: 'Más antigos',
-        sortPrice: 'Más baratos',
-        sortPriceReverse: 'Más caros',
-        sortRecent: 'Más recientes'
-    }
-};
diff --git a/src/components/common/products/ProductsSortingSelect.js b/../simple-store/src/components/common/products/ProductsSortingSelect.js
index 739d7f9..6474900 100644
--- a/src/components/common/products/ProductsSortingSelect.js
+++ b/../simple-store/src/components/common/products/ProductsSortingSelect.js
@@ -2,20 +2,15 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Select from '../forms/Select';
 import Text from '../typography/Text';
 
-// Translation data for this component
-import intlData from './ProductsSortingSelect.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -23,7 +18,7 @@ let debug = require('debug')('tienda765');
 class ProductsSortingSelect extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -35,69 +30,50 @@ class ProductsSortingSelect extends React.Component {
     }
 
     //*** Template ***//
-    
-    render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+    render() {
 
         // Sorting Options
         var sortOptions = [
             /*{
-             name: <FormattedMessage
-             message={intlStore.getMessage(intlData, 'sortFeatured')}
-             locales={intlStore.getCurrentLocale()} />,
+             name: this.context.intl.formatMessage({id: "sortFeatured"}),
              value: 'featured'
              },
              {
-             name: <FormattedMessage
-             message={intlStore.getMessage(intlData, 'sortBestSelling')}
-             locales={intlStore.getCurrentLocale()} />,
+             name: this.context.intl.formatMessage({id: "sortBestSelling"}),
              value: 'best-selling'
              },*/
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortAlphabetically')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortAlphabetically"}),
                 value: 'alphabetically'
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortAlphabeticallyReverse')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortAlphabeticallyReverse"}),
                 value: '-alphabetically'
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortPrice')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortPrice"}),
                 value: 'price'
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortPriceReverse')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortPriceReverse"}),
                 value: '-price'
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortRecent')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortRecent"}),
                 value: '-date'
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'sortOldest')}
-                    locales={intlStore.getCurrentLocale()} />,
+                name: this.context.intl.formatMessage({id: "sortOldest"}),
                 value: 'date'
             }
         ];
-        
+
         return (
             <div className="products-sorting-select">
                 <div className="products-sorting-select__label">
                     <Text size="small" weight="bold">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'sortLabel')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="sortLabel" />
                     </Text>
                 </div>
                 <div className="products-sorting-select__options">
diff --git a/src/components/common/products/cajon-banner.png b/src/components/common/products/cajon-banner.png
deleted file mode 100644
index ca53917..0000000
Binary files a/src/components/common/products/cajon-banner.png and /dev/null differ
diff --git a/src/components/common/products/fotocopias-banner.png b/src/components/common/products/fotocopias-banner.png
deleted file mode 100644
index 71e5cfa..0000000
Binary files a/src/components/common/products/fotocopias-banner.png and /dev/null differ
diff --git a/src/components/common/typography/Heading.js b/../simple-store/src/components/common/typography/Heading.js
index 53127e9..4f12eea 100644
--- a/src/components/common/typography/Heading.js
+++ b/../simple-store/src/components/common/typography/Heading.js
@@ -32,11 +32,6 @@ class Heading extends React.Component {
             headingClass += ' heading-medium';
         }
 
-        // color
-        if (['red', 'white', 'yellow'].indexOf(this.props.color) != -1) {
-            headingClass += ` heading-${this.props.color}`;
-        }
-
         // Alignment
         if (['left', 'center', 'right'].indexOf(this.props.align) !== -1) {
             headingClass += ` heading--align-${this.props.align}`;
diff --git a/src/components/common/typography/Heading.scss b/../simple-store/src/components/common/typography/Heading.scss
index 81a76de..8343eb2 100644
--- a/src/components/common/typography/Heading.scss
+++ b/../simple-store/src/components/common/typography/Heading.scss
@@ -18,23 +18,6 @@
         font-size: $font-size-heading-small;
     }
 
-    // color
-
-    &-white {
-        color: white;
-    }
-
-    &-red {
-        color: red;
-    }
-
-    &-gray {
-        color: gray;
-    }
-    &-yellow {
-        color: yellow;
-    }
-
     // Alignment
 
     &--align-left {
diff --git a/src/components/common/typography/MarkdownHTML.scss b/../simple-store/src/components/common/typography/MarkdownHTML.scss
index 79abfd5..4240cdb 100644
--- a/src/components/common/typography/MarkdownHTML.scss
+++ b/../simple-store/src/components/common/typography/MarkdownHTML.scss
@@ -693,4 +693,4 @@
 
 .markdown-html hr {
     border-bottom-color: #eee;
-}
+}
\ No newline at end of file
diff --git a/src/components/common/typography/Text.js b/../simple-store/src/components/common/typography/Text.js
index 58511f6..afcc004 100644
--- a/src/components/common/typography/Text.js
+++ b/../simple-store/src/components/common/typography/Text.js
@@ -44,11 +44,6 @@ class Text extends React.Component {
             textClass += ' text-normal';
         }
 
-        // color
-        if (['red', 'white'].indexOf(this.props.color) != -1) {
-            textClass += ` text-${this.props.color}`;
-        }
-
         // Specified class name
         if (this.props.className) {
             textClass += ` ${this.props.className}`;
diff --git a/src/components/common/typography/Text.scss b/../simple-store/src/components/common/typography/Text.scss
index e5b5ad2..b98ebef 100644
--- a/src/components/common/typography/Text.scss
+++ b/../simple-store/src/components/common/typography/Text.scss
@@ -18,20 +18,6 @@
         font-size: $font-size-small;
     }
 
-    // color
-
-    &-white {
-        color: white;
-    }
-
-    &-red {
-        color: red;
-    }
-
-    &-gray {
-        color: gray;
-    }
-
     // Transformation
 
     &-lowercase {
diff --git a/src/components/containers/files/FilesLibraryManager.intl.js b/src/components/containers/files/FilesLibraryManager.intl.js
deleted file mode 100644
index a92ca4a..0000000
--- a/src/components/containers/files/FilesLibraryManager.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        gallery: 'Gallery'
-    },
-    es: {
-        gallery: 'Galeria'
-    }
-};
diff --git a/src/components/containers/files/FilesLibraryManager.js b/src/components/containers/files/FilesLibraryManager.js
deleted file mode 100644
index 609cc72..0000000
--- a/src/components/containers/files/FilesLibraryManager.js
+++ /dev/null
@@ -1,127 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import FileUploadStore from '../../../stores/Files/FileUploadStore';
-import IntlStore from '../../../stores/Application/IntlStore';
-import uploadFile from '../../../actions/Admin/uploadFile';
-
-// Required components
-import FormLabel from '../../common/forms/FormLabel';
-import FileUpload from '../../common/files/FileUpload';
-import FileLibrary from '../../common/files/FileLibrary';
-import Text from '../../common/typography/Text';
-
-// Translation data for this component
-import intlData from './FilesLibraryManager.intl';
-
-// Instantiate logger
-let debug = require('debug')('tienda765');
-
-/**
- * Component
- */
-class FilesLibraryManager extends React.Component {
-
-    static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
-    };
-
-    //*** Initial State ***//
-
-    state = {
-        fileUpload: this.context.getStore(FileUploadStore).getState(),
-        fieldErrors: {}
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        require('./FilesLibraryManager.scss');
-    }
-
-    componentWillReceiveProps(nextProps) {
-
-        let fieldErrors = {};
-        if (nextProps._error && nextProps._error.validation && nextProps._error.validation.keys) {
-            nextProps._error.validation.keys.forEach(function (field) {
-                fieldErrors[field] = nextProps._error.validation.details[field];
-            });
-        }
-
-        // Check if a file was uploaded
-        if (this.state.fileUpload.loading && !nextProps._fileUpload.loading && !nextProps._fileUpload.error) {
-            let files = this.props.files;
-            files.push(nextProps._fileUpload.file);
-            this.props.onChange(files);
-        }
-
-        this.setState({
-            fileUpload: nextProps._fileUpload,
-            fieldErrors: fieldErrors
-        });
-    }
-
-    //*** View Controllers ***//
-
-    handleFileSubmit = (files) => {
-        this.context.executeAction(uploadFile, {
-            resource: 'copies',
-            file: files
-        });
-    };
-
-    //*** Template ***//
-
-    render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let inputClass = 'input-field__input';
-
-        if (this.props.error) {
-            inputClass += ' input-field__input--error';
-        }
-
-        return (
-            <div className="file-library-manager">
-                <div className="file-library-manager__gallery">
-                    <div className="file-library-manager__upload">
-                        <FileUpload onSubmit={this.handleFileSubmit}
-                                     disabled={this.state.fileUpload.loading} />
-                    </div>
-                    <div className="file-library-manager__images">
-                        <FileLibrary files={this.props.files}
-                                      onChange={this.props.onChange} />
-                    </div>
-                </div>
-                {this.props.error ?
-                    <div className="input-field__error">
-                        <Text size="small">{this.props.error}</Text>
-                    </div>
-                    :
-                    null
-                }
-            </div>
-        );
-    }
-}
-
-
-/**
- * Flux
- */
-FilesLibraryManager = connectToStores(FilesLibraryManager, [FileUploadStore], (context) => {
-    return {
-        _fileUpload: context.getStore(FileUploadStore).getState()
-    };
-});
-
-/**
- * Exports
- */
-export default FilesLibraryManager;
diff --git a/src/components/containers/files/FilesLibraryManager.scss b/src/components/containers/files/FilesLibraryManager.scss
deleted file mode 100644
index 07e7a0b..0000000
--- a/src/components/containers/files/FilesLibraryManager.scss
+++ /dev/null
@@ -1,14 +0,0 @@
-.file-library-manager__gallery {
-    display: flex;
-}
-
-.file-library-manager__upload {
-    width: 100%;
-    max-width: 140px;
-    margin-top: 7.5px;
-}
-
-.file-library-manager__images {
-    width: 100%;
-    margin-left: 15px;
-}
diff --git a/src/components/containers/images/ImageLibraryManager.intl.js b/src/components/containers/images/ImageLibraryManager.intl.js
deleted file mode 100644
index a92ca4a..0000000
--- a/src/components/containers/images/ImageLibraryManager.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        gallery: 'Gallery'
-    },
-    es: {
-        gallery: 'Galeria'
-    }
-};
diff --git a/src/components/containers/images/ImageLibraryManager.js b/../simple-store/src/components/containers/images/ImageLibraryManager.js
index ebc2de6..8e9ebbc 100644
--- a/src/components/containers/images/ImageLibraryManager.js
+++ b/../simple-store/src/components/containers/images/ImageLibraryManager.js
@@ -3,11 +3,11 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
 import FileUploadStore from '../../../stores/Files/FileUploadStore';
-import IntlStore from '../../../stores/Application/IntlStore';
 
 import uploadFile from '../../../actions/Admin/uploadFile';
 
@@ -15,12 +15,10 @@ import uploadFile from '../../../actions/Admin/uploadFile';
 import FormLabel from '../../common/forms/FormLabel';
 import ImageLibrary from '../../common/images/ImageLibrary';
 import ImageUpload from '../../common/images/ImageUpload';
-
-// Translation data for this component
-import intlData from './ImageLibraryManager.intl';
+import Text from '../../common/typography/Text';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -28,8 +26,8 @@ let debug = require('debug')('tienda765');
 class ImageLibraryManager extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
     };
 
     //*** Initial State ***//
@@ -73,7 +71,7 @@ class ImageLibraryManager extends React.Component {
 
     handleImageSubmit = (file) => {
         this.context.executeAction(uploadFile, {
-            resource: 'products',
+            resource: this.props.resource,
             file: file
         });
     };
@@ -81,12 +79,10 @@ class ImageLibraryManager extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="image-library-manager">
                 <FormLabel>
-                    <FormattedMessage message={intlStore.getMessage(intlData, 'gallery')}
-                                      locales={intlStore.getCurrentLocale()} />
+                    <FormattedMessage id="gallery" />
                 </FormLabel>
                 <div className="image-library-manager__gallery">
                     <div className="image-library-manager__upload">
@@ -98,6 +94,13 @@ class ImageLibraryManager extends React.Component {
                                       onChange={this.props.onChange} />
                     </div>
                 </div>
+                {this.props.error ?
+                    <div className="input-field__error">
+                        <Text size="small">{this.props.error}</Text>
+                    </div>
+                    :
+                    null
+                }
             </div>
         );
     }
diff --git a/src/components/core/AuthenticatedComponent.js b/../simple-store/src/components/core/AuthenticatedComponent.js
index 9f098ea..3725d43 100644
--- a/src/components/core/AuthenticatedComponent.js
+++ b/../simple-store/src/components/core/AuthenticatedComponent.js
@@ -2,10 +2,11 @@
  * Imports.
  */
 import React from 'react';
+import { injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux.
 import AccountStore from '../../stores/Account/AccountStore';
-import IntlStore from '../../stores/Application/IntlStore';
 
 // Required components
 import Spinner from '../common/indicators/Spinner';
@@ -24,9 +25,9 @@ export default (ComposedComponent, scope) => {
     class AuthenticatedComponent extends React.Component {
 
         static contextTypes = {
-            executeAction: React.PropTypes.func.isRequired,
-            getStore: React.PropTypes.func.isRequired,
-            router: React.PropTypes.func.isRequired
+            executeAction: PropTypes.func.isRequired,
+            getStore: PropTypes.func.isRequired,
+            intl: intlShape.isRequired,
         };
 
         //*** Page Title and Snippets ***//
@@ -52,11 +53,7 @@ export default (ComposedComponent, scope) => {
             if (!isLoading && accountDetails && isAuthorized) {
                 this.setState({processed: true});
             } else if (!isLoading) {
-                this.context.router.transitionTo(
-                    'login',
-                    {locale: this.context.getStore(IntlStore).getCurrentLocale()},
-                    {next: this.context.router.getCurrentPath()}
-                );
+                this.props.history.push(`/${this.context.intl.locale}/login?next=${this.props.location.pathname}`);
             }
         }
 
diff --git a/src/components/core/BaseHtml.js b/../simple-store/src/components/core/BaseHtml.js
index fe764c0..d56df8d 100644
--- a/src/components/core/BaseHtml.js
+++ b/../simple-store/src/components/core/BaseHtml.js
@@ -22,17 +22,12 @@ class BaseHtml extends React.Component {
                     <link rel="icon" type="image/png" href={`${this.props.staticURL}/favicon.ico`} />
                     <link rel="apple-touch-icon" href={`${this.props.staticURL}/apple_touch_icon.png`} />
                     <link rel="stylesheet" href={`${this.props.staticURL}/vendor/font-awesome-4.6.3/css/font-awesome.min.css`} />
-                    <link rel="stylesheet" href='https://fonts.googleapis.com/css?family=Josefin+Slab:400,700' type="text/css" />
                     {this.props.css.map((href, idx) => <link key={idx} rel="stylesheet" type="text/css" href={href} />)}
                 </head>
                 <body>
                     <div id="app" dangerouslySetInnerHTML={{__html: this.props.markup}}></div>
                     <script dangerouslySetInnerHTML={{__html: this.props.state}}></script>
-                    <script async defer
-                    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAuZlJw5myNVPM8YgqFbinf46xrJUi8Q6E&libraries=geometry,places">
-                    </script>
                     {this.props.scripts.map((src, idx) => <script src={src} key={idx}></script>)}
-                    <script src={`${this.props.staticURL}/vendor/switch-2.latest.min.js`}></script>
                     {config.facebookPixel && config.facebookPixel.enabled === true ?
                         <script src={`${this.props.staticURL}/vendor/facebook-pixel.js`}></script>
                         :
diff --git a/src/components/core/Breakpoint.js b/../simple-store/src/components/core/Breakpoint.js
index db59116..46bf407 100644
--- a/src/components/core/Breakpoint.js
+++ b/../simple-store/src/components/core/Breakpoint.js
@@ -3,6 +3,7 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
+import PropTypes from 'prop-types';
 
 // Flux
 import ResponsiveStore from '../../stores/Application/ResponsiveStore';
@@ -13,7 +14,7 @@ import ResponsiveStore from '../../stores/Application/ResponsiveStore';
 class Breakpoint extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Initial State & Defaults ***//
diff --git a/src/components/pages/.DS_Store b/src/components/pages/.DS_Store
deleted file mode 100644
index 48e7275..0000000
Binary files a/src/components/pages/.DS_Store and /dev/null differ
diff --git a/src/components/pages/Account/Account.intl.js b/../simple-store/src/components/pages/Account/Account.intl.js
index ef9affb..907ae0d 100644
--- a/src/components/pages/Account/Account.intl.js
+++ b/../simple-store/src/components/pages/Account/Account.intl.js
@@ -1,67 +1,11 @@
 export default {
-    en: {
-        address: 'Address',
-        addresses: 'Addresses',
-        addressLine2: 'Comment or notes for delivery',
-        cancel: 'Cancel',
-        changePassword: 'Change Password',
-        city: 'City',
-        confirmPassword: 'Confirm New Password',
-        country: 'Country',
-        delete: 'Delete',
-        deleteAddress: 'Delete Address',
-        deleteAddressConfirm: 'Are you sure you want to delete the address?',
-        details: 'Details',
-        edit: 'Edit',
-        editAddress: 'Edit Address',
-        editDetails: 'Edit Details',
-        email: 'Email',
-        fieldRequired: 'This field is required',
-        name: 'Full Name',
-        newAddress: 'New Address',
-        newPassword: 'New Password',
-        oldPassword: 'Old Password',
-        passwordMismatch: 'Passwords don\'t match',
-        phoneNumber: 'Phone Number',
-        postalCode: 'Postal Code',
-        save: 'Save',
-        state: 'State',
-        title: 'My Account',
-        update: 'Update',
-        dni: 'Identification Number',
-        vatLabel: 'ID'
-
+    "uk": {
+        "title": "Мій обліковий запис",
+    },
+    "ru": {
+        "title": "Мой Аккаунт",
+    },
+    "en": {
+        "title": "My Account",
     },
-    es: {
-        address: 'Dirección',
-        addresses: 'Direcciones',
-        addressLine2: 'Comentario para el delivery',
-        cancel: 'Cancelar',
-        changePassword: 'Cambiar contraseña',
-        city: 'Ciudad',
-        confirmPassword: 'Confirmar contraseña nueva',
-        country: 'País',
-        delete: 'Eliminar',
-        deleteAddress: 'Eliminar dirección',
-        deleteAddressConfirm: 'Está seguro que desea eliminar esta dirección?',
-        details: 'Detalles',
-        edit: 'Editar',
-        editAddress: 'Editar dirección',
-        editDetails: 'Editar detalles',
-        email: 'E-Mail',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre Completo',
-        newAddress: 'Actualizar dirección',
-        newPassword: 'Contraseña nueva',
-        oldPassword: 'Contraseña antigua',
-        passwordMismatch: 'Las contraseñas no coinciden',
-        phoneNumber: 'Número de teléfono',
-        postalCode: 'Código Postal',
-        save: 'Guardar',
-        state: 'Estado/Provincia',
-        title: 'Mi cuenta',
-        update: 'Actualizar',
-        dni: 'Número de Documento de Identidad',
-        vatLabel: 'DNI'
-    }
 };
diff --git a/src/components/pages/Account/Account.js b/../simple-store/src/components/pages/Account/Account.js
index 7902205..6876452 100644
--- a/src/components/pages/Account/Account.js
+++ b/../simple-store/src/components/pages/Account/Account.js
@@ -2,8 +2,12 @@
  * Imports
  */
 import React from 'react';
+import async from 'async';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
@@ -21,6 +25,7 @@ import FormLabel from '../../common/forms/FormLabel';
 import Heading from '../../common/typography/Heading';
 import InlineItems from '../../common/forms/InlineItems';
 import InputField from '../../common/forms/InputField';
+import Textarea from '../../common/forms/Textarea';
 import Modal from '../../common/modals/Modal';
 import Select from '../../common/forms/Select';
 import Text from '../../common/typography/Text';
@@ -31,7 +36,7 @@ import AccountOrders from './AccountOrders';
 import intlData from './Account.intl';
 
 // Instantiate debugger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -39,15 +44,16 @@ let debug = require('debug')('tienda765');
 class Account extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'title')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -55,12 +61,12 @@ class Account extends React.Component {
 
     state = {
         user: Object.assign({}, this.context.getStore(AccountStore).getAccountDetails()),
-        loading: undefined,
+        loading: this.context.getStore(AccountStore).isLoading(),
         error: undefined,
-        lastOrder: undefined,
-        lastOrderLoading: true,
+        lastOrder: this.context.getStore(OrderDetailsStore).getOrder(),
+        lastOrderLoading: this.context.getStore(OrderDetailsStore).isLoading(),
         lastOrderError: undefined,
-        orders: undefined,
+        orders: this.context.getStore(OrdersListStore).getOrders(),
         openModal: null,
         newPassword: {},
         address: {},
@@ -74,9 +80,10 @@ class Account extends React.Component {
         // Component styles
         require('./Account.scss');
 
-        //*** Required Data ***//
+        // Load required data
         this.context.executeAction(fetchAccountDetails);
         this.context.executeAction(fetchUserLastOrder, {userId: this.state.user.id});
+
     }
 
     componentWillReceiveProps(nextProps) {
@@ -145,6 +152,7 @@ class Account extends React.Component {
 
     handleModalCloseClick = () => {
         this.setState({
+            user: Object.assign({}, this.context.getStore(AccountStore).getAccountDetails()),
             openModal: null,
             fieldErrors: {}
         });
@@ -152,29 +160,41 @@ class Account extends React.Component {
 
     handleModalSubmitClick = (details, data) => {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         if (details === 'name') {
-            this.context.executeAction(updateAccountDetails, {
-                name: this.state.user.name
-            });
+            // Client-side validations
+            let fieldErrors = {};
+
+            if (!this.state.user.name) {
+                fieldErrors.name = intl.formatMessage({id: 'fieldRequired'});
+            }
+
+            this.setState({fieldErrors: fieldErrors});
+
+            // Validation passed, trigger request
+            if (Object.keys(fieldErrors).length === 0) {
+                this.context.executeAction(updateAccountDetails, {
+                    name: this.state.user.name
+                });
+            }
         } else if (details === 'password') {
 
             // Client-side validations
             let fieldErrors = {};
 
             if (!this.state.newPassword.oldPassword) {
-                fieldErrors.oldPassword = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.oldPassword = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.newPassword.newPassword) {
-                fieldErrors.newPassword = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.newPassword = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.newPassword.confirmPassword) {
-                fieldErrors.confirmPassword = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.confirmPassword = intl.formatMessage({id: 'fieldRequired'});
             } else if (this.state.newPassword.newPassword !== this.state.newPassword.confirmPassword) {
-                fieldErrors.confirmPassword = intlStore.getMessage(intlData, 'passwordMismatch');
+                fieldErrors.confirmPassword = intl.formatMessage({id: 'passwordMismatch'});
             }
 
             this.setState({fieldErrors: fieldErrors});
@@ -192,23 +212,23 @@ class Account extends React.Component {
             let fieldErrors = {};
 
             if (!this.state.address.name) {
-                fieldErrors.name = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.name = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.address.addressLine1) {
-                fieldErrors.addressLine1 = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.addressLine1 = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.address.postalCode) {
-                fieldErrors.postalCode = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.postalCode = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.address.city) {
-                fieldErrors.city = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.city = intl.formatMessage({id: 'fieldRequired'});
             }
 
             if (!this.state.address.country) {
-                fieldErrors.country = intlStore.getMessage(intlData, 'fieldRequired');
+                fieldErrors.country = intl.formatMessage({id: 'fieldRequired'});
             }
 
             this.setState({fieldErrors: fieldErrors});
@@ -234,35 +254,20 @@ class Account extends React.Component {
     //*** Template ***//
 
     render() {
-
-        //
-        // Helper methods & variables
-        //
-
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let countryOptions = [
-            {name: 'Argentina', value: 'Argentina'}
-        ];
-
-        let provinceOptions = [
-            {name: 'Chaco', value: 'Chaco'}
-        ];
-
-        let cityOptions = [
-            {name: 'Resistencia', value: 'Resistencia'},
-            {name: 'Barranqueras', value: 'Barranqueras'},
-            {name: 'Vilelas', value: 'Vilelas'},
-            {name: 'Fontana', value: 'Fontana'},
+            {name: 'Ukraine', value: 'UA'}
         ];
 
         let modal = () => {
             if (this.state.openModal === 'editDetails') {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'editDetails')}
+                    <Modal title={intl.formatMessage({id: 'editDetails'})}
                            onCloseClick={this.handleModalCloseClick}>
                         <div className="account__modal-form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'name')}
+                            <InputField label={intl.formatMessage({id: 'fullName'})}
                                         value={this.state.user.name}
                                         onChange={this.handleFieldChange.bind(null, 'name')}
                                         error={this.state.fieldErrors['name']} />
@@ -272,18 +277,14 @@ class Account extends React.Component {
                                 <Button type="default"
                                         onClick={this.handleModalCloseClick}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'cancel')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="cancelButton" />
                                 </Button>
                             </div>
                             <div className="account__modal-form-action-item">
                                 <Button type="primary"
                                         onClick={this.handleModalSubmitClick.bind(null, 'name')}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'update')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="updateButton" />
                                 </Button>
                             </div>
                         </div>
@@ -291,22 +292,22 @@ class Account extends React.Component {
                 );
             } else if (this.state.openModal === 'changePassword') {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'changePassword')}
+                    <Modal title={intl.formatMessage({id: 'changePassword'})}
                            onCloseClick={this.handleModalCloseClick}>
                         <div className="account__modal-form-item">
-                           <InputField label={intlStore.getMessage(intlData, 'oldPassword')}
+                           <InputField label={intl.formatMessage({id: 'oldPassword'})}
                                        type="password"
                                        onChange={this.handlePasswordFieldChange.bind(null, 'oldPassword')}
                                        error={this.state.fieldErrors['oldPassword']} />
                         </div>
                         <div className="account__modal-form-item">
-                           <InputField label={intlStore.getMessage(intlData, 'newPassword')}
+                           <InputField label={intl.formatMessage({id: 'newPassword'})}
                                        type="password"
                                        onChange={this.handlePasswordFieldChange.bind(null, 'newPassword')}
                                        error={this.state.fieldErrors['newPassword']} />
                         </div>
                         <div className="account__modal-form-item">
-                           <InputField label={intlStore.getMessage(intlData, 'confirmPassword')}
+                           <InputField label={intl.formatMessage({id: 'confirmPassword'})}
                                        type="password"
                                        onChange={this.handlePasswordFieldChange.bind(null, 'confirmPassword')}
                                        error={this.state.fieldErrors['confirmPassword']} />
@@ -316,78 +317,74 @@ class Account extends React.Component {
                                 <Button type="default"
                                         onClick={this.handleModalCloseClick}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'cancel')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="cancelButton" />
                                 </Button>
                             </div>
                             <div className="account__modal-form-action-item">
                                 <Button type="primary"
                                         onClick={this.handleModalSubmitClick.bind(null, 'password')}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'update')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="updateButton" />
                                 </Button>
                             </div>
                         </div>
                     </Modal>
                 );
             } else if (this.state.openModal === 'newAddress' || this.state.openModal === 'editAddress') {
-                let title = (this.state.openModal === 'newAddress') ? intlStore.getMessage(intlData, 'newAddress') : intlStore.getMessage(intlData, 'editAddress');
-                let submitLabel = (this.state.openModal === 'newAddress') ? intlStore.getMessage(intlData, 'save') : intlStore.getMessage(intlData, 'update');
+                let title = (this.state.openModal === 'newAddress') ? intl.formatMessage({id: 'newAddress'}) : intl.formatMessage({id: 'editAddress'});
+                let submitLabel = (this.state.openModal === 'newAddress') ? intl.formatMessage({id: 'saveButton'}) : intl.formatMessage({id: 'updateButton'});
                 return (
                     <Modal title={title}
                            onCloseClick={this.handleModalCloseClick}>
                         <div className="account__modal-form-item">
                             <InlineItems>
-                                <InputField label={intlStore.getMessage(intlData, 'name')}
-                                            value={this.state.address.name}
+                                <InputField label={intl.formatMessage({id: 'fullName'})}
+                                            value={this.state.address.name || ''}
                                             onChange={this.handleAddressFieldChange.bind(null, 'name')}
                                             error={this.state.fieldErrors['name']} />
-                                <InputField label={intlStore.getMessage(intlData, 'phoneNumber')}
-                                            value={this.state.address.phone}
+                                <InputField label={intl.formatMessage({id: 'phoneNumber'})}
+                                            value={this.state.address.phone || ''}
                                             onChange={this.handleAddressFieldChange.bind(null, 'phone')}
                                             error={this.state.fieldErrors['phone']} />
                             </InlineItems>
                         </div>
                         <div className="account__modal-form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'dni')}
-                                        value={this.state.address.dni}
-                                        onChange={this.handleAddressFieldChange.bind(null, 'dni')}
-                                        error={this.state.fieldErrors['dni']} />
+                            <InputField label={intl.formatMessage({id: 'vatin'})}
+                                        value={this.state.address.vatin || ''}
+                                        onChange={this.handleAddressFieldChange.bind(null, 'vatin')}
+                                        error={this.state.fieldErrors['vatin']} />
                         </div>
                         <div className="account__modal-form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'address')}
-                                        value={this.state.address.addressLine1}
+                            <InputField label={intl.formatMessage({id: 'address'})}
+                                        value={this.state.address.addressLine1 || ''}
                                         onChange={this.handleAddressFieldChange.bind(null, 'addressLine1')}
                                         error={this.state.fieldErrors['addressLine1']} />
                         </div>
                         <div className="account__modal-address-line2">
-                            <InputField label={intlStore.getMessage(intlData, 'addressLine2')}
-                                        onChange={this.handleAddressFieldChange.bind(null, 'addressLine2')}
-                                        value={this.state.address.addressLine2}
+                            <InputField onChange={this.handleAddressFieldChange.bind(null, 'addressLine2')}
+                                        value={this.state.address.addressLine2 || ''}
                                         error={this.state.fieldErrors['addressLine2']} />
                         </div>
                         <div className="account__modal-form-item">
                             <InlineItems>
-                                <InputField label={intlStore.getMessage(intlData, 'postalCode')}
-                                            value={this.state.address.postalCode}
+                                <InputField label={intl.formatMessage({id: 'postalCode'})}
+                                            value={this.state.address.postalCode || ''}
                                             onChange={this.handleAddressFieldChange.bind(null, 'postalCode')}
                                             error={this.state.fieldErrors['postalCode']} />
-                                <Select label={intlStore.getMessage(intlData, 'city')} placeholder options={cityOptions}
-                                        value={this.state.address.city}
-                                        onChange={this.handleAddressFieldChange.bind(null, 'city')}
-                                        error={this.state.fieldErrors['city']} />
+                                <InputField label={intl.formatMessage({id: 'city'})}
+                                            value={this.state.address.city || ''}
+                                            onChange={this.handleAddressFieldChange.bind(null, 'city')}
+                                            error={this.state.fieldErrors['city']} />
                             </InlineItems>
                         </div>
                         <div className="account__modal-form-item">
                             <InlineItems>
-                                <Select label={intlStore.getMessage(intlData, 'state')} placeholder options={provinceOptions}
-                                        value={this.state.address.statenewAddress}
-                                        onChange={this.handleAddressFieldChange.bind(null, 'state')}
-                                        error={this.state.fieldErrors['state']} />
-                                <Select label={intlStore.getMessage(intlData, 'country')} placeholder options={countryOptions}
-                                        value={this.state.address.country}
+                                <InputField label={intl.formatMessage({id: 'state'})}
+                                            value={this.state.address.state || ''}
+                                            onChange={this.handleAddressFieldChange.bind(null, 'state')}
+                                            error={this.state.fieldErrors['state']} />
+                                <Select label={intl.formatMessage({id: 'country'})} placeholder options={countryOptions}
+                                        value={this.state.address.country || ''}
                                         onChange={this.handleAddressFieldChange.bind(null, 'country')}
                                         error={this.state.fieldErrors['country']} />
                             </InlineItems>
@@ -397,9 +394,7 @@ class Account extends React.Component {
                                 <Button type="default"
                                         onClick={this.handleModalCloseClick}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'cancel')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="cancelButton" />
                                 </Button>
                             </div>
                             <div className="account__modal-form-action-item">
@@ -414,35 +409,30 @@ class Account extends React.Component {
                 );
             } else if (this.state.openModal === 'deleteAddress') {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'deleteAddress')}
+                    <Modal title={intl.formatMessage({id: 'deleteAddress'})}
                            onCloseClick={this.handleModalCloseClick}>
                         <div className="account__modal-form-item">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'deleteAddressConfirm')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="deleteAddressConfirm" />
                         </div>
                         <div className="account__modal-form-actions">
                             <div className="account__modal-form-action-item">
                                 <Button type="default"
                                         onClick={this.handleModalCloseClick}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'cancel')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="cancelButton" />
                                 </Button>
                             </div>
                             <div className="account__modal-form-action-item">
                                 <Button type="primary"
                                         onClick={this.handleModalSubmitClick.bind(null, 'deleteAddress', this.state.address)}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'delete')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="deleteButton" />
                                 </Button>
                             </div>
                         </div>
                     </Modal>
                 );
+
             } else if (this.state.openModal !== null) {
                 debug(`Unsupported modal "${this.state.openModal}"`);
             }
@@ -457,9 +447,7 @@ class Account extends React.Component {
 
                 <div className="account__title">
                     <Heading size="large">
-                        <FormattedMessage
-                            message={intlStore.getMessage(intlData, 'title')}
-                            locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="accountTitle" />
                     </Heading>
                 </div>
                 <div className="account__content">
@@ -467,17 +455,13 @@ class Account extends React.Component {
                         <div className="account__details">
                             <div className="account__details-title">
                                 <Heading size="medium">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'details')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="details" />
                                 </Heading>
                             </div>
                             <div className="account__details-item">
                                 <div className="account__details-item-label">
                                     <FormLabel>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'name')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="fullName" />
                                     </FormLabel>
                                 </div>
                                 <div className="account__details-item-value">
@@ -487,9 +471,7 @@ class Account extends React.Component {
                             <div className="account__details-item">
                                 <div className="account__details-item-label">
                                     <FormLabel>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'email')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="email" />
                                     </FormLabel>
                                 </div>
                                 <div className="account__details-item-value">
@@ -502,18 +484,14 @@ class Account extends React.Component {
                                         fontSize="small"
                                         onClick={this.handleOpenModalClick.bind(null, 'editDetails')}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'editDetails')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="editDetails" />
                                 </Button>
                                 <Button className="account__details-action-button"
                                         type="default"
                                         fontSize="small"
                                         onClick={this.handleOpenModalClick.bind(null, 'changePassword')}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'changePassword')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="changePassword" />
                                 </Button>
                             </div>
                         </div>
@@ -521,9 +499,7 @@ class Account extends React.Component {
                         <div className="account__addresses">
                             <div className="account__addresses-title">
                                 <Heading size="medium">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'addresses')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="addresses" />
                                 </Heading>
                             </div>
                             <div className="account__addresses-actions">
@@ -532,9 +508,7 @@ class Account extends React.Component {
                                         fontSize="small"
                                         onClick={this.handleOpenModalClick.bind(null, 'newAddress', {})}
                                         disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'newAddress')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="newAddress" />
                                 </Button>
                             </div>
                             <div className="account__addresses-list">
@@ -554,9 +528,7 @@ class Account extends React.Component {
                                             {address.vatin ?
                                                 <div className="account__address-vatin">
                                                     <Text>
-                                                        <FormattedMessage
-                                                            message={intlStore.getMessage(intlData, 'vatLabel')}
-                                                            locales={intlStore.getCurrentLocale()} />: {address.vatin}
+                                                        <FormattedMessage id="vatLabel" />: {address.vatin}
                                                     </Text>
                                                 </div>
                                                 :
@@ -591,16 +563,12 @@ class Account extends React.Component {
                                             <div className="account__address-actions">
                                                 <div className="account__address-edit" onClick={this.handleOpenModalClick.bind(null, 'editAddress', address)}>
                                                     <Text weight="bold">
-                                                        <FormattedMessage
-                                                            message={intlStore.getMessage(intlData, 'edit')}
-                                                            locales={intlStore.getCurrentLocale()} />
+                                                        <FormattedMessage id="editButton" />
                                                     </Text>
                                                 </div>
                                                 <div className="account__address-delete" onClick={this.handleOpenModalClick.bind(null, 'deleteAddress', address)}>
                                                     <Text>
-                                                        <FormattedMessage
-                                                            message={intlStore.getMessage(intlData, 'delete')}
-                                                            locales={intlStore.getCurrentLocale()} />
+                                                        <FormattedMessage id="deleteButton" />
                                                     </Text>
                                                 </div>
                                             </div>
diff --git a/src/components/pages/Account/AccountBase.js b/../simple-store/src/components/pages/Account/AccountBase.js
index 1666e6d..a4d73b7 100644
--- a/src/components/pages/Account/AccountBase.js
+++ b/../simple-store/src/components/pages/Account/AccountBase.js
@@ -2,11 +2,12 @@
  * Imports
  */
 import React from 'react';
-import {RouteHandler} from 'react-router';
+import { renderRoutes } from 'react-router-config';
 
 // Required components
 import AuthenticatedComponent from '../../core/AuthenticatedComponent';
 
+
 /**
  * Component
  */
@@ -17,7 +18,7 @@ class AccountBase extends React.Component {
     render() {
         return (
             <div className="account-base">
-                <RouteHandler />
+                {renderRoutes(this.props.route.routes)}
             </div>
         );
     }
diff --git a/src/components/pages/Account/AccountOrderDetailsPage.intl.js b/src/components/pages/Account/AccountOrderDetailsPage.intl.js
deleted file mode 100644
index 124ab97..0000000
--- a/src/components/pages/Account/AccountOrderDetailsPage.intl.js
+++ /dev/null
@@ -1,9 +0,0 @@
-export default {
-    en: {
-        title: 'Order Details'
-
-    },
-    es: {
-        title: 'Detalles del pedido'
-    }
-};
diff --git a/src/components/pages/Account/AccountOrderDetailsPage.js b/../simple-store/src/components/pages/Account/AccountOrderDetailsPage.js
index c7d3222..efc3262 100644
--- a/src/components/pages/Account/AccountOrderDetailsPage.js
+++ b/../simple-store/src/components/pages/Account/AccountOrderDetailsPage.js
@@ -3,10 +3,10 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 import OrderDetailsStore from '../../../stores/Orders/OrderDetailsStore';
 import fetchOrderAndCheckIfFound from '../../../actions/Orders/fetchOrderAndCheckIfFound';
 
@@ -16,35 +16,33 @@ import NotFound from '../NotFound/NotFound';
 import OrderDetails from '../../common/orders/OrderDetails';
 import Spinner from '../../common/indicators/Spinner';
 
-// Translation data for this component
-import intlData from './AccountOrderDetailsPage.intl';
-
 /**
  * Component
  */
 class AccountOrderDetailsPage extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
 
     state = {
-        order: undefined,
-        loading: true
+        order: this.context.getStore(OrderDetailsStore).getOrder(),
+        loading: this.context.getStore(OrderDetailsStore).isLoading()
     };
-    
+
     //*** Component Lifecycle ***//
-    
+
     componentDidMount() {
 
         // Component styles
         require('./AccountOrderDetailsPage.scss');
 
         // Load required data
-        this.context.executeAction(fetchOrderAndCheckIfFound, this.props.params.orderId);
+        this.context.executeAction(fetchOrderAndCheckIfFound, this.props.match.params.orderId);
     }
 
     componentWillReceiveProps(nextProps) {
@@ -57,13 +55,11 @@ class AccountOrderDetailsPage extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="account-order-details-page">
                 <div className="account-order-details-page__title">
                     <Heading size="medium">
-                        <FormattedMessage message={intlStore.getMessage(intlData, 'title')}
-                                          locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="accountOrderDetailsHeader" />
                     </Heading>
                 </div>
                 {this.state.loading ?
@@ -76,7 +72,7 @@ class AccountOrderDetailsPage extends React.Component {
                             <NotFound />
                             :
                             <div className="account-order-details-page__content">
-                                <OrderDetails order={this.state.order} customerDetails={false} />
+                                <OrderDetails order={this.state.order} customerDetails={this.state.order.customer} />
                             </div>
                         }
                     </div>
diff --git a/src/components/pages/Account/AccountOrders.intl.js b/src/components/pages/Account/AccountOrders.intl.js
deleted file mode 100644
index 6dde18d..0000000
--- a/src/components/pages/Account/AccountOrders.intl.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default {
-    en: {
-        dateHeading: 'Date',
-        history: 'History',
-        idHeading: 'ID',
-        noOrders: 'You haven\'t made any orders yet :(',
-        statusHeading: 'Status',
-        title: 'Last Order',
-        viewDetails: 'View Details'
-    },
-    es: {
-        dateHeading: 'Fecha',
-        history: 'Histórico',
-        idHeading: 'ID',
-        noOrders: 'No ha realizado ningún pedido por ahora :(',
-        statusHeading: 'Estado',
-        title: 'Último pedido',
-        viewDetails: 'Ver Detalles'
-    }
-};
diff --git a/src/components/pages/Account/AccountOrders.js b/../simple-store/src/components/pages/Account/AccountOrders.js
index 0f1d41b..94313d4 100644
--- a/src/components/pages/Account/AccountOrders.js
+++ b/../simple-store/src/components/pages/Account/AccountOrders.js
@@ -3,11 +3,9 @@
  */
 import React from 'react';
 import moment from 'moment';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Required components
 import Breakpoint from '../../core/Breakpoint';
@@ -19,16 +17,14 @@ import Spinner from '../../common/indicators/Spinner';
 import Table from '../../common/tables/Table';
 import Text from '../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './AccountOrders.intl';
-
 /**
  * Component
  */
 class AccountOrders extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -46,17 +42,13 @@ class AccountOrders extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
+
 
         // Order list table headings
         let headings = [
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'dateHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'statusHeading')}
-                locales={intlStore.getCurrentLocale()} />,
+            <FormattedMessage id="dateHeading" />,
+            <FormattedMessage id="statusHeading" />,
             ''
         ];
 
@@ -68,8 +60,10 @@ class AccountOrders extends React.Component {
                     <Text size="small">{moment(order.createdAt).format('YYYY/MM/DD HH:mm:ss')}</Text>,
                     <OrderStatus status={order.status} />,
                     <span className="account-orders__link">
-                        <Link to="account-order-details" params={Object.assign({orderId: order.id}, routeParams)}>
-                            <Text size="small">Ver Detalles</Text>
+                        <Link to={`/${locale}/account/orders/${order.id}`} >
+                            <Text size="small">
+                                <FormattedMessage id="viewDetails" />
+                            </Text>
                         </Link>
                     </span>
                 ]
@@ -83,9 +77,7 @@ class AccountOrders extends React.Component {
             <div className="account-orders">
                 <div className="account-orders__title">
                     <Heading size="medium">
-                        <FormattedMessage
-                            message={intlStore.getMessage(intlData, 'title')}
-                            locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="accountOrdersHeader" />
                     </Heading>
                 </div>
                 {this.props.loading ?
@@ -97,8 +89,7 @@ class AccountOrders extends React.Component {
                         {!this.props.lastOrder ?
                             <div className="account-orders__no-order">
                                 <Text size="small">
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'noOrders')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="noOrders" />
                                 </Text>
                             </div>
                             :
@@ -116,10 +107,9 @@ class AccountOrders extends React.Component {
                                 <OrderSummary checkout={this.props.lastOrder.checkout} />
                                 <div className="account-orders__last-order-actions">
                                     <div className="account-orders__last-order-action-button">
-                                        <Link to="account-order-details" params={Object.assign({orderId: this.props.lastOrder.id}, routeParams)}>
+                                        <Link to={`/${locale}/account/orders/${this.props.lastOrder.id}`} >
                                             <Button type="default" fontSize="small">
-                                                <FormattedMessage message={intlStore.getMessage(intlData, 'viewDetails')}
-                                                                  locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="viewDetails" />
                                             </Button>
                                         </Link>
                                     </div>
@@ -130,15 +120,14 @@ class AccountOrders extends React.Component {
                             <div className="account-orders__list">
                                 <div className="account-orders__list-title">
                                     <Heading size="small">
-                                        <FormattedMessage message={intlStore.getMessage(intlData, 'history')}
-                                                          locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="history" />
                                     </Heading>
                                 </div>
                                 <div className="account-orders__list-content">
                                     <Breakpoint point="handhelds">
-                                        {rows.map(function (row) {
+                                        {rows.map(function (row, index) {
                                             return (
-                                                <div className="account-orders__list-item">
+                                                <div className="account-orders__list-item" key={index}>
                                                     <div className="account-orders__item-data">
                                                         {row.data[0]}
                                                     </div>
diff --git a/src/components/pages/Account/Login.intl.js b/../simple-store/src/components/pages/Account/Login.intl.js
index a64228d..a34a35a 100644
--- a/src/components/pages/Account/Login.intl.js
+++ b/../simple-store/src/components/pages/Account/Login.intl.js
@@ -1,34 +1,11 @@
 export default {
-    en: {
-        disabled: 'Your account is disabled',
-        email: 'Email',
-        fieldRequired: 'This field is required',
-        invalidCredentials: 'Invalid credentials',
-        login: 'Login',
-        mergeCartsConfirm: 'Your account has a cart with some products on it. Do you want to merge your current cart with it? (If you say "no", your current cart will be discarded)',
-        mergeCartsTitle: 'Merge Carts',
-        no: 'No',
-        password: 'Password',
-        pendingConfirmation: 'Your account is pending email confirmation',
-        submit: 'Sign in',
-        unknownStatus: 'Error. Please contact support',
-        yes: 'Yes',
-        forgotPass: 'Forgot your password?'
+    "uk": {
+        "title": "Вхід",
+    },
+    "ru": {
+        "title": "Вход",
+    },
+    "en": {
+        "title": "Login",
     },
-    es: {
-        disabled: 'Su cuenta está desactivada',
-        email: 'E-mail',
-        fieldRequired: 'Este campo es obrigatorio',
-        invalidCredentials: 'Datos inválidos',
-        login: 'Login',
-        mergeCartsConfirm: 'Su cuenta tiene productos en el carrito. Deséa juntarlos con su carrito actual? (Si responde "no", su carrito actual va a ser descartado)',
-        mergeCartsTitle: 'Juntar Carritos',
-        no: 'No',
-        password: 'Contraseña',
-        pendingConfirmation: 'Su cuenta esta pendiente de confirmación de email',
-        submit: 'Ingresar',
-        unknownStatus: 'Error. Por favor contacte al servicio de soporte',
-        yes: 'Si',
-        forgotPass: 'Se olvidó la contraseña?'
-    }
 };
diff --git a/src/components/pages/Account/Login.js b/../simple-store/src/components/pages/Account/Login.js
index 0852807..26e5193 100644
--- a/src/components/pages/Account/Login.js
+++ b/../simple-store/src/components/pages/Account/Login.js
@@ -2,9 +2,13 @@
  * Imports.
  */
 import React from 'react';
+import queryString from 'query-string';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import { Link } from 'react-router-dom';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
@@ -33,16 +37,16 @@ import intlData from './Login.intl';
 class Login extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'login')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -69,10 +73,11 @@ class Login extends React.Component {
     };
 
     next = () => {
-        if (this.props.query.next) {
-            this.context.router.transitionTo(this.props.query.next);
+        let query = queryString.parse(this.props.location.search);
+        if (query.next) {
+            this.props.history.push(query.next);
         } else {
-            this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+            this.props.history.push(`/${this.context.intl.locale}`);
         }
     };
 
@@ -85,7 +90,7 @@ class Login extends React.Component {
 
         // If user is authenticated, redirect to homepage
         if (this.context.getStore(AccountStore).getAccountDetails()) {
-            this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+            this.props.history.push(`/${this.context.intl.locale}`);
         }
     }
 
@@ -99,15 +104,15 @@ class Login extends React.Component {
                     fieldErrors[field] = nextProps._error.validation.details[field];
                 });
             } else if (!nextProps._error.hasOwnProperty('status')) {
-                fieldErrors.email = this.context.getStore(IntlStore).getMessage(intlData, 'invalidCredentials');
-                fieldErrors.password = this.context.getStore(IntlStore).getMessage(intlData, 'invalidCredentials');
+                fieldErrors.email = this.context.intl.formatMessage({id: 'invalidCredentials'});
+                fieldErrors.password = this.context.intl.formatMessage({id: 'invalidCredentials'});
             } else if (['pendingConfirmation', 'disabled'].indexOf(nextProps._error.status) !== -1) {
                 this.setState({
-                    errorMessage: this.context.getStore(IntlStore).getMessage(intlData, nextProps._error.status)
+                    errorMessage: this.context.intl.formatMessage({id: nextProps._error.status})
                 });
             } else {
                 this.setState({
-                    errorMessage: this.context.getStore(IntlStore).getMessage(intlData, 'unknownStatus')
+                    errorMessage: this.context.intl.formatMessage({id: 'unknownStatus'})
                 });
             }
         }
@@ -163,17 +168,14 @@ class Login extends React.Component {
     };
 
     handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
         this.setState({errorMessage: null});
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.email) {
-            fieldErrors.email = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.email = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.password) {
-            fieldErrors.password = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.password =this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -205,40 +207,27 @@ class Login extends React.Component {
     //*** Template ***//
 
     render() {
-
-        //
-        // Helper methods & variables
-        //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
-
         // Return the "merge carts" modal
         let mergeCartsModal = () => {
             if (this.state.showMergeCartsModal === true) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'mergeCartsTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'mergeCartsTitle'})}>
                         <div className="login__modal-form-item">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'mergeCartsConfirm')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="mergeCartsConfirm" />
                         </div>
                         <div className="login__modal-form-actions">
                             <div className="login__modal-form-action-item">
                                 <Button type="default"
                                         onClick={this.handleMergeCartsModalNoClick}
                                         disabled={this.isLoading()}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'no')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="no" />
                                 </Button>
                             </div>
                             <div className="login__modal-form-action-item">
                                 <Button type="primary"
                                         onClick={this.handleMergeCartsModalYesClick}
                                         disabled={this.isLoading()}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'yes')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="yes" />
                                 </Button>
                             </div>
                         </div>
@@ -256,9 +245,7 @@ class Login extends React.Component {
                 <div className="login__container">
                     <div className="login__header">
                         <Heading>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'login')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="loginHeader" />
                         </Heading>
                     </div>
                     {this.state.errorMessage ?
@@ -270,32 +257,26 @@ class Login extends React.Component {
                     }
                     <div className="login__form">
                         <div className="login__form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'email')}
+                            <InputField label={this.context.intl.formatMessage({id: 'email'})}
                                         onChange={this.handleFieldChange.bind(null, 'email')}
                                         onEnterPress={this.handleSubmitClick}
-                                        error={this.state.fieldErrors['email']}
-                                        value={this.state.email} />
+                                        error={this.state.fieldErrors['email']} />
                         </div>
                         <div className="login__form-item">
                             <InputField type="password"
-                                        label={intlStore.getMessage(intlData, 'password')}
+                                        label={this.context.intl.formatMessage({id: 'password'})}
                                         onChange={this.handleFieldChange.bind(null, 'password')}
                                         onEnterPress={this.handleSubmitClick}
-                                        error={this.state.fieldErrors['password']}
-                                        value={this.state.password} />
+                                        error={this.state.fieldErrors['password']} />
                         </div>
                         <div className="login__form-actions">
                             <Button type="primary" onClick={this.handleSubmitClick} disabled={this.isLoading()}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'submit')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="loginButton" />
                             </Button>
                         </div>
                         <div className="login__form-reset">
-                            <Link className="login__link" to="reset" params={routeParams}>
-                              <FormattedMessage
-                                  message={intlStore.getMessage(intlData, 'forgotPass')}
-                                  locales={intlStore.getCurrentLocale()} />
+                            <Link className="login__link" to={`/${this.context.intl.locale}/reset`} >
+                                <FormattedMessage id="forgotPassword" />
                             </Link>
                         </div>
                     </div>
diff --git a/src/components/pages/Account/Login.scss b/../simple-store/src/components/pages/Account/Login.scss
index ddfd103..ad05f30 100644
--- a/src/components/pages/Account/Login.scss
+++ b/../simple-store/src/components/pages/Account/Login.scss
@@ -49,6 +49,7 @@
 
 .login__link {
     text-decoration: none;
+    color: $color-body;
 
     &:hover {
         color: $color-primary;
diff --git a/src/components/pages/Account/Logout.intl.js b/../simple-store/src/components/pages/Account/Logout.intl.js
index 193e58c..a42cedc 100644
--- a/src/components/pages/Account/Logout.intl.js
+++ b/../simple-store/src/components/pages/Account/Logout.intl.js
@@ -1,8 +1,11 @@
 export default {
-    en: {
-        header: 'Logging out...'
+    "uk": {
+        "title": "Вихід"
+    },
+    "ru": {
+        "title": "Выход"
+    },
+    "en": {
+        "title": "Logout"
     },
-    es: {
-        header: 'Terminar sesión...'
-    }
 };
diff --git a/src/components/pages/Account/Logout.js b/../simple-store/src/components/pages/Account/Logout.js
index 79bd94c..f09d9e3 100644
--- a/src/components/pages/Account/Logout.js
+++ b/../simple-store/src/components/pages/Account/Logout.js
@@ -3,7 +3,10 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
@@ -23,16 +26,16 @@ import intlData from './Logout.intl';
 class Logout extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'header')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -52,7 +55,7 @@ class Logout extends React.Component {
         require('./Logout.scss');
 
         if (!this.context.getStore(AccountStore).getAccountDetails()) {
-            this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+            this.props.history.push(`/${this.context.intl.locale}`);
         } else {
             this.context.executeAction(logout);
         }
@@ -61,7 +64,7 @@ class Logout extends React.Component {
     componentWillReceiveProps(nextProps) {
 
         if (!nextProps._accountDetails) {
-            this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+            this.props.history.push(`/${this.context.intl.locale}`);
         }
 
         this.setState({
@@ -74,15 +77,12 @@ class Logout extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="logout">
                 <div className="logout__container">
                     <div className="logout__header">
                         <Text size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'header')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="logoutHeader" />
                         </Text>
                     </div>
                     <div className="logout__spinner">
diff --git a/src/components/pages/Account/Register.intl.js b/../simple-store/src/components/pages/Account/Register.intl.js
index b071277..98f5441 100644
--- a/src/components/pages/Account/Register.intl.js
+++ b/../simple-store/src/components/pages/Account/Register.intl.js
@@ -1,30 +1,11 @@
 export default {
-    en: {
-        email: 'Email',
-        fieldRequired: 'This field is required',
-        login: 'Login',
-        name: 'Full Name',
-        password: 'Password',
-        passwordConfirm: 'Confirm Password',
-        passwordMismatch: 'Passwords don\'t match',
-        submit: 'Register',
-        successModalContinue: 'OK',
-        successModalTitle: 'Account Created',
-        successModalBody: 'Your account will be activated after you follow the confirmation link in the email that will be sent shortly.',
-        title: 'Register Account'
+    "uk": {
+        "title": "Реєстрація"
+    },
+    "ru": {
+        "title": "Регистрация"
+    },
+    "en": {
+        "title": "Register Account"
     },
-    es: {
-        email: 'E-mail',
-        fieldRequired: 'Este campo es obligatorio',
-        login: 'Login',
-        name: 'Nombre Completo',
-        password: 'Contraseña',
-        passwordConfirm: 'Confirmar contraseña',
-        passwordMismatch: 'Contraseñas no coinciden',
-        submit: 'Registrarse',
-        successModalContinue: 'OK',
-        successModalTitle: 'Cuenta creada',
-        successModalBody: 'Para activar su cuenta, siga las instrucciones que serán enviadas a su email (Recuerde revisar su correo no deseado)',
-        title: 'Crear cuenta'
-    }
 };
diff --git a/src/components/pages/Account/Register.js b/../simple-store/src/components/pages/Account/Register.js
index f6e2f75..5559dc8 100644
--- a/src/components/pages/Account/Register.js
+++ b/../simple-store/src/components/pages/Account/Register.js
@@ -3,8 +3,11 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import { Link } from 'react-router-dom';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
@@ -29,16 +32,16 @@ import intlData from './Register.intl';
 class Register extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'title')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -92,25 +95,22 @@ class Register extends React.Component {
     };
 
     handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.name) {
-            fieldErrors.name = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.name = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.email) {
-            fieldErrors.email = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.email = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.password) {
-            fieldErrors.password = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.password = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.passwordConfirm) {
-            fieldErrors.passwordConfirm = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.passwordConfirm = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (this.state.password && this.state.passwordConfirm && this.state.password != this.state.passwordConfirm) {
-            fieldErrors.passwordConfirm = intlStore.getMessage(intlData, 'passwordMismatch');
+            fieldErrors.passwordConfirm = this.context.intl.formatMessage({id: 'passwordMismatch'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -124,31 +124,25 @@ class Register extends React.Component {
     };
 
     handleModalContinueClick = () => {
-        this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+        this.props.history.push(`/${this.context.intl.locale}`);
     };
 
     //*** Template ***//
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
-
         let successModal = () => {
             if (this.state.showSuccessModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'successModalTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'registerSuccessModalTitle'})}>
                         <div className="register__modal-body">
                             <Text size="medium">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'successModalBody')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="registerSuccessModalBody" />
                             </Text>
                         </div>
                         <div className="register__modal-footer">
                             <Button type="primary" onClick={this.handleModalContinueClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'successModalContinue')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="registerSuccessModalContinue" />
                             </Button>
                         </div>
                     </Modal>
@@ -163,43 +157,39 @@ class Register extends React.Component {
                 <div className="register__container">
                     <div className="register__header">
                         <Heading>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="registerHeader" />
                         </Heading>
                     </div>
                     <div className="register__form">
                         <div className="register__form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'name')}
+                            <InputField label={this.context.intl.formatMessage({id: 'fullName'})}
                                         onChange={this.handleFieldChange.bind(null, 'name')}
                                         onEnterPress={this.handleSubmitClick}
                                         error={this.state.fieldErrors['name']} />
                         </div>
                         <div className="register__form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'email')}
+                            <InputField label={this.context.intl.formatMessage({id: 'email'})}
                                         onChange={this.handleFieldChange.bind(null, 'email')}
                                         onEnterPress={this.handleSubmitClick}
                                         error={this.state.fieldErrors['email']} />
                         </div>
                         <div className="register__form-item">
                             <InputField type="password"
-                                        label={intlStore.getMessage(intlData, 'password')}
+                                        label={this.context.intl.formatMessage({id: 'password'})}
                                         onChange={this.handleFieldChange.bind(null, 'password')}
                                         onEnterPress={this.handleSubmitClick}
                                         error={this.state.fieldErrors['password']} />
                         </div>
                         <div className="register__form-item">
                             <InputField type="password"
-                                        label={intlStore.getMessage(intlData, 'passwordConfirm')}
+                                        label={this.context.intl.formatMessage({id: 'passwordConfirm'})}
                                         onChange={this.handleFieldChange.bind(null, 'passwordConfirm')}
                                         onEnterPress={this.handleSubmitClick}
                                         error={this.state.fieldErrors['passwordConfirm']} />
                         </div>
                         <div className="register__form-actions">
                             <Button type="primary" onClick={this.handleSubmitClick} disabled={this.state.loading}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'submit')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="registerButton" />
                             </Button>
                         </div>
                     </div>
diff --git a/src/components/pages/Account/RegisterConfirm.intl.js b/src/components/pages/Account/RegisterConfirm.intl.js
deleted file mode 100644
index 5e59725..0000000
--- a/src/components/pages/Account/RegisterConfirm.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        confirmingAccount: 'Confirming Account',
-        loggingIn: 'Logging in',
-        logoutFirst: 'In order to confirm an account you have to logout first'
-    },
-    es: {
-        confirmingAccount: 'Confirmar Cuenta',
-        loggingIn: 'Iniciando sesión',
-        logoutFirst: 'Para confirmar una cuenta es necesario que ingrese primero'
-    }
-};
diff --git a/src/components/pages/Account/RegisterConfirm.js b/../simple-store/src/components/pages/Account/RegisterConfirm.js
index 0210474..69573b0 100644
--- a/src/components/pages/Account/RegisterConfirm.js
+++ b/../simple-store/src/components/pages/Account/RegisterConfirm.js
@@ -3,11 +3,11 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
-import IntlStore from '../../../stores/Application/IntlStore';
 import RegisterStore from '../../../stores/Account/RegisterStore';
 
 import confirmAccount from '../../../actions/Account/confirmAccount';
@@ -16,18 +16,15 @@ import confirmAccount from '../../../actions/Account/confirmAccount';
 import Spinner from '../../common/indicators/Spinner';
 import Text from '../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './RegisterConfirm.intl';
-
 /**
  * Component
  */
 class RegisterConfirm extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -40,21 +37,21 @@ class RegisterConfirm extends React.Component {
         userError: this.context.getStore(AccountStore).getError(),
         errorMessage: undefined
     };
-    
+
     //*** Component Lifecycle ***//
-    
+
     componentDidMount() {
-        
+
         // Component styles
         require('./RegisterConfirm.scss');
 
         // a) User is logged in
         if (this.state.user) {
-            this.setState({errorMessage: this.context.getStore(IntlStore).getMessage(intlData, 'logoutFirst')});
+            this.setState({errorMessage: this.context.intl.formatMessage({id: 'logoutFirst'})});
         }
         // b) Trigger account confirmation using provided token
         else {
-            this.context.executeAction(confirmAccount, {token: this.props.params.token});
+            this.context.executeAction(confirmAccount, {token: this.props.match.params.token});
         }
     }
 
@@ -67,7 +64,7 @@ class RegisterConfirm extends React.Component {
 
         // Check for successful login
         if (!this.state.user && nextProps._user) {
-            this.context.router.transitionTo('account', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+            this.props.history.push(`/${this.context.intl.locale}/account`);
         }
 
         // Update state
@@ -83,7 +80,6 @@ class RegisterConfirm extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="register-confirm">
                 <div className="register-confirm__message">
@@ -95,15 +91,11 @@ class RegisterConfirm extends React.Component {
                         <div>
                             {this.state.userLoading ?
                                 <Text>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'loggingIn')}
-                                        locales={intlStore.getCurrentLocale()} />...
+                                    <FormattedMessage id="loggingIn" />...
                                 </Text>
                                 :
                                 <Text>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'confirmingAccount')}
-                                        locales={intlStore.getCurrentLocale()} />...
+                                    <FormattedMessage id="confirmingAccount" />...
                                 </Text>
                             }
                         </div>
diff --git a/src/components/pages/Account/Reset.intl.js b/../simple-store/src/components/pages/Account/Reset.intl.js
index 473b05e..81cafae 100644
--- a/src/components/pages/Account/Reset.intl.js
+++ b/../simple-store/src/components/pages/Account/Reset.intl.js
@@ -1,22 +1,11 @@
 export default {
-    en: {
-        email: 'Email',
-        fieldRequired: 'This field is required',
-        submit: 'Submit',
-        successModalBody: 'You will receive an email shortly with instructions in how to recover your password.',
-        successModalContinue: 'OK',
-        successModalTitle: 'Reset Requested',
-        title: 'Reset Password',
-        unknownError: 'Error. Please contact support'
+    "uk": {
+        "title": "Скинути пароль",
+    },
+    "ru": {
+        "title": "Сбросить пароль",
+    },
+    "en": {
+        "title": "Reset Password",
     },
-    es: {
-        email: 'E-Mail',
-        fieldRequired: 'Este campo es obligatorio',
-        submit: 'Enviar',
-        successModalBody: 'Usted recibirá un email en breve con las instrucciones para recuperar su contraseña.',
-        successModalContinue: 'OK',
-        successModalTitle: 'Pedido enviado',
-        title: 'Recuperar Constraseña',
-        unknownError: 'Error. Por favor contacte al servicio de soporte'
-    }
 };
diff --git a/src/components/pages/Account/Reset.js b/../simple-store/src/components/pages/Account/Reset.js
index 1c59883..b614959 100644
--- a/src/components/pages/Account/Reset.js
+++ b/../simple-store/src/components/pages/Account/Reset.js
@@ -3,7 +3,10 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import IntlStore from '../../../stores/Application/IntlStore';
@@ -27,16 +30,16 @@ import intlData from './Reset.intl';
 class Reset extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'title')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -73,7 +76,7 @@ class Reset extends React.Component {
                 this.setState({errorMessage: nextProps._error.message});
             } else {
                 this.setState({
-                    errorMessage: this.context.getStore(IntlStore).getMessage(intlData, 'unknownError')
+                    errorMessage: this.context.intl.formatMessage({id: 'unknownError'})
                 });
             }
         }
@@ -98,14 +101,11 @@ class Reset extends React.Component {
     };
 
     handleSubmitClick = () => {
-
-        let intlStore = this.context.getStore(IntlStore);
-
         this.setState({errorMessage: null});
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.email) {
-            fieldErrors.email = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.email = this.context.intl.formatMessage({ id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -115,7 +115,7 @@ class Reset extends React.Component {
     };
 
     handleModalContinueClick = () => {
-        this.context.router.transitionTo('homepage', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+        this.props.history.push(`/${this.context.intl.locale}`);
     };
 
     //*** Template ***//
@@ -125,23 +125,20 @@ class Reset extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
 
         let successModal = () => {
             if (this.state.showSuccessModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'successModalTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'resetSuccessModalTitle'})}>
                         <div className="reset__modal-body">
                             <Text size="medium">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'successModalBody')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetSuccessModalBody" />
                             </Text>
                         </div>
                         <div className="reset__modal-footer">
                             <Button type="primary" onClick={this.handleModalContinueClick}>
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'successModalContinue')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetSuccessModalContinue" />
                             </Button>
                         </div>
                     </Modal>
@@ -158,8 +155,7 @@ class Reset extends React.Component {
                 <div className="reset__container">
                     <div className="reset__header">
                         <Heading>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'title')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="resetHeader" />
                         </Heading>
                     </div>
                     {this.state.errorMessage ?
@@ -171,16 +167,14 @@ class Reset extends React.Component {
                     }
                     <div className="reset__form">
                         <div className="reset__form-item">
-                            <InputField label={intlStore.getMessage(intlData, 'email')}
+                            <InputField label={this.context.intl.formatMessage({id: 'email'})}
                                         onChange={this.handleFieldChange.bind(null, 'email')}
                                         onEnterPress={this.handleSubmitClick}
-                                        error={this.state.fieldErrors['email']}
-                                        value={this.state.email} />
+                                        error={this.state.fieldErrors['email']} />
                         </div>
                         <div className="reset__form-actions">
                             <Button type="primary" onClick={this.handleSubmitClick} disabled={this.state.loading}>
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'submit')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetButton" />
                             </Button>
                         </div>
                     </div>
diff --git a/src/components/pages/Account/ResetConfirm.intl.js b/../simple-store/src/components/pages/Account/ResetConfirm.intl.js
index 1890cb4..c856c8a 100644
--- a/src/components/pages/Account/ResetConfirm.intl.js
+++ b/../simple-store/src/components/pages/Account/ResetConfirm.intl.js
@@ -1,26 +1,11 @@
 export default {
-    en: {
-        fieldRequired: 'This field is required',
-        password: 'New Password',
-        passwordConfirm: 'Confirm Password',
-        passwordMismatch: 'Passwords don\'t match',
-        submit: 'Update',
-        successModalBody: 'To access your acount, login with your new password.',
-        successModalContinue: 'Login',
-        successModalTitle: 'Password Updated',
-        title: 'Change Password',
-        unknownError: 'Error. Please contact support'
+    "uk": {
+        "title": "Змінити пароль",
+    },
+    "ru": {
+        "title": "Сменить пароль",
+    },
+    "en": {
+        "title": "Change Password",
     },
-    es: {
-        fieldRequired: 'Este campo es obligatorio',
-        password: 'Contraseña nueva',
-        passwordConfirm: 'Confirmar Contraseña',
-        passwordMismatch: 'Contraseñas no coinciden',
-        submit: 'Actualizar',
-        successModalBody: 'Para acceder a su cuenta, ingrese con su contraseña nueva.',
-        successModalContinue: 'Login',
-        successModalTitle: 'Contraseña Actualizada',
-        title: 'Cambiar Contraseña',
-        unknownError: 'Error. Por favor contacte al servicio de soporte'
-    }
 };
diff --git a/src/components/pages/Account/ResetConfirm.js b/../simple-store/src/components/pages/Account/ResetConfirm.js
index d7443f3..c261d40 100644
--- a/src/components/pages/Account/ResetConfirm.js
+++ b/../simple-store/src/components/pages/Account/ResetConfirm.js
@@ -3,7 +3,10 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import IntlStore from '../../../stores/Application/IntlStore';
@@ -27,16 +30,16 @@ import intlData from './ResetConfirm.intl';
 class ResetConfirm extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'title')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -46,8 +49,8 @@ class ResetConfirm extends React.Component {
         loading: this.context.getStore(ResetStore).isLoading(),
         error: this.context.getStore(ResetStore).getError(),
 
-        password: undefined,
-        passwordConfirm: undefined,
+        password: '',
+        passwordConfirm: '',
         fieldErrors: {},
         errorMessage: undefined,
         showSuccessModal: false
@@ -77,7 +80,7 @@ class ResetConfirm extends React.Component {
                 this.setState({errorMessage: nextProps._error.message});
             } else {
                 this.setState({
-                    errorMessage: this.context.getStore(IntlStore).getMessage(intlData, 'unknownError')
+                    errorMessage: this.context.intl.formatMessage({id: 'unknownError'})
                 });
             }
         }
@@ -103,32 +106,30 @@ class ResetConfirm extends React.Component {
 
     handleSubmitClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
-
         this.setState({errorMessage: null});
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.password) {
-            fieldErrors.password = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.password = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.passwordConfirm) {
-            fieldErrors.passwordConfirm = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.passwordConfirm = this.context.intl.formatMessage({id: 'fieldRequired'});
         }
         if (this.state.password && this.state.passwordConfirm && this.state.password != this.state.passwordConfirm) {
-            fieldErrors.passwordConfirm = intlStore.getMessage(intlData, 'passwordMismatch');
+            fieldErrors.passwordConfirm = this.context.intl.formatMessage({id: 'passwordMismatch'});
         }
         this.setState({fieldErrors: fieldErrors});
 
         if (Object.keys(fieldErrors).length === 0) {
             this.context.executeAction(resetConfirm, {
-                token: this.props.params.token,
+                token: this.props.match.params.token,
                 password: this.state.password
             });
         }
     };
 
     handleModalContinueClick = () => {
-        this.context.router.transitionTo('login', {locale: this.context.getStore(IntlStore).getCurrentLocale()});
+        this.props.history.push(`/${this.context.intl.locale}/login`);
     };
 
     //*** Template ***//
@@ -138,23 +139,18 @@ class ResetConfirm extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-
         let successModal = () => {
             if (this.state.showSuccessModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'successModalTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'resetConfirmSuccessModalTitle'})}>
                         <div className="reset-confirm__modal-body">
                             <Text size="medium">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'successModalBody')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetConfirmSuccessModalBody" />
                             </Text>
                         </div>
                         <div className="reset-confirm__modal-footer">
                             <Button type="primary" onClick={this.handleModalContinueClick}>
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'successModalContinue')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetConfirmSuccessModalContinue" />
                             </Button>
                         </div>
                     </Modal>
@@ -171,8 +167,7 @@ class ResetConfirm extends React.Component {
                 <div className="reset-confirm__container">
                     <div className="reset-confirm__header">
                         <Heading>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'title')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="resetConfirmHeader" />
                         </Heading>
                     </div>
                     {this.state.errorMessage ?
@@ -185,24 +180,23 @@ class ResetConfirm extends React.Component {
                     <div className="reset-confirm__form">
                         <div className="reset-confirm__form-item">
                             <InputField type="password"
-                                        label={intlStore.getMessage(intlData, 'password')}
+                                        label={this.context.intl.formatMessage({id: 'password'})}
                                         onChange={this.handleFieldChange.bind(null, 'password')}
+                                        value={this.state.password}
                                         onEnterPress={this.handleSubmitClick}
-                                        error={this.state.fieldErrors['password']}
-                                        value={this.state.password} />
+                                        error={this.state.fieldErrors['password']} />
                         </div>
                         <div className="reset-confirm__form-item">
                             <InputField type="password"
-                                        label={intlStore.getMessage(intlData, 'passwordConfirm')}
+                                        label={this.context.intl.formatMessage({id: 'passwordConfirm'})}
                                         onChange={this.handleFieldChange.bind(null, 'passwordConfirm')}
+                                        value={this.state.passwordConfirm}
                                         onEnterPress={this.handleSubmitClick}
-                                        error={this.state.fieldErrors['passwordConfirm']}
-                                        value={this.state.passwordConfirm} />
+                                        error={this.state.fieldErrors['passwordConfirm']} />
                         </div>
                         <div className="reset-confirm__form-actions">
                             <Button type="primary" onClick={this.handleSubmitClick} disabled={this.state.loading}>
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'submit')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="resetButton" />
                             </Button>
                         </div>
                     </div>
diff --git a/src/components/pages/Admin/Admin.intl.js b/src/components/pages/Admin/Admin.intl.js
deleted file mode 100644
index a1b4a6c..0000000
--- a/src/components/pages/Admin/Admin.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        collections: 'Collections',
-        contents: 'Contents',
-        dashboard: 'Dashboard',
-        orders: 'Orders',
-        products: 'Products',
-        customers: 'Customers'
-    },
-    es: {
-        collections: 'Colecciones',
-        contents: 'Contenido',
-        dashboard: 'Dashboard',
-        orders: 'Pedidos',
-        products: 'Productos',
-        customers: 'Usuarios'
-    }
-};
diff --git a/src/components/pages/Admin/Admin.js b/../simple-store/src/components/pages/Admin/Admin.js
index 08717f9..b7965c0 100644
--- a/src/components/pages/Admin/Admin.js
+++ b/../simple-store/src/components/pages/Admin/Admin.js
@@ -2,7 +2,9 @@
  * Imports
  */
 import React from 'react';
-import {RouteHandler} from 'react-router';
+import { renderRoutes } from 'react-router-config';
+import { injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import config from '../../../config';
 
@@ -15,24 +17,22 @@ import AuthenticatedComponent from '../../core/AuthenticatedComponent';
 import Heading from '../../common/typography/Heading';
 import MainNavigation from '../../common/navigation/MainNavigation';
 
-// Translation data for this component
-import intlData from './Admin.intl';
-
 /**
  * Component
  */
 class Admin extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: `[ADMIN] ${config.app.title}`
+            title: `[ADMIN] ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -53,17 +53,17 @@ class Admin extends React.Component {
     //*** Template ***//
 
     render() {
-
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         // Links
         const links = [
-            {name: intlStore.getMessage(intlData, 'dashboard'), to: 'adm-dashboard'},
-            {name: intlStore.getMessage(intlData, 'orders'), to: 'adm-orders'},
-            {name: intlStore.getMessage(intlData, 'customers'), to: 'adm-customers'},
-            {name: intlStore.getMessage(intlData, 'collections'), to: 'adm-collections'},
-            {name: intlStore.getMessage(intlData, 'products'), to: 'adm-products'},
-            {name: intlStore.getMessage(intlData, 'contents'), to: 'adm-contents'}
+            {name: intl.formatMessage({id: 'dashboard'}), to: `/${locale}/adm`},
+            {name: intl.formatMessage({id: 'orders'}), to:  `/${locale}/adm/orders`},
+            {name: intl.formatMessage({id: 'customers'}), to:  `/${locale}/adm/customers`},
+            {name: intl.formatMessage({id: 'collections'}), to:  `/${locale}/adm/collections`},
+            {name: intl.formatMessage({id: 'products'}), to:  `/${locale}/adm/products`},
+            {name: intl.formatMessage({id: 'contents'}), to:  `/${locale}/adm/contents`}
         ];
 
         // Return
@@ -78,7 +78,7 @@ class Admin extends React.Component {
                     </div>
                 </div>
                 <div className="admin-container">
-                    <RouteHandler />
+                    {renderRoutes(this.props.route.routes)}
                 </div>
             </div>
         );
diff --git a/src/components/pages/Admin/Collections/AdminCollections.intl.js b/src/components/pages/Admin/Collections/AdminCollections.intl.js
deleted file mode 100644
index 474bb3a..0000000
--- a/src/components/pages/Admin/Collections/AdminCollections.intl.js
+++ /dev/null
@@ -1,34 +0,0 @@
-export default {
-    en: {
-        category: 'Category',
-        collection: 'Collection',
-        enabledHeading: 'Enabled',
-        homepage: 'Homepage',
-        homepageFeatured: 'Homepage Featured',
-        mainNavigation: 'Main Navigation',
-        nameHeading: 'Name',
-        new: 'New',
-        newModalTitle: 'Add new collection',
-        parentHeading: 'Parent Collection',
-        tagsHeading: 'Tags',
-        title: 'Collections',
-        translationsHeading: 'Translations',
-        noResults: 'No collections yet'
-    },
-    es: {
-        category: 'Categoría',
-        collection: 'Colecciones',
-        enabledHeading: 'Activada',
-        homepage: 'Página Principal',
-        homepageFeatured: 'Destacados en Página Principal',
-        mainNavigation: 'Menú Principal',
-        nameHeading: 'Nombre',
-        new: 'Nuevo',
-        noResults: 'No existen Colecciones momentaneamente',
-        newModalTitle: 'Crear nueva colección',
-        parentHeading: 'Colección padre',
-        tagsHeading: 'Tags',
-        title: 'Colecciones',
-        translationsHeading: 'Traducciones'
-    }
-};
diff --git a/src/components/pages/Admin/Collections/AdminCollections.js b/../simple-store/src/components/pages/Admin/Collections/AdminCollections.js
index d21da12..4eb35e9 100644
--- a/src/components/pages/Admin/Collections/AdminCollections.js
+++ b/../simple-store/src/components/pages/Admin/Collections/AdminCollections.js
@@ -3,14 +3,14 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import CollectionsAddStore from '../../../../stores/Collections/CollectionsAddStore';
 import CollectionsListStore from '../../../../stores/Collections/CollectionsListStore';
 import CollectionsStore from '../../../../stores/Collections/CollectionsStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 import addCollection from '../../../../actions/Admin/addCollection';
 import fetchCollections from '../../../../actions/Collections/fetchCollections';
@@ -26,24 +26,21 @@ import Text from '../../../common/typography/Text';
 
 import AdminCollectionsAddForm from './AdminCollectionsAddForm';
 
-// Translation data for this component
-import intlData from './AdminCollections.intl';
-
 /**
  * Component
  */
 class AdminCollections extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        context.executeAction(fetchCollections, {}, done);
+        return context.executeAction(fetchCollections, {}, done);
     };
 
     //*** Initial State ***//
@@ -68,11 +65,7 @@ class AdminCollections extends React.Component {
         // collection edit page
         if (this.state.addCollection.loading === true
             && nextProps._addCollection.loading === false && !nextProps._addCollection.error) {
-            let params = {
-                locale: this.context.getStore(IntlStore).getCurrentLocale(),
-                collectionId: nextProps._addCollection.collection.id
-            };
-            this.context.router.transitionTo('adm-collection-edit', params);
+            this.props.history.push(`/${this.context.intl.locale}/adm/collections/${nextProps._addCollection.collection.id}`);
         }
 
         // Update state
@@ -103,39 +96,28 @@ class AdminCollections extends React.Component {
         //
         // Helper methods & variables
         //
-
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let headings = [
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'nameHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'parentHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'tagsHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'enabledHeading')}
-                locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="collectionNameHeading" />,
+            <FormattedMessage id="collectionParentHeading" />,
+            <FormattedMessage id="tagsHeading" />,
+            <FormattedMessage id="enabledHeading" />
         ];
 
         let rows = this.state.collections.map((collection) => {
             return {
                 data: [
                     <span className="admin-collections__link">
-                        <Link to="adm-collection-edit" params={Object.assign({collectionId: collection.id}, routeParams)}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(collection.name)}
-                                locales={intlStore.getCurrentLocale()} />
+                        <Link to={`/${locale}/adm/collections/${collection.id}`}>
+                            {collection.name[locale]}
                         </Link>
                     </span>,
                     <Text size="medium">
                         {collection.parentId ?
                             <span>
-                                {intlStore.getMessage(this.context.getStore(CollectionsStore).getCollection(collection.parentId).name)}
+                                {this.context.getStore(CollectionsStore).getCollection(collection.parentId).name[locale]}
                             </span>
                             :
                             <span>-</span>
@@ -147,9 +129,7 @@ class AdminCollections extends React.Component {
                                 return (
                                     <div key={idx} className="admin-collections__label">
                                         <Label>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, section)}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id={section} />
                                         </Label>
                                     </div>
                                 );
@@ -164,7 +144,7 @@ class AdminCollections extends React.Component {
         let newCollectionModal = () => {
             if (this.state.showNewCollectionModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
+                    <Modal title={intl.formatMessage({id: 'collectionNewModalTitle'})}
                            onCloseClick={this.handleNewCollectionCloseClick}>
                         <AdminCollectionsAddForm
                             loading={this.state.addCollection.loading}
@@ -185,33 +165,21 @@ class AdminCollections extends React.Component {
                 <div className="admin-collections__header">
                     <div className="admin-collections__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminCollectionsHeader" />
                         </Heading>
                     </div>
                     <div className="admin-collections__toolbar">
                         <div className="admin-collections__add-button">
                             <Button type="primary" onClick={this.handleNewCollectionClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'new')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="newButton" />
                             </Button>
                         </div>
                     </div>
                 </div>
-                {!this.state.loading && this.state.collections.length === 0 ?
-                    <div className="admin-collections__no-results">
-                        <Text size="small">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'noResults')}
-                                              locales={intlStore.getCurrentLocale()} />
-                        </Text>
-                    </div>
-                    :
-                    <div className="admin-collections__list">
-                        <Table headings={headings} rows={rows} />
-                    </div>
-                }
+
+                <div className="admin-collections__list">
+                    <Table headings={headings} rows={rows} />
+                </div>
             </div>
         );
     }
diff --git a/src/components/pages/Admin/Collections/AdminCollections.scss b/../simple-store/src/components/pages/Admin/Collections/AdminCollections.scss
index 1a2181d..94842bb 100644
--- a/src/components/pages/Admin/Collections/AdminCollections.scss
+++ b/../simple-store/src/components/pages/Admin/Collections/AdminCollections.scss
@@ -52,10 +52,3 @@
         margin-left: 5px;
     }
 }
-
-.admin-collections__no-results {
-    margin-top: 30px;
-    padding: 10px;
-    background-color: $color-secondary;
-    border-radius: 4px;
-}
diff --git a/src/components/pages/Admin/Collections/AdminCollectionsAddForm.intl.js b/src/components/pages/Admin/Collections/AdminCollectionsAddForm.intl.js
deleted file mode 100644
index 8855f18..0000000
--- a/src/components/pages/Admin/Collections/AdminCollectionsAddForm.intl.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default {
-    en: {
-        add: 'Add',
-        cancel: 'Cancel',
-        category: 'Category',
-        collection: 'Collection',
-        fieldRequired: 'This field is required',
-        name: 'Name',
-        type: 'Type'
-    },
-    es: {
-        add: 'Agregar',
-        cancel: 'Cancelar',
-        category: 'Categoría',
-        collection: 'Colección',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre',
-        type: 'Tipo'
-    }
-};
diff --git a/src/components/pages/Admin/Collections/AdminCollectionsAddForm.js b/../simple-store/src/components/pages/Admin/Collections/AdminCollectionsAddForm.js
index abf0cc6..1fa93ee 100644
--- a/src/components/pages/Admin/Collections/AdminCollectionsAddForm.js
+++ b/../simple-store/src/components/pages/Admin/Collections/AdminCollectionsAddForm.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import InputField from '../../../common/forms/InputField';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminCollectionsAddForm.intl';
-
 // Instantiate debugger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,13 +19,14 @@ let debug = require('debug')('tienda765');
 class AdminCollectionsAddForm extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
 
     state = {
-        name: {en: '', es: ''},
+        name: {uk: '', ru: '', en: ''},
         tags: [],
         fieldErrors: {}
     };
@@ -52,18 +48,21 @@ class AdminCollectionsAddForm extends React.Component {
     };
 
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (this.state.tags.indexOf('category') === -1 && this.state.tags.indexOf('collection') === -1) {
-            fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.type = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.en) {
-            fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.uk) {
+            fieldErrors.nameUA = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.es) {
-            fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.ru) {
+            fieldErrors.nameRU = intl.formatMessage({id: 'fieldRequired'});
+        }
+        if (!this.state.name.en) {
+            fieldErrors.nameEN = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -87,11 +86,12 @@ class AdminCollectionsAddForm extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let collectionTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'category'), value: 'category'},
-            {name: intlStore.getMessage(intlData, 'collection'), value: 'collection'}
+            {name: intl.formatMessage({id: 'category'}), value: 'category'},
+            {name: intl.formatMessage({id: 'collection'}), value: 'collection'}
         ];
 
         let fieldError = (field) => {
@@ -104,35 +104,36 @@ class AdminCollectionsAddForm extends React.Component {
         return (
             <div className="admin-collections-add-form">
                 <div className="admin-collections-add-form__item">
-                    <Select label={intlStore.getMessage(intlData, 'type')}
+                    <Select label={intl.formatMessage({id: 'type'})}
                             placeholder
                             options={collectionTypeOptions}
                             onChange={this.handleTypeChange}
                             error={fieldError('type')} />
                 </div>
                 <div className="admin-collections-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
-                                onChange={this.handleNameChange.bind(null, 'en')}
-                                error={fieldError('nameEN')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (UA)'}
+                                onChange={this.handleNameChange.bind(null, 'uk')}
+                                error={fieldError('nameUA')} />
+                </div>
+                <div className="admin-collections-add-form__item">
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (RU)'}
+                                onChange={this.handleNameChange.bind(null, 'ru')}
+                                error={fieldError('nameRU')} />
                 </div>
                 <div className="admin-collections-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                onChange={this.handleNameChange.bind(null, 'es')}
-                                error={fieldError('nameES')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (EN)'}
+                                onChange={this.handleNameChange.bind(null, 'en')}
+                                error={fieldError('nameEN')} />
                 </div>
                 <div className="admin-collections-add-form__actions">
                     <div className="admin-collections-add-form__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-collections-add-form__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'add')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="addButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Collections/AdminCollectionsEdit.intl.js b/src/components/pages/Admin/Collections/AdminCollectionsEdit.intl.js
deleted file mode 100644
index 472603a..0000000
--- a/src/components/pages/Admin/Collections/AdminCollectionsEdit.intl.js
+++ /dev/null
@@ -1,40 +0,0 @@
-export default {
-    en: {
-        back: 'Back',
-        category: 'Category',
-        collection: 'Collection',
-        delete: 'Delete',
-        description: 'Description',
-        enabled: 'Enabled',
-        fieldRequired: 'This field is required',
-        homepage: 'Homepage',
-        homepageFeatured: 'Homepage Featured',
-        mainNavigation: 'Main Navigation',
-        name: 'Name',
-        parent: 'Parent Collection',
-        save: 'Save',
-        sections: 'Featured in Sections',
-        title: 'Edit Collection',
-        type: 'Type',
-        deleteCollectionModalTitle: 'You confirme the deletion?',
-    },
-    es: {
-        back: 'Volver',
-        category: 'Categoría',
-        collection: 'Colección',
-        delete: 'Remover',
-        description: 'Descripción',
-        enabled: 'Activada',
-        fieldRequired: 'Este campo es obligatorio',
-        homepage: 'Página Principal',
-        homepageFeatured: 'Destacados de Página Principal',
-        mainNavigation: 'Menu Principal',
-        name: 'Nombre',
-        parent: 'Colección Base',
-        save: 'Guardar',
-        sections: 'Destacados en Secciones',
-        title: 'Editar Colección',
-        type: 'Tipo',
-        deleteCollectionModalTitle: 'Desea confirmar la eliminacion?',
-    }
-};
diff --git a/src/components/pages/Admin/Collections/AdminCollectionsEdit.js b/../simple-store/src/components/pages/Admin/Collections/AdminCollectionsEdit.js
index bc0c2f2..de52a2b 100644
--- a/src/components/pages/Admin/Collections/AdminCollectionsEdit.js
+++ b/../simple-store/src/components/pages/Admin/Collections/AdminCollectionsEdit.js
@@ -3,22 +3,17 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import CollectionDetailsStore from '../../../../stores/Collections/CollectionDetailsStore';
 import CollectionsStore from '../../../../stores/Collections/CollectionsStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 import fetchCollectionAndCheckIfFound from '../../../../actions/Collections/fetchCollectionAndCheckIfFound';
 import updateCollection from '../../../../actions/Admin/updateCollection';
 
-// Delete
-import DeleteHandler from '../../../common/deleteHandler/DeleteHandler';
-import deleteCollection from '../../../../actions/Admin/deleteCollection';
-import Modal from '../../../common/modals/Modal';
-
 // Required components
 import Button from '../../../common/buttons/Button';
 import Checkbox from '../../../common/forms/Checkbox';
@@ -32,11 +27,9 @@ import Textarea from '../../../common/forms/Textarea';
 import TreeMenu from '../../../common/navigation/TreeMenu';
 import ToggleSwitch from '../../../common/buttons/ToggleSwitch';
 
-// Translation data for this component
-import intlData from './AdminCollectionsEdit.intl';
 
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -44,14 +37,15 @@ let debug = require('debug')('tienda765');
 class AdminCollectionsEdit extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        context.executeAction(fetchCollectionAndCheckIfFound, params.collectionId, done);
+        return context.executeAction(fetchCollectionAndCheckIfFound, params.collectionId, done);
     };
 
     //*** Initial State ***//
@@ -61,8 +55,7 @@ class AdminCollectionsEdit extends React.Component {
         error: this.context.getStore(CollectionDetailsStore).getError(),
         loading: this.context.getStore(CollectionDetailsStore).isLoading(),
         collectionsTree: this.context.getStore(CollectionsStore).getCollectionsTree(),
-        fieldErrors: {},
-        showDeleteCollectionModal: false
+        fieldErrors: {}
     };
 
     //*** Component Lifecycle ***//
@@ -144,16 +137,19 @@ class AdminCollectionsEdit extends React.Component {
 
     handleSaveClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         // Client-side validations
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
-        if (!this.state.collection.name.en) {
-            fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.collection.name.uk) {
+            fieldErrors.nameUA = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.collection.name.es) {
-            fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.collection.name.ru) {
+            fieldErrors.nameRU = intl.formatMessage({id: 'fieldRequired'});
+        }
+        if (!this.state.collection.name.en) {
+            fieldErrors.nameEN = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -175,21 +171,6 @@ class AdminCollectionsEdit extends React.Component {
         }
     };
 
-    // Delete colecction Modal
-
-    handleDeleteCollectionModalClick = () => {
-        this.setState({showDeleteCollectionModal: true});
-    };
-
-    handleDeleteCancelClick = () => {
-        this.setState({showDeleteCollectionModal: false});
-    };
-
-    handleDeleteCollectionClick = () => {
-        this.context.executeAction(deleteCollection, this.state.collection.id);
-        this.setState({showDeleteCollectionModal: false});
-    };
-
     //*** Template ***//
 
     render() {
@@ -197,13 +178,12 @@ class AdminCollectionsEdit extends React.Component {
         //
         // Helper methods & variables
         //
-
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let collectionTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'category'), value: 'category'},
-            {name: intlStore.getMessage(intlData, 'collection'), value: 'collection'}
+            {name: intl.formatMessage({id: 'category'}), value: 'category'},
+            {name: intl.formatMessage({id: 'collection'}), value: 'collection'}
         ];
 
         let selectedOption;
@@ -220,58 +200,31 @@ class AdminCollectionsEdit extends React.Component {
             return this.state.fieldErrors[field];
         };
 
-        /// Delete Modal
-        let deleteCollectionModal = () => {
-            if (this.state.showDeleteCollectionModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'deleteCollectionModalTitle')}>
-                    <DeleteHandler onCancelClick={this.handleDeleteCancelClick}
-                                         onSubmitClick={this.handleDeleteCollectionClick} />
-                    </Modal>
-                );
-            }
-        };
-
-
         //
         // Return
         //
         return (
             <div className="admin-collections-edit">
-            {deleteCollectionModal()}
                 <div className="admin-collections-edit__header">
                     <div className="admin-collections-edit__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="editCollectionsHeader" />
                         </Heading>
                     </div>
                     {this.state.collection ?
                         <div className="admin-collections-edit__toolbar">
                             <div className="admin-collections-edit__toolbar-item">
-                                <Link to="adm-collections" params={routeParams}>
+                                <Link to={`/${locale}/adm/collections`} >
                                     <Button type="default" disabled={this.state.loading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'back')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="backButton" />
                                     </Button>
                                 </Link>
                             </div>
                             <div className="admin-collections-edit__toolbar-item">
                                 <Button type="primary" onClick={this.handleSaveClick} disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'save')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="saveButton" />
                                 </Button>
                             </div>
-                            <div className="admin-collections-edit__toolbar-item">
-                              <Button type="primary" onClick={this.handleDeleteCollectionModalClick} disabled={this.state.loading}>
-                                  <FormattedMessage
-                                      message={intlStore.getMessage(intlData, 'delete')}
-                                      locales={intlStore.getCurrentLocale()} />
-                              </Button>
-                          </div>
                         </div>
                         :
                         null
@@ -283,12 +236,12 @@ class AdminCollectionsEdit extends React.Component {
                     <div className="admin-collections-edit__form">
                         <div className="admin-collections-edit__left-column">
                             <div className="admin-collection-edit__form-item">
-                                <ToggleSwitch label={intlStore.getMessage(intlData, 'enabled')}
+                                <ToggleSwitch label={intl.formatMessage({id: 'enabledHeading'})}
                                               enabled={this.state.collection.enabled === true}
                                               onChange={this.handleEnabledChange} />
                             </div>
                             <div className="admin-collection-edit__form-item">
-                                <Select label={intlStore.getMessage(intlData, 'type')}
+                                <Select label={intl.formatMessage({id: 'type'})}
                                         placeholder
                                         options={collectionTypeOptions}
                                         onChange={this.handleTypeChange}
@@ -298,49 +251,64 @@ class AdminCollectionsEdit extends React.Component {
                                 <div className="admin-collection-edit__checkbox-inline">
                                     <div className="admin-collection-edit__checkbox-inline-label">
                                         <FormLabel>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'sections')}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="sections" />
                                         </FormLabel>
                                     </div>
                                     <div className="admin-collection-edit__checkbox-inline-items">
-                                        <Checkbox label={intlStore.getMessage(intlData, 'mainNavigation')}
+                                        <Checkbox label={intl.formatMessage({id: 'mainNavigation'})}
                                                   onChange={this.handleSectionChange.bind(null, 'mainNavigation')}
                                                   checked={this.state.collection.tags.indexOf('mainNavigation') !== -1} />
-                                        <Checkbox label={intlStore.getMessage(intlData, 'homepage')}
+                                        <Checkbox label={intl.formatMessage({id: 'homepageCheckbox'})}
                                                   onChange={this.handleSectionChange.bind(null, 'homepage')}
                                                   checked={this.state.collection.tags.indexOf('homepage') !== -1} />
+                                        <Checkbox label={intl.formatMessage({id: 'homepageFeatured'})}
+                                                  onChange={this.handleSectionChange.bind(null, 'homepageFeatured')}
+                                                  checked={this.state.collection.tags.indexOf('homepageFeatured') !== -1} />
                                     </div>
                                 </div>
                             </div>
                             <div className="admin-collection-edit__form-item">
-                                <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (UA)'}
+                                            onChange={this.handleNameChange.bind(null, 'uk')}
+                                            value={this.state.collection.name.uk}
+                                            error={fieldError('nameUA')} />
+                            </div>
+                            <div className="admin-collection-edit__form-item">
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (RU)'}
+                                            onChange={this.handleNameChange.bind(null, 'ru')}
+                                            value={this.state.collection.name.ru}
+                                            error={fieldError('nameRU')} />
+                            </div>
+                            <div className="admin-collection-edit__form-item">
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (EN)'}
                                             onChange={this.handleNameChange.bind(null, 'en')}
                                             value={this.state.collection.name.en}
                                             error={fieldError('nameEN')} />
                             </div>
                             <div className="admin-collection-edit__form-item">
-                                <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                            onChange={this.handleNameChange.bind(null, 'es')}
-                                            value={this.state.collection.name.es}
-                                            error={fieldError('nameES')} />
+                                    <Textarea label={intl.formatMessage({id: 'description'}) + ' (UA)'}
+                                              rows="5"
+                                              onChange={this.handleIntlFieldChange.bind(null, 'description', 'uk')}
+                                              value={this.state.collection.description ? this.state.collection.description.uk : ''}
+                                              error={fieldError('description.uk')} />
                             </div>
                             <div className="admin-collection-edit__form-item">
-                                    <Textarea label={intlStore.getMessage(intlData, 'description') + ' (EN)'}
+                                    <Textarea label={intl.formatMessage({id: 'description'}) + ' (RU)'}
                                               rows="5"
-                                              onChange={this.handleIntlFieldChange.bind(null, 'description', 'en')}
-                                              value={this.state.collection.description ? this.state.collection.description.en : null}
-                                              error={fieldError('description.en')} />
+                                              onChange={this.handleIntlFieldChange.bind(null, 'description', 'ru')}
+                                              value={this.state.collection.description ? this.state.collection.description.ru : ''}
+                                              error={fieldError('description.ru')} />
                             </div>
                             <div className="admin-collection-edit__form-item">
-                                    <Textarea label={intlStore.getMessage(intlData, 'description') + ' (ES)'}
+                                    <Textarea label={intl.formatMessage({id: 'description'}) + ' (EN)'}
                                               rows="5"
-                                              onChange={this.handleIntlFieldChange.bind(null, 'description', 'es')}
-                                              value={this.state.collection.description ? this.state.collection.description.es : null}
-                                              error={fieldError('description.es')} />
+                                              onChange={this.handleIntlFieldChange.bind(null, 'description', 'en')}
+                                              value={this.state.collection.description ? this.state.collection.description.en : ''}
+                                              error={fieldError('description.en')} />
                             </div>
                             <div className="admin-collection-edit__form-item">
                                 <ImageLibraryManager images={this.state.collection.images}
+                                                     resource="collections"
                                                      onChange={this.handleImageLibraryChange} />
                             </div>
                         </div>
@@ -349,9 +317,7 @@ class AdminCollectionsEdit extends React.Component {
                                       selected={this.state.collection.parentId}
                                       self={this.state.collection.id}
                                       onClick={this.handleParentCollectionChange}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'parent')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="parentCollection" />
                             </TreeMenu>
                         </div>
                     </div>
diff --git a/src/components/pages/Admin/Contents/AdminContents.intl.js b/src/components/pages/Admin/Contents/AdminContents.intl.js
deleted file mode 100644
index 2eb97c4..0000000
--- a/src/components/pages/Admin/Contents/AdminContents.intl.js
+++ /dev/null
@@ -1,30 +0,0 @@
-export default {
-    en: {
-        article: 'Article',
-        banner: 'Banner',
-        enabledHeading: 'Enabled',
-        homepage: 'Homepage',
-        nameHeading: 'Name',
-        new: 'New',
-        newModalTitle: 'Add new content',
-        noType: 'Not Set',
-        productPage: 'Product Page',
-        tagsHeading: 'Tags',
-        title: 'Contents',
-        typeHeading: 'Type'
-    },
-    es: {
-        article: 'Artículo',
-        banner: 'Banner',
-        enabledHeading: 'Activar',
-        homepage: 'Página Principal',
-        nameHeading: 'Nombre',
-        new: 'Nuevo',
-        newModalTitle: 'Crear nuevo contenido',
-        noType: 'No Definido',
-        productPage: 'Página de Productos',
-        tagsHeading: 'Tags',
-        title: 'Contenidos',
-        typeHeading: 'Tipo'
-    }
-};
diff --git a/src/components/pages/Admin/Contents/AdminContents.js b/../simple-store/src/components/pages/Admin/Contents/AdminContents.js
index 18c72ce..a291286 100644
--- a/src/components/pages/Admin/Contents/AdminContents.js
+++ b/../simple-store/src/components/pages/Admin/Contents/AdminContents.js
@@ -3,13 +3,13 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import ContentsAddStore from '../../../../stores/Contents/ContentsAddStore';
 import ContentsListStore from '../../../../stores/Contents/ContentsListStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 import addContent from '../../../../actions/Admin/addContent';
 import fetchContents from '../../../../actions/Contents/fetchContents';
@@ -26,18 +26,15 @@ import Text from '../../../common/typography/Text';
 
 import AdminContentsAddForm from './AdminContentsAddForm';
 
-// Translation data for this component
-import intlData from './AdminContents.intl';
-
 /**
  * Component
  */
 class AdminContents extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -66,11 +63,8 @@ class AdminContents extends React.Component {
         // content edit page
         if (this.state.addContent.loading === true
             && nextProps._addContent.loading === false && !nextProps._addContent.error) {
-            let params = {
-                locale: this.context.getStore(IntlStore).getCurrentLocale(),
-                contentId: nextProps._addContent.content.id
-            };
-            this.context.router.transitionTo('adm-content-edit', params);
+            this.props.history.push(`/${this.context.intl.locale}/adm/contents/${nextProps._addContent.content.id}`);
+
         }
 
         // Update state
@@ -102,13 +96,12 @@ class AdminContents extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         let newContentModal = () => {
             if (this.state.showNewContentModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
+                    <Modal title={this.context.intl.formatMessage({id: 'newContentModalTitle'})}
                            onCloseClick={this.handleNewContentCloseClick}>
                         <AdminContentsAddForm
                             loading={this.state.addContent.loading}
@@ -120,14 +113,10 @@ class AdminContents extends React.Component {
         };
 
         let headings = [
-            <FormattedMessage message={intlStore.getMessage(intlData, 'typeHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'nameHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'tagsHeading')}
-                              locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage message={intlStore.getMessage(intlData, 'enabledHeading')}
-                              locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="typeHeading" />,
+            <FormattedMessage id="nameHeading" />,
+            <FormattedMessage id="tagsHeading" />,
+            <FormattedMessage id="enabledHeading"/>
         ];
 
         let rows = this.state.contents.map(function (content) {
@@ -136,20 +125,17 @@ class AdminContents extends React.Component {
                     <Text size="medium">
                         {content.type ?
                             <Label>
-                                <FormattedMessage message={intlStore.getMessage(intlData, content.type)}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id={content.type} />
                             </Label>
                             :
                             <Label type="error">
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'noType')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="noType" />
                             </Label>
                         }
                     </Text>,
                     <span className="admin-contents__link">
-                        <Link to="adm-content-edit" params={Object.assign({contentId: content.id}, routeParams)}>
-                            <FormattedMessage message={intlStore.getMessage(content.name)}
-                                              locales={intlStore.getCurrentLocale()} />
+                        <Link to={`/${locale}/adm/contents/${content.id}`} >
+                            {content.name[locale]}
                         </Link>
                     </span>,
                     <div className="admin-contents__labels">
@@ -157,8 +143,7 @@ class AdminContents extends React.Component {
                             return (
                                 <div key={idx} className="admin-contents__tag">
                                     <Label>
-                                        <FormattedMessage message={intlStore.getMessage(intlData, tag)}
-                                                          locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id={tag} />
                                     </Label>
                                 </div>
                             );
@@ -179,17 +164,13 @@ class AdminContents extends React.Component {
                 <div className="admin-contents__header">
                     <div className="admin-contents__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminContentsHeader" />
                         </Heading>
                     </div>
                     <div className="admin-contents__toolbar">
                         <div className="admin-contents__add-button">
                             <Button type="primary" onClick={this.handleNewContentClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'new')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="newButton" />
                             </Button>
                         </div>
                     </div>
diff --git a/src/components/pages/Admin/Contents/AdminContentsAddForm.intl.js b/src/components/pages/Admin/Contents/AdminContentsAddForm.intl.js
deleted file mode 100644
index 89bb87a..0000000
--- a/src/components/pages/Admin/Contents/AdminContentsAddForm.intl.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default {
-    en: {
-        add: 'Add',
-        article: 'Article',
-        banner: 'Banner',
-        cancel: 'Cancel',
-        fieldRequired: 'This field is required',
-        name: 'Name',
-        type: 'Type'
-    },
-    es: {
-        add: 'Adicionar',
-        article: 'Artículo',
-        banner: 'Banner',
-        cancel: 'Cancelar',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre',
-        type: 'Tipo'
-    }
-};
diff --git a/src/components/pages/Admin/Contents/AdminContentsAddForm.js b/../simple-store/src/components/pages/Admin/Contents/AdminContentsAddForm.js
index 92ded3a..1d4e83e 100644
--- a/src/components/pages/Admin/Contents/AdminContentsAddForm.js
+++ b/../simple-store/src/components/pages/Admin/Contents/AdminContentsAddForm.js
@@ -2,21 +2,17 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import InputField from '../../../common/forms/InputField';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminContentsAddForm.intl';
-
 // Instantiate debugger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,13 +20,14 @@ let debug = require('debug')('tienda765');
 class AdminContentsAddForm extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
 
     state = {
-        name: {en: '', es: ''},
+        name: {uk: '', ru: '', en: ''},
         type: undefined,
         fieldErrors: {}
     };
@@ -52,18 +49,21 @@ class AdminContentsAddForm extends React.Component {
     };
 
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.type) {
-            fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.type = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.en) {
-            fieldErrors['name.en'] = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.uk) {
+            fieldErrors['name.uk'] = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.es) {
-            fieldErrors['name.es'] = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.ru) {
+            fieldErrors['name.ru'] = intl.formatMessage({id: 'fieldRequired'});
+        }
+        if (!this.state.name.en) {
+            fieldErrors['name.en'] = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -87,11 +87,11 @@ class AdminContentsAddForm extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         let contentTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'article'), value: 'article'},
-            {name: intlStore.getMessage(intlData, 'banner'), value: 'banner'}
+            {name: intl.formatMessage({id: 'article'}), value: 'article'},
+            {name: intl.formatMessage({id: 'banner'}), value: 'banner'}
         ];
 
         let fieldError = (field) => {
@@ -104,35 +104,36 @@ class AdminContentsAddForm extends React.Component {
         return (
             <div className="admin-contents-add-form">
                 <div className="admin-contents-add-form__item">
-                    <Select label={intlStore.getMessage(intlData, 'type')}
+                    <Select label={intl.formatMessage({id: 'type'})}
                             placeholder
                             options={contentTypeOptions}
                             onChange={this.handleTypeChange}
                             error={fieldError('type')} />
                 </div>
                 <div className="admin-contents-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
-                                onChange={this.handleNameChange.bind(null, 'en')}
-                                error={fieldError('name.en')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (UA)'}
+                                onChange={this.handleNameChange.bind(null, 'uk')}
+                                error={fieldError('name.uk')} />
+                </div>
+                <div className="admin-contents-add-form__item">
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (RU)'}
+                                onChange={this.handleNameChange.bind(null, 'ru')}
+                                error={fieldError('name.ru')} />
                 </div>
                 <div className="admin-contents-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                onChange={this.handleNameChange.bind(null, 'es')}
-                                error={fieldError('name.es')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (EN)'}
+                                onChange={this.handleNameChange.bind(null, 'en')}
+                                error={fieldError('name.en')} />
                 </div>
                 <div className="admin-contents-add-form__actions">
                     <div className="admin-contents-add-form__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-contents-add-form__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'add')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="addButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Contents/AdminContentsEdit.intl.js b/src/components/pages/Admin/Contents/AdminContentsEdit.intl.js
deleted file mode 100644
index d75e85e..0000000
--- a/src/components/pages/Admin/Contents/AdminContentsEdit.intl.js
+++ /dev/null
@@ -1,32 +0,0 @@
-export default {
-    en: {
-        back: 'Back',
-        categories: 'Categories',
-        collections: 'Collections',
-        enabled: 'Enabled',
-        fieldRequired: 'This field is required',
-        homepage: 'Homepage',
-        name: 'Name',
-        productPage: 'Product Page',
-        save: 'Save',
-        sections: 'Featured in Sections',
-        title: 'Edit Content',
-        type: 'Type',
-        unsupportedType: 'Unsupported content type'
-    },
-    es: {
-        back: 'Volver',
-        categories: 'Categorias',
-        collections: 'Colecciones',
-        enabled: 'Activar',
-        fieldRequired: 'Este campo es obligatorio',
-        homepage: 'Página Principal',
-        name: 'Nombre',
-        productPage: 'Página de Productos',
-        save: 'Guardar',
-        sections: 'Destacados en Secciones',
-        title: 'Editar Contenido',
-        type: 'Tipo',
-        unsupportedType: 'Tipo de contenido no soportado'
-    }
-};
diff --git a/src/components/pages/Admin/Contents/AdminContentsEdit.js b/../simple-store/src/components/pages/Admin/Contents/AdminContentsEdit.js
index 68ff24c..40a7222 100644
--- a/src/components/pages/Admin/Contents/AdminContentsEdit.js
+++ b/../simple-store/src/components/pages/Admin/Contents/AdminContentsEdit.js
@@ -3,15 +3,16 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import config from '../../../../config';
 
 // Flux
+import IntlStore from '../../../../stores/Application/IntlStore';
 import CollectionsStore from '../../../../stores/Collections/CollectionsStore';
 import ContentDetailsStore from '../../../../stores/Contents/ContentDetailsStore';
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 import fetchContentAndCheckIfFound from '../../../../actions/Contents/fetchContentAndCheckIfFound';
 import updateContent from '../../../../actions/Admin/updateContent';
@@ -32,8 +33,6 @@ import ToggleSwitch from '../../../common/buttons/ToggleSwitch';
 import AdminContentsArticle from './TypeForms/AdminContentsArticle';
 import AdminContentsBanner from './TypeForms/AdminContentsBanner';
 
-// Translation data for this component
-import intlData from './AdminContentsEdit.intl';
 
 /**
  * Component
@@ -41,8 +40,9 @@ import intlData from './AdminContentsEdit.intl';
 class AdminContentsEdit extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -66,7 +66,7 @@ class AdminContentsEdit extends React.Component {
         require('./AdminContentsEdit.scss');
 
         // Request required data
-        this.context.executeAction(fetchContentAndCheckIfFound, this.props.params.contentId);
+        this.context.executeAction(fetchContentAndCheckIfFound, this.props.match.params.contentId);
     }
 
     componentWillReceiveProps(nextProps) {
@@ -158,8 +158,8 @@ class AdminContentsEdit extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         // Stuff that won't work if we are in "404 Not Found", thus, no content object
         if (this.state.content) {
@@ -183,9 +183,7 @@ class AdminContentsEdit extends React.Component {
                 } else {
                     return (
                         <Text className="admin-contents-edit__unsupported-type">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'unsupportedType')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="unsupportedType" />
                         </Text>
                     );
                 }
@@ -201,9 +199,7 @@ class AdminContentsEdit extends React.Component {
                     <div className="admin-contents-edit__title">
                         <div className="admin-contents-edit__title-text">
                             <Heading size="medium">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'title')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="adminContentsEditHeader" />
                             </Heading>
                         </div>
                         {this.state.content ?
@@ -220,19 +216,15 @@ class AdminContentsEdit extends React.Component {
                     {this.state.content ?
                         <div className="admin-contents-edit__toolbar">
                             <div className="admin-contents-edit__toolbar-item">
-                                <Link to="adm-contents" params={routeParams}>
+                                <Link to={`/:locale/adm/contents`} >
                                     <Button type="default" disabled={this.state.loading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'back')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="backButton" />
                                     </Button>
                                 </Link>
                             </div>
                             <div className="admin-contents-edit__toolbar-item">
                                 <Button type="primary" onClick={this.handleSaveClick} disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'save')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="saveButton" />
                                 </Button>
                             </div>
                         </div>
@@ -247,7 +239,7 @@ class AdminContentsEdit extends React.Component {
                         <div className="admin-contents-edit__common">
                             <div className="admin-contents-edit__left-column">
                                 <div className="admin-contents-edit__form-item">
-                                    <ToggleSwitch label={intlStore.getMessage(intlData, 'enabled')}
+                                    <ToggleSwitch label={intl.formatMessage({id: 'enabledHeading'})}
                                                   enabled={this.state.content.enabled === true}
                                                   onChange={this.handleEnabledChange} />
                                 </div>
@@ -255,16 +247,14 @@ class AdminContentsEdit extends React.Component {
                                     <div className="admin-contents-edit__checkbox-inline">
                                         <div className="admin-contents-edit__checkbox-inline-label">
                                             <FormLabel>
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'sections')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="sections" />
                                             </FormLabel>
                                         </div>
                                         <div className="admin-contents-edit__checkbox-inline-items">
-                                            <Checkbox label={intlStore.getMessage(intlData, 'homepage')}
+                                            <Checkbox label={intl.formatMessage({id: 'homepageCheckbox'})}
                                                       onChange={this.handleSectionChange.bind(null, 'homepage')}
                                                       checked={this.state.content.tags && this.state.content.tags.indexOf('homepage') !== -1} />
-                                            <Checkbox label={intlStore.getMessage(intlData, 'productPage')}
+                                            <Checkbox label={intl.formatMessage({id: 'productPageCheckbox'})}
                                                       onChange={this.handleSectionChange.bind(null, 'productPage')}
                                                       checked={this.state.content.tags && this.state.content.tags.indexOf('productPage') !== -1} />
                                         </div>
@@ -273,18 +263,17 @@ class AdminContentsEdit extends React.Component {
                                 <div className="admin-contents-edit__form-item">
                                     <InputField label={
                                                     <div>
-                                                        <FormattedMessage
-                                                            message={intlStore.getMessage(intlData, 'name')}
-                                                            locales={intlStore.getCurrentLocale()} />
+                                                        <FormattedMessage id="name" />
                                                         &nbsp;({this.state.selectedLocale})
                                                     </div>
                                                 }
                                                 onChange={this.handleNameChange.bind(null, this.state.selectedLocale)}
-                                                value={this.state.content.name[this.state.selectedLocale]}
+                                                value={this.state.content.name[this.state.selectedLocale] || ''}
                                                 error={this.state.fieldErrors[`name.${this.state.selectedLocale}`]} />
                                 </div>
                                 <div className="admin-contents-edit__form-item">
                                     <ImageLibraryManager images={this.state.content.images}
+                                                         resource="contents"
                                                          onChange={this.handleImageLibraryChange} />
                                 </div>
                             </div>
@@ -293,16 +282,14 @@ class AdminContentsEdit extends React.Component {
                                     <CollectionPicker collections={this.state.categories}
                                                       checked={this.state.content.collections}
                                                       onChange={this.handleCollectionPickerChange}>
-                                        <FormattedMessage message={intlStore.getMessage(intlData, 'categories')}
-                                                          locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="categories" />
                                     </CollectionPicker>
                                 </div>
                                 <div className="admin-contents-edit__form-item">
                                     <CollectionPicker collections={this.state.collections}
                                                       checked={this.state.content.collections}
                                                       onChange={this.handleCollectionPickerChange}>
-                                        <FormattedMessage message={intlStore.getMessage(intlData, 'collections')}
-                                                          locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="collections" />
                                     </CollectionPicker>
                                 </div>
                             </div>
diff --git a/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.intl.js b/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.intl.js
deleted file mode 100644
index a251b52..0000000
--- a/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        edit: 'Edit',
-        preview: 'Preview',
-        summary: 'Summary'
-    },
-    es: {
-        edit: 'Editar',
-        preview: 'Pré-Visualizar',
-        summary: 'Resumen'
-    }
-};
diff --git a/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.js b/../simple-store/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.js
index 6677d8d..ae0c428 100644
--- a/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.js
+++ b/../simple-store/src/components/pages/Admin/Contents/TypeForms/AdminContentsArticle.js
@@ -2,10 +2,8 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import FormLabel from '../../../../common/forms/FormLabel';
@@ -13,16 +11,14 @@ import InputField from '../../../../common/forms/InputField';
 import MarkdownHTML from '../../../../common/typography/MarkdownHTML';
 import MarkdownEditor from '../../../../common/forms/MarkdownEditor';
 
-// Translation data for this component
-import intlData from './AdminContentsArticle.intl';
-
 /**
  * Component
  */
 class AdminContentsArticle extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -50,21 +46,19 @@ class AdminContentsArticle extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
         return (
             <div className="admin-contents-article">
                 <div className="admin-contents-article__summary">
                     <div className="admin-contents-article__form-item">
                         <InputField label={
                                         <div>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'summary')}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="summary" />
                                             &nbsp;({this.props.selectedLocale})
                                         </div>
                                     }
                                     onChange={this.handleLocaleFieldField.bind(null, 'summary', this.props.selectedLocale)}
-                                    value={this.props.body.summary[this.props.selectedLocale]}
+                                    value={this.props.body.summary[this.props.selectedLocale] || ''}
                                     error={this.state.fieldErrors[`summary.${this.props.selectedLocale}`]} />
                     </div>
                 </div>
@@ -73,19 +67,17 @@ class AdminContentsArticle extends React.Component {
                         <MarkdownEditor key={this.props.selectedLocale}
                                         label={
                                             <div>
-                                                <FormattedMessage message={intlStore.getMessage(intlData, 'edit')}
-                                                                  locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="edit" />
                                                 &nbsp;({this.props.selectedLocale})
                                             </div>
                                         }
-                                        value={this.props.body.markdown[this.props.selectedLocale]}
+                                        value={this.props.body.markdown[this.props.selectedLocale] || ''}
                                         onChange={this.handleLocaleFieldField.bind(null, 'markdown', this.props.selectedLocale)} />
                     </div>
                     <div className="admin-contents-article__preview">
                         <div className="admin-contents-article__label">
                             <FormLabel>
-                                <FormattedMessage message={intlStore.getMessage(intlData, 'preview')}
-                                                  locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="preview" />
                                 &nbsp;({this.props.selectedLocale})
                             </FormLabel>
                         </div>
diff --git a/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.intl.js b/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.intl.js
deleted file mode 100644
index 1ec9028..0000000
--- a/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        delete: 'Delete',
-        imageLabel: 'Banner Image URL',
-        link: 'Link'
-    },
-    es: {
-        delete: 'Eliminar',
-        imageLabel: 'Banner Image URL',
-        link: 'Link'
-    }
-};
diff --git a/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.js b/../simple-store/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.js
index 645b1e2..662caf4 100644
--- a/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.js
+++ b/../simple-store/src/components/pages/Admin/Contents/TypeForms/AdminContentsBanner.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../../common/buttons/Button';
 import FormLabel from '../../../../common/forms/FormLabel';
 import InputField from '../../../../common/forms/InputField';
 
-// Translation data for this component
-import intlData from './AdminContentsBanner.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,7 +19,8 @@ let debug = require('debug')('tienda765');
 class AdminContentsBanner extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -58,20 +54,17 @@ class AdminContentsBanner extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="admin-contents-banner">
                 <div className="admin-contents-banner__form-item">
-                    <InputField label={intlStore.getMessage(intlData, 'link')}
+                    <InputField label={this.context.intl.formatMessage({id: 'link'})}
                                 onChange={this.handleFieldChange.bind(null, 'link')}
                                 value={this.props.body.link} />
                 </div>
                 <div className="admin-contents-banner__form-item">
                     <div className="admin-contents-banner__image-label">
                         <FormLabel>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'imageLabel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="bannerImageLabel" />
                         </FormLabel>
                     </div>
                     {this.props.body.image && this.props.body.image.url ?
@@ -80,9 +73,7 @@ class AdminContentsBanner extends React.Component {
                             <div className="admin-contents-banner__placeholder-overlay">
                                 <div>
                                     <Button type="primary" onClick={this.handleRemoveImageClick}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'delete')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="deleteButton" />
                                     </Button>
                                 </div>
                             </div>
diff --git a/src/components/pages/Admin/Customers/AdminCustomers.intl.js b/src/components/pages/Admin/Customers/AdminCustomers.intl.js
deleted file mode 100644
index 9be5ada..0000000
--- a/src/components/pages/Admin/Customers/AdminCustomers.intl.js
+++ /dev/null
@@ -1,16 +0,0 @@
-export default {
-    en: {
-        createdAtHeading: 'Registered',
-        emailHeading: 'Email',
-        nameHeading: 'Name',
-        status: 'Status',
-        title: 'Customers'
-    },
-    es: {
-        createdAtHeading: 'Registrado',
-        emailHeading: 'Email',
-        nameHeading: 'Nombre',
-        status: 'Estado',
-        title: 'Usuarios'
-    }
-}
diff --git a/src/components/pages/Admin/Customers/AdminCustomers.js b/../simple-store/src/components/pages/Admin/Customers/AdminCustomers.js
index 617dd55..c456593 100644
--- a/src/components/pages/Admin/Customers/AdminCustomers.js
+++ b/../simple-store/src/components/pages/Admin/Customers/AdminCustomers.js
@@ -4,10 +4,10 @@
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
 import moment from 'moment';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
 import CustomersListStore from '../../../../stores/Customers/CustomersListStore';
 import fetchCustomers from '../../../../actions/Customers/fetchCustomers';
 
@@ -18,17 +18,15 @@ import StatusIndicator from '../../../common/indicators/StatusIndicator';
 import Table from '../../../common/tables/Table';
 import Text from '../../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './AdminCustomers.intl';
-
 /**
  * Component
  */
 class AdminCustomers extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -65,21 +63,11 @@ class AdminCustomers extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-
         let headings = [
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'nameHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'emailHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'createdAtHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'status')}
-                locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="nameFullHeading" />,
+            <FormattedMessage id="emailHeading" />,
+            <FormattedMessage id="createdAtHeading" />,
+            <FormattedMessage id="statusHeading" />
         ];
 
         let rows = this.state.customers.map(function (customer) {
@@ -116,9 +104,7 @@ class AdminCustomers extends React.Component {
                 <div className="admin-customers__header">
                     <div className="admin-customers__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminCustomersHeader" />
                         </Heading>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Dashboard/AdminDashboard.intl.js b/src/components/pages/Admin/Dashboard/AdminDashboard.intl.js
deleted file mode 100644
index 774275c..0000000
--- a/src/components/pages/Admin/Dashboard/AdminDashboard.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        homepageSettingsTitle: 'Homepage Settings',
-        mainNavigationSettingsTitle: 'Main Navigation Order',
-        title: 'Dashboard'
-    },
-    es: {
-        homepageSettingsTitle: 'Configuraciones de Página Principal',
-        mainNavigationSettingsTitle: 'Orden de Menu Principal',
-        title: 'Dashboard'
-    }
-};
diff --git a/src/components/pages/Admin/Dashboard/AdminDashboard.js b/../simple-store/src/components/pages/Admin/Dashboard/AdminDashboard.js
index d4d29d2..d724761 100644
--- a/src/components/pages/Admin/Dashboard/AdminDashboard.js
+++ b/../simple-store/src/components/pages/Admin/Dashboard/AdminDashboard.js
@@ -3,10 +3,8 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import fetchContents from '../../../../actions/Contents/fetchContents';
 
@@ -16,22 +14,20 @@ import Heading from '../../../common/typography/Heading';
 import AdminHomepageSettings from './AdminHomepageSettings';
 import AdminMainNavigation from './AdminMainNavigation';
 
-// Translation data for this component
-import intlData from './AdminDashboard.intl';
-
 /**
  * Component
  */
 class AdminDashboard extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        context.executeAction(fetchContents, {type: 'banner', tags: 'homepage'}, done);
+        return context.executeAction(fetchContents, {type: 'banner', tags: 'homepage'}, done);
     };
 
     //*** Component Lifecycle ***//
@@ -45,15 +41,12 @@ class AdminDashboard extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
         return (
             <div className="admin-dashboard">
                 <div className="admin-dashboard__header">
                     <div className="admin-dashboard__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminDashboardHeader" />
                         </Heading>
                     </div>
                     <div className="admin-dashboard__toolbar"></div>
@@ -62,9 +55,7 @@ class AdminDashboard extends React.Component {
                 <div className="admin-dashboard__settings-block">
                     <div className="admin-dashboard__settings-title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'mainNavigationSettingsTitle')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="mainNavigationSettingsTitle" />
                         </Heading>
                     </div>
                     <AdminMainNavigation />
@@ -73,9 +64,7 @@ class AdminDashboard extends React.Component {
                 <div className="admin-dashboard__settings-block">
                     <div className="admin-dashboard__settings-title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'homepageSettingsTitle')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="homepageSettingsTitle" />
                         </Heading>
                     </div>
                     <AdminHomepageSettings />
diff --git a/src/components/pages/Admin/Dashboard/AdminHomepageSettings.intl.js b/src/components/pages/Admin/Dashboard/AdminHomepageSettings.intl.js
deleted file mode 100644
index 812a054..0000000
--- a/src/components/pages/Admin/Dashboard/AdminHomepageSettings.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        homepageFeaturedCollections: 'Featured Categories & Collections',
-        orderBanners: 'Organize Banners',
-        update: 'Update'
-    },
-    es: {
-        homepageFeaturedCollections: 'Categorias y Colecciones Destacadas',
-        orderBanners: 'Organizar Banners',
-        update: 'Actualizar'
-    }
-};
diff --git a/src/components/pages/Admin/Dashboard/AdminHomepageSettings.js b/../simple-store/src/components/pages/Admin/Dashboard/AdminHomepageSettings.js
index c47129b..17f0295 100644
--- a/src/components/pages/Admin/Dashboard/AdminHomepageSettings.js
+++ b/../simple-store/src/components/pages/Admin/Dashboard/AdminHomepageSettings.js
@@ -3,7 +3,8 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {move as arrayMove} from '../../../../utils/arrays';
 
@@ -11,7 +12,6 @@ import {move as arrayMove} from '../../../../utils/arrays';
 import ContentsListStore from '../../../../stores/Contents/ContentsListStore';
 import CollectionsStore from '../../../../stores/Collections/CollectionsStore';
 import CollectionsFeaturedHomepage from '../../../../stores/Collections/CollectionsFeaturedHomepage';
-import IntlStore from '../../../../stores/Application/IntlStore';
 
 import bulkBannersUpdate from '../../../../actions/Admin/bulkBannersUpdate';
 import updateHomepageFeaturedCollections from '../../../../actions/Admin/updateHomepageFeaturedCollections';
@@ -23,17 +23,15 @@ import FormLabel from '../../../common/forms/FormLabel';
 import InlineItems from '../../../common/forms/InlineItems';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminHomepageSettings.intl';
-
 /**
  * Component
  */
 class AdminHomepageSettings extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -120,10 +118,11 @@ class AdminHomepageSettings extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
+
         let featuredCollectionsOptions = this.state.collections.map(function (collection) {
             return {
-                name: intlStore.getMessage(collection.name),
+                name: collection.name[locale],
                 value: collection.id
             };
         });
@@ -133,8 +132,7 @@ class AdminHomepageSettings extends React.Component {
                 <div className="admin-homepage-settings__ordering-block">
                     <div className="admin-homepage-settings__ordering-label">
                         <FormLabel>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'orderBanners')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="orderBanners" />
                         </FormLabel>
                     </div>
                     <div className="admin-homepage-settings__ordering">
@@ -144,8 +142,7 @@ class AdminHomepageSettings extends React.Component {
                                     <DirectionButton key={idx}
                                                      item={banner}
                                                      handleMoveLeftClick={this.handleMoveBannerLeftClick.bind(null, idx)}
-                                                     handleMoveRightClick={this.handleMoveBannerRightClick.bind(null, idx)}
-                                                     itemsNum={this.state.banners.length} />
+                                                     handleMoveRightClick={this.handleMoveBannerRightClick.bind(null, idx)} />
                                 );
                             })}
                         </div>
@@ -154,9 +151,7 @@ class AdminHomepageSettings extends React.Component {
                                     type="primary"
                                     onClick={this.handleBannerUpdateClick}
                                     loading={this.state.loading}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'update')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="updateButton" />
                             </Button>
                         </div>
                     </div>
@@ -164,8 +159,7 @@ class AdminHomepageSettings extends React.Component {
                 <div className="admin-homepage-settings__ordering-block">
                     <div className="admin-homepage-settings__ordering-label">
                         <FormLabel>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'homepageFeaturedCollections')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="homepageFeaturedCollections" />
                         </FormLabel>
                     </div>
                     <div className="admin-homepage-settings__ordering">
@@ -175,8 +169,7 @@ class AdminHomepageSettings extends React.Component {
                                     <DirectionButton key={idx}
                                                      item={collection}
                                                      handleMoveLeftClick={this.handleMoveFeaturedCollectionsLeftClick.bind(null, idx)}
-                                                     handleMoveRightClick={this.handleMoveFeaturedCollectionsRightClick.bind(null, idx)}
-                                                     itemsNum={this.state.featuredCollections.length} />
+                                                     handleMoveRightClick={this.handleMoveFeaturedCollectionsRightClick.bind(null, idx)} />
                                 );
                             })}
                         </div>
@@ -185,9 +178,7 @@ class AdminHomepageSettings extends React.Component {
                                     type="primary"
                                     onClick={this.handleFeaturedCollectionsUpdateClick}
                                     disabled={this.state.featuredUpdate.loading}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'update')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="updateButton" />
                             </Button>
                         </div>
                     </div>
diff --git a/src/components/pages/Admin/Dashboard/AdminMainNavigation.intl.js b/src/components/pages/Admin/Dashboard/AdminMainNavigation.intl.js
deleted file mode 100644
index e7d3fe1..0000000
--- a/src/components/pages/Admin/Dashboard/AdminMainNavigation.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        update: 'Update'
-    },
-    es: {
-        update: 'Actualizar'
-    }
-};
diff --git a/src/components/pages/Admin/Dashboard/AdminMainNavigation.js b/../simple-store/src/components/pages/Admin/Dashboard/AdminMainNavigation.js
index 65cce5d..049807c 100644
--- a/src/components/pages/Admin/Dashboard/AdminMainNavigation.js
+++ b/../simple-store/src/components/pages/Admin/Dashboard/AdminMainNavigation.js
@@ -4,6 +4,7 @@
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
 import {FormattedMessage} from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {move as arrayMove} from '../../../../utils/arrays';
 
@@ -17,17 +18,14 @@ import bulkCollectionsUpdate from '../../../../actions/Admin/bulkCollectionsUpda
 import Button from '../../../common/buttons/Button';
 import DirectionButton from '../../../common/buttons/DirectionButton';
 
-// Translation data for this component
-import intlData from './AdminMainNavigation.intl';
-
 /**
  * Component
  */
 class AdminMainNavigation extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired
     };
 
     //*** Initial State ***//
@@ -93,8 +91,7 @@ class AdminMainNavigation extends React.Component {
                             <DirectionButton key={idx}
                                              item={collection}
                                              handleMoveLeftClick={this.handleMoveLeftClick.bind(null, idx)}
-                                             handleMoveRightClick={this.handleMoveRightClick.bind(null, idx)}
-                                             itemsNum={this.state.navCollections.length} />
+                                             handleMoveRightClick={this.handleMoveRightClick.bind(null, idx)} />
                         );
                     })}
                 </div>
@@ -102,9 +99,7 @@ class AdminMainNavigation extends React.Component {
                     <Button className="admin-main-navigation__update-button" type="primary"
                             onClick={this.handleUpdateClick}
                             loading={this.state.loading}>
-                        <FormattedMessage
-                            message={intlStore.getMessage(intlData, 'update')}
-                            locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="updateButton" />
                     </Button>
                 </div>
             </div>
@@ -125,4 +120,4 @@ AdminMainNavigation = connectToStores(AdminMainNavigation, [CollectionsStore], (
 /**
  * Exports
  */
-export default AdminMainNavigation;
+export default AdminMainNavigation;
\ No newline at end of file
diff --git a/src/components/pages/Admin/Orders/AdminOrders.intl.js b/src/components/pages/Admin/Orders/AdminOrders.intl.js
deleted file mode 100644
index 873eb66..0000000
--- a/src/components/pages/Admin/Orders/AdminOrders.intl.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default {
-    en: {
-        dateHeading: 'Date',
-        nameHeading: 'Client',
-        idHeading: 'ID',
-        noResults: 'No results',
-        showAll: 'Show All',
-        statusHeading: 'Status',
-        title: 'Orders'
-    },
-    es: {
-        dateHeading: 'Fecha',
-        nameHeading: 'Cliente',
-        idHeading: 'ID',
-        noResults: 'No existen Ordenes momentaneamente',
-        showAll: 'Mostrar Todo',
-        statusHeading: 'Estado',
-        title: 'Pedidos'
-    }
-}
diff --git a/src/components/pages/Admin/Orders/AdminOrders.js b/../simple-store/src/components/pages/Admin/Orders/AdminOrders.js
index 0fdaafc..d498f1d 100644
--- a/src/components/pages/Admin/Orders/AdminOrders.js
+++ b/../simple-store/src/components/pages/Admin/Orders/AdminOrders.js
@@ -4,8 +4,9 @@
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
 import moment from 'moment';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import IntlStore from '../../../../stores/Application/IntlStore';
@@ -20,17 +21,15 @@ import Table from '../../../common/tables/Table';
 import Text from '../../../common/typography/Text';
 import ToggleSwitch from '../../../common/buttons/ToggleSwitch';
 
-// Translation data for this component
-import intlData from './AdminOrders.intl';
-
 /**
  * Component
  */
 class AdminOrders extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -77,38 +76,28 @@ class AdminOrders extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         // Order list table headings
         let headings = [
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'dateHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'idHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'nameHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'statusHeading')}
-                locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="dateHeading" />,
+            <FormattedMessage id="idHeading" />,
+            <FormattedMessage id="emailHeading" />,
+            <FormattedMessage id="statusHeading" />
         ];
 
         // Order list table rows
         let rows = this.state.orders.map(function (order) {
-          console.log("orderr:",order);
             return {
                 data: [
                     <Text size="medium">{moment(order.createdAt).format('YYYY/MM/DD HH:mm:ss')}</Text>,
                     <span className="admin-orders__link">
-                        <Link to="adm-order-edit" params={Object.assign({orderId: order.id}, routeParams)}>
+                        <Link to={`/${locale}/adm/orders/${order.id}`} >
                             <Text size="small">{order.id}</Text>
                         </Link>
                     </span>,
                     <Text size="medium">
-                        {order.customer.name}
+                        {order.customer.email}
                         {order.customer.userId ?
                             <span className="adm-orders__user-icon">
                                 <i className="fa fa-user" aria-hidden="true" />
@@ -130,13 +119,12 @@ class AdminOrders extends React.Component {
                 <div className="admin-orders__header">
                     <div className="admin-orders__title">
                         <Heading size="medium">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'title')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminOrderHeader" />
                         </Heading>
                     </div>
                     <div className="admin-orders__toolbar">
                         <div className="admin-orders__toolbar-item">
-                            <ToggleSwitch label={intlStore.getMessage(intlData, 'showAll')}
+                            <ToggleSwitch label={this.context.intl.formatMessage({id: 'showAll'})}
                                           inline
                                           enabled={this.state.showAllOrders}
                                           onChange={this.handleShowAllOrdersChange} />
@@ -160,8 +148,7 @@ class AdminOrders extends React.Component {
                 {!this.state.loading && this.state.orders.length === 0 ?
                     <div className="admin-orders__no-results">
                         <Text size="small">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'noResults')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="noResults" />
                         </Text>
                     </div>
                     :
diff --git a/src/components/pages/Admin/Orders/AdminOrdersEdit.intl.js b/src/components/pages/Admin/Orders/AdminOrdersEdit.intl.js
deleted file mode 100644
index 8384b04..0000000
--- a/src/components/pages/Admin/Orders/AdminOrdersEdit.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        back: 'Back',
-        sendEmail: 'Send Email',
-        sendEmailModalTitle: 'Send Email',
-        title: 'Order Details',
-        updateModalTitle: 'Update Status',
-        updateStatus: 'Update'
-    },
-    es: {
-        back: 'Volver',
-        sendEmail: 'Enviar Email',
-        sendEmailModalTitle: 'Enviar Email',
-        title: 'Detalles de Encomienda',
-        updateModalTitle: 'Actualizar Estado',
-        updateStatus: 'Actualizar'
-    }
-};
diff --git a/src/components/pages/Admin/Orders/AdminOrdersEdit.js b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersEdit.js
index 4c4b8a9..26e84af 100644
--- a/src/components/pages/Admin/Orders/AdminOrdersEdit.js
+++ b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersEdit.js
@@ -3,8 +3,9 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import OrderDetailsStore from '../../../../stores/Orders/OrderDetailsStore';
@@ -12,8 +13,9 @@ import OrderEmailStore from '../../../../stores/Orders/OrderEmailStore';
 import IntlStore from '../../../../stores/Application/IntlStore';
 
 import fetchOrderAndCheckIfFound from '../../../../actions/Orders/fetchOrderAndCheckIfFound';
-import sendOrderEmailAdmin from '../../../../actions/Orders/sendOrderEmailAdmin';
+import sendOrderEmail from '../../../../actions/Orders/sendOrderEmail';
 import updateOrderStatus from '../../../../actions/Orders/updateOrderStatus';
+import updateShippingDetails from '../../../../actions/Checkout/updateCheckout';
 
 // Required components
 import Button from '../../../common/buttons/Button';
@@ -26,17 +28,15 @@ import Spinner from '../../../common/indicators/Spinner';
 import AdminOrdersSendEmail from './AdminOrdersSendEmail';
 import AdminOrdersUpdateStatus from './AdminOrdersUpdateStatus';
 
-// Translation data for this component
-import intlData from './AdminOrdersEdit.intl';
-
 /**
  * Component
  */
 class AdminOrdersEdit extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -61,11 +61,10 @@ class AdminOrdersEdit extends React.Component {
         require('./AdminOrdersEdit.scss');
 
         // Load required data
-        this.context.executeAction(fetchOrderAndCheckIfFound, this.props.params.orderId);
+        this.context.executeAction(fetchOrderAndCheckIfFound, this.props.match.params.orderId);
     }
 
     componentWillReceiveProps(nextProps) {
-
         // Find field error descriptions in request response
         let fieldErrors = {};
         if (nextProps._error && nextProps._error.validation && nextProps._error.validation.keys) {
@@ -108,7 +107,7 @@ class AdminOrdersEdit extends React.Component {
     };
 
     handleSendEmailSubmitClick = (data) => {
-        this.context.executeAction(sendOrderEmailAdmin, {orderId: this.state.order.id, data: data});
+        this.context.executeAction(sendOrderEmail, {orderId: this.state.order.id, data: data});
     };
 
     // Update status modal
@@ -129,6 +128,15 @@ class AdminOrdersEdit extends React.Component {
         });
     };
 
+    handleEditShippingDetails = (shippingDetails) => {
+        this.context.executeAction(updateShippingDetails, {
+            checkoutId: this.state.order.checkout.id,
+            data: {
+                shippingDetails: shippingDetails
+            }
+        });
+    };
+
     //*** Template ***//
 
     render() {
@@ -136,14 +144,14 @@ class AdminOrdersEdit extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         // Return block regarding the send email modal
         let sendEmailModal = () => {
             if (this.state.showEmailModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'sendEmailModalTitle')}
+                    <Modal title={intl.formatMessage({id: 'sendEmailModalTitle'})}
                            onCloseClick={this.handleSendEmailCloseClick}>
                         <AdminOrdersSendEmail onCancelClick={this.handleSendEmailCloseClick}
                                               onSubmitClick={this.handleSendEmailSubmitClick}
@@ -159,7 +167,7 @@ class AdminOrdersEdit extends React.Component {
         let updateModal = () => {
             if (this.state.showUpdateModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'updateModalTitle')}
+                    <Modal title={intl.formatMessage({id: 'updateModalTitle'})}
                            onCloseClick={this.handleUpdateStatusCloseClick}>
                         <AdminOrdersUpdateStatus onCancelClick={this.handleUpdateStatusCloseClick}
                                                  onSubmitClick={this.handleUpdateStatusSubmitClick}
@@ -181,36 +189,28 @@ class AdminOrdersEdit extends React.Component {
                 <div className="admin-orders-edit__header">
                     <div className="admin-orders-edit__title">
                         <Heading size="medium">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'title')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminOrdersEditHeader" />
                         </Heading>
                     </div>
                     {this.state.order ?
                         <div className="admin-orders-edit__toolbar">
                             <div className="admin-orders-edit__toolbar-item">
-                                <Link to="adm-orders" params={routeParams}>
+                                <Link to={`/${locale}/adm/orders`}>
                                     <Button type="default" disabled={this.state.loading || this.state.saving}>
-                                        <FormattedMessage message={intlStore.getMessage(intlData, 'back')}
-                                                          locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="backButton" />
                                     </Button>
                                 </Link>
                             </div>
                             <div className="admin-orders-edit__toolbar-item">
                                 <Button type="primary" onClick={this.handleSendEmailClick} disabled={this.state.loading || this.state.saving}>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'sendEmail')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="sendEmailButton" />
+                                </Button>
+                            </div>
+                            <div className="admin-orders-edit__toolbar-item">
+                                <Button type="primary" onClick={this.handleUpdateStatusClick} disabled={this.state.loading || this.state.saving}>
+                                    <FormattedMessage id="updateButton" />
                                 </Button>
                             </div>
-                            {['created', 'pendingPayment', 'paid', 'processing', 'ready'].indexOf(this.state.order.status) !== -1 ?
-                                <div className="admin-orders-edit__toolbar-item">
-                                    <Button type="primary" onClick={this.handleUpdateStatusClick} disabled={this.state.loading || this.state.saving}>
-                                        <FormattedMessage message={intlStore.getMessage(intlData, 'updateStatus')}
-                                                          locales={intlStore.getCurrentLocale()} />
-                                    </Button>
-                                </div>
-                                :
-                                null
-                            }
                         </div>
                         :
                         null
@@ -229,7 +229,9 @@ class AdminOrdersEdit extends React.Component {
                     null
                 }
                 {!this.state.loading && this.state.order ?
-                    <OrderDetails order={this.state.order} />
+                    <OrderDetails
+                        order={this.state.order}
+                        onEditShippingDetails={this.handleEditShippingDetails} />
                     :
                     null
                 }
diff --git a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.intl.js b/src/components/pages/Admin/Orders/AdminOrdersSendEmail.intl.js
deleted file mode 100644
index 2680b72..0000000
--- a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.intl.js
+++ /dev/null
@@ -1,30 +0,0 @@
-export default {
-    en: {
-        cancel: 'Cancel',
-        emailAddress: 'Email Address',
-        fieldRequired: 'This field is required',
-        orderCreated: 'Order Created',
-        orderPaid: 'Payment Confirmation',
-        orderPendingPayment: 'Payment Reminder',
-        orderPendingPaymentPaypal: 'Payment Reminder with Paypal',
-        orderPendingPaymentMercadoPago: 'Payment Reminder with Mercado Pago',
-        subject: 'Subject',
-        submit: 'Send',
-        template: 'Template',
-        paymentLink: 'Payment Link'
-    },
-    es: {
-        cancel: 'Cancelar',
-        emailAddress: 'Dirección de Email',
-        fieldRequired: 'Este campo es obligatorio',
-        orderCreated: 'Pedido creado',
-        orderPaid: 'Confirmación de Pago',
-        orderPendingPayment: 'Recordatorio de Pago',
-        orderPendingPaymentPaypal: 'Recordatorio de Pago con Paypal',
-        orderPendingPaymentMercadoPago: 'Recordatorio de Pago con Mercado Pago',
-        subject: 'Asunto',
-        submit: 'Enviar',
-        template: 'Template',
-        paymentLink: 'Link de pago'
-    }
-};
diff --git a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.js b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersSendEmail.js
index ae6ac92..f7ea18f 100644
--- a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.js
+++ b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersSendEmail.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import InputField from '../../../common/forms/InputField';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminOrdersSendEmail.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,7 +19,8 @@ let debug = require('debug')('tienda765');
 class AdminOrdersSendEmail extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -63,10 +59,6 @@ class AdminOrdersSendEmail extends React.Component {
         this.setState({template: value});
     };
 
-    handlePaymentLinkChange = (value) => {
-        this.setState({paymentlink: value});
-    };
-
     handleEmailAddressChange = (value) => {
         this.setState({email: value});
     };
@@ -75,22 +67,20 @@ class AdminOrdersSendEmail extends React.Component {
         this.setState({subject: value});
     };
 
+
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.template) {
-            fieldErrors.template = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.template = intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.email) {
-            fieldErrors.email = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.email = intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.subject) {
-            fieldErrors.subject = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.paymentlink) {
-            fieldErrors.subject = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.subject = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -98,8 +88,7 @@ class AdminOrdersSendEmail extends React.Component {
             this.props.onSubmitClick({
                 template: this.state.template,
                 email: this.state.email,
-                subject: this.state.subject,
-                paymentlink: this.state.paymentlink
+                subject: this.state.subject
             });
         }
     };
@@ -112,26 +101,17 @@ class AdminOrdersSendEmail extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         // Build list of available email templates for given order
         let emailTemplateOptions = [
-            {name: intlStore.getMessage(intlData, 'orderCreated'), value: 'order.created'},
-            {name: intlStore.getMessage(intlData, 'orderPaid'), value: 'order.paid'},
-            {name: intlStore.getMessage(intlData, 'orderPendingPayment'), value: 'order.pendingPayment'},
-            {name: intlStore.getMessage(intlData, 'orderPendingPaymentPaypal'), value: 'order.pendingPaymentPaypal'},
-            {name: intlStore.getMessage(intlData, 'orderPendingPaymentMercadoPago'), value: 'order.pendingPaymentMercadoPago'}
-
+            {name: intl.formatMessage({id: 'orderCreated'}), value: 'order.created'}
         ];
         if (this.props.order.status === 'paid') {
-            emailTemplateOptions.push({name: intlStore.getMessage(intlData, 'orderPaid'), value: 'order.paid'});
+            emailTemplateOptions.push({name: intl.formatMessage({id: 'orderPaid'}), value: 'order.paid'});
         }
         if (this.props.order.status === 'pendingPayment') {
-            emailTemplateOptions.push(
-                                      {name: intlStore.getMessage(intlData, 'orderPendingPayment'), value: 'order.pendingPayment'},
-                                      {name: intlStore.getMessage(intlData, 'orderPendingPaymentPaypal'), value: 'order.pendingPaymentPaypal'},
-                                      {name: intlStore.getMessage(intlData, 'orderPendingPaymentMercadoPago'), value: 'order.pendingPaymentMercadoPago'}
-                                );
+            emailTemplateOptions.push({name: intl.formatMessage({id: 'orderPendingPayment'}), value: 'order.pendingPayment'});
         }
 
         //
@@ -140,40 +120,31 @@ class AdminOrdersSendEmail extends React.Component {
         return (
             <div className="admin-orders-send-email">
                 <div className="admin-orders-send-email__form-item">
-                    <Select label={intlStore.getMessage(intlData, 'template')}
+                    <Select label={intl.formatMessage({id: 'template'})}
                             placeholder
                             options={emailTemplateOptions}
                             onChange={this.handleTemplateChange}
                             error={this.state.fieldErrors.template} />
                 </div>
                 <div className="admin-orders-send-email__form-item">
-                    <InputField label={intlStore.getMessage(intlData, 'emailAddress')}
+                    <InputField label={intl.formatMessage({id: 'emailAddress'})}
                                 onChange={this.handleEmailAddressChange}
                                 error={this.state.fieldErrors.email}/>
                 </div>
-                <div className="admin-orders-payment-link__form-item">
-                    <InputField label={intlStore.getMessage(intlData, 'paymentLink')}
-                                onChange={this.handlePaymentLinkChange}
-                                error={this.state.fieldErrors.paymentlink}/>
-                </div>
                 <div className="admin-orders-send-email__form-item">
-                    <InputField label={intlStore.getMessage(intlData, 'subject')}
+                    <InputField label={intl.formatMessage({id: 'subject'})}
                                 onChange={this.handleSubjectChange}
                                 error={this.state.fieldErrors.subject}/>
                 </div>
                 <div className="admin-orders-send-email__actions">
                     <div className="admin-orders-send-email__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-orders-send-email__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'submit')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="sendButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.scss b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersSendEmail.scss
index cfe0393..f6c88ce 100644
--- a/src/components/pages/Admin/Orders/AdminOrdersSendEmail.scss
+++ b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersSendEmail.scss
@@ -7,13 +7,6 @@
     }
 }
 
-.admin-orders-payment-link__form-item {
-
-    &:not(:first-child) {
-        margin-top: 20px;
-    }
-}
-
 .admin-orders-send-email__actions {
     display: flex;
     justify-content: flex-end;
diff --git a/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.intl.js b/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.intl.js
deleted file mode 100644
index 25e8069..0000000
--- a/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.intl.js
+++ /dev/null
@@ -1,24 +0,0 @@
-export default {
-    en: {
-        cancel: 'Cancel',
-        cancelOrder: 'Canceled',
-        description: 'Description',
-        fieldRequired: 'This field is required',
-        processing: 'Processing',
-        ready: 'Ready for Shipping',
-        shipped: 'Shipped',
-        status: 'Status',
-        submit: 'Submit'
-    },
-    es: {
-        cancel: 'Cancelar',
-        cancelOrder: 'Cancelada',
-        description: 'Descripción',
-        fieldRequired: 'Este campo es obligatorio',
-        processing: 'En Proceso',
-        ready: 'Listo para Enviar',
-        shipped: 'Enviado',
-        status: 'Estado',
-        submit: 'Enviar'
-    }
-};
diff --git a/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.js b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.js
index b97a926..bac1d50 100644
--- a/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.js
+++ b/../simple-store/src/components/pages/Admin/Orders/AdminOrdersUpdateStatus.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import InputField from '../../../common/forms/InputField';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminOrdersUpdateStatus.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,7 +19,8 @@ let debug = require('debug')('tienda765');
 class AdminOrdersUpdateStatus extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -67,16 +63,16 @@ class AdminOrdersUpdateStatus extends React.Component {
     };
 
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.status) {
-            fieldErrors.status = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.description) {
-            fieldErrors.description = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.status = intl.formatMessage({id: 'fieldRequired'});
         }
+        // if (!this.state.description) {
+        //     fieldErrors.description = intl.formatMessage({id: 'fieldRequired'});
+        // }
         this.setState({fieldErrors: fieldErrors});
 
         if (Object.keys(fieldErrors).length === 0) {
@@ -94,24 +90,31 @@ class AdminOrdersUpdateStatus extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-
-        let statusOptions = [];
-        if (['created', 'pendingPayment', 'paymentError', 'paid', 'processing', 'ready'].indexOf(this.props.order.status) !== -1) {
-            statusOptions.push({name: intlStore.getMessage(intlData, 'cancelOrder'), value: 'canceled'});
-            statusOptions.push({name: intlStore.getMessage(intlData, 'processing'), value: 'processing'});
-            statusOptions.push({name: intlStore.getMessage(intlData, 'ready'), value: 'ready'});
-            statusOptions.push({name: intlStore.getMessage(intlData, 'shipped'), value: 'shipped'});
-        }
-        if (this.props.order.status === 'paid') {
-            statusOptions.push({name: intlStore.getMessage(intlData, 'processing'), value: 'processing'});
-        }
-        if (this.props.order.status === 'processing') {
-            statusOptions.push({name: intlStore.getMessage(intlData, 'ready'), value: 'ready'});
-        }
-        if (this.props.order.status === 'ready') {
-            statusOptions.push({name: intlStore.getMessage(intlData, 'shipped'), value: 'shipped'});
-        }
+        let intl = this.context.intl;
+
+        // let statusOptions = [];
+        // if (['created', 'pendingPayment', 'paymentError', 'paid', 'processing', 'ready'].indexOf(this.props.order.status) !== -1) {
+        //     statusOptions.push({name: intl.formatMessage({id: 'status_cancelOrder'}), value: 'canceled'});
+        // }
+        // if (this.props.order.status === 'paid') {
+        //     statusOptions.push({name: intl.formatMessage({id: 'status_processing'}), value: 'processing'});
+        // }
+        // if (this.props.order.status === 'processing') {
+        //     statusOptions.push({name: intl.formatMessage({id: 'status_ready'}), value: 'ready'});
+        // }
+        // if (this.props.order.status === 'ready') {
+        //     statusOptions.push({name: intl.formatMessage({id: 'status_shipped'}), value: 'shipped'});
+        // }
+
+        let statusOptions = [
+            {name: intl.formatMessage({id: 'status_created'}), value: 'created'},
+            {name: intl.formatMessage({id: 'status_canceled'}), value: 'canceled'},
+            {name: intl.formatMessage({id: 'status_pendingPayment'}), value: 'pendingPayment'},
+            {name: intl.formatMessage({id: 'status_paid'}), value: 'paid'},
+            {name: intl.formatMessage({id: 'status_processing'}), value: 'processing'},
+            {name: intl.formatMessage({id: 'status_ready'}), value: 'ready'},
+            {name: intl.formatMessage({id: 'status_shipped'}), value: 'shipped'},
+        ];
 
         //
         // Return
@@ -119,30 +122,27 @@ class AdminOrdersUpdateStatus extends React.Component {
         return (
             <div className="admin-orders-update-status">
                 <div className="admin-orders-update-status__form-item">
-                    <Select label={intlStore.getMessage(intlData, 'status')}
+                    <Select label={intl.formatMessage({id: 'status'})}
                             placeholder
                             options={statusOptions}
                             onChange={this.handleStatusChange}
+                            value={this.state.status}
                             error={this.state.fieldErrors.status} />
                 </div>
                 <div className="admin-orders-update-status__form-item">
-                    <InputField label={intlStore.getMessage(intlData, 'description')}
+                    <InputField label={intl.formatMessage({id: 'description'})}
                                 onChange={this.handleDescriptionChange}
                                 error={this.state.fieldErrors.description}/>
                 </div>
                 <div className="admin-orders-update-status__actions">
                     <div className="admin-orders-update-status__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-orders-update-status__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'submit')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="updateButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Products/AdminProducts.intl.js b/src/components/pages/Admin/Products/AdminProducts.intl.js
deleted file mode 100644
index 6e27252..0000000
--- a/src/components/pages/Admin/Products/AdminProducts.intl.js
+++ /dev/null
@@ -1,36 +0,0 @@
-export default {
-    en: {
-        enabledHeading: 'Enabled',
-        homepage: 'Homepage',
-        imagesHeading: 'Images',
-        nameHeading: 'Name',
-        fotocopias: 'Fotocopias',
-        verduras: 'Verduras',
-        new: 'New',
-        newModalTitle: 'Add new product',
-        noResults: 'No results',
-        sectionsHeading: 'Sections',
-        stockHeading: 'Stock',
-        skuHeading: 'SKU',
-        title: 'Products',
-        upload: 'Upload',
-        uploadModalTitle: 'Products Upload'
-    },
-    es: {
-        enabledHeading: 'Activar',
-        homepage: 'Página Principal',
-        fotocopias: 'Fotocopias',
-        imagesHeading: 'Imagenes',
-        verduras: 'Verduras',
-        nameHeading: 'Nombre',
-        new: 'Nuevo',
-        newModalTitle: 'Crear nuevo Producto',
-        noResults: 'No existen Productos momentaneamente',
-        sectionsHeading: 'Secciones',
-        stockHeading: 'Stock',
-        skuHeading: 'SKU',
-        title: 'Productos',
-        upload: 'Upload',
-        uploadModalTitle: 'Upload de Productos'
-    }
-};
diff --git a/src/components/pages/Admin/Products/AdminProducts.js b/../simple-store/src/components/pages/Admin/Products/AdminProducts.js
index b09dcba..c3e9d51 100644
--- a/src/components/pages/Admin/Products/AdminProducts.js
+++ b/../simple-store/src/components/pages/Admin/Products/AdminProducts.js
@@ -3,11 +3,11 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
 import ProductsAddStore from '../../../../stores/Products/ProductsAddStore';
 import ProductsListStore from '../../../../stores/Products/ProductsListStore';
 
@@ -28,18 +28,15 @@ import Text from '../../../common/typography/Text';
 import AdminProductsAddForm from './AdminProductsAddForm';
 import AdminProductsUpload from './AdminProductsUpload';
 
-// Translation data for this component
-import intlData from './AdminProducts.intl';
-
 /**
  * Component
  */
 class AdminProducts extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -60,7 +57,7 @@ class AdminProducts extends React.Component {
         require('./AdminProducts.scss');
 
         // Load required data
-        this.context.executeAction(fetchProducts, {perPage: 200, sort: 'sku'});
+        this.context.executeAction(fetchProducts, {perPage: 200, sort: '-date'});
     }
 
     componentWillReceiveProps(nextProps) {
@@ -69,11 +66,7 @@ class AdminProducts extends React.Component {
         // product edit page
         if (this.state.addProduct.loading === true
             && nextProps._addProduct.loading === false && !nextProps._addProduct.error) {
-            let params = {
-                locale: this.context.getStore(IntlStore).getCurrentLocale(),
-                productId: nextProps._addProduct.product.id
-            };
-            this.context.router.transitionTo('adm-product-edit', params);
+            this.props.history.push(`/${this.context.intl.locale}/adm/products/${nextProps._addProduct.product.id}`);
         }
 
         this.setState({
@@ -117,14 +110,17 @@ class AdminProducts extends React.Component {
 
     render() {
 
+        //
+        // Helper methods & variables
+        //
 
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let uploadModal = () => {
             if (this.state.showUploadModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'uploadModalTitle')}
+                    <Modal title={intl.formatMessage({id: 'uploadProductsModalTitle'})}
                            onCloseClick={this.handleUploadCloseClick}>
                         <AdminProductsUpload onCancelClick={this.handleUploadCloseClick}
                                              onSubmitClick={this.handleUploadSubmitClick} />
@@ -136,7 +132,7 @@ class AdminProducts extends React.Component {
         let newProductModal = () => {
             if (this.state.showNewProductModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'newModalTitle')}
+                    <Modal title={intl.formatMessage({id: 'newProductModalTitle'})}
                            onCloseClick={this.handleNewProductCloseClick}>
                        <AdminProductsAddForm
                            loading={this.state.addProduct.loading}
@@ -155,9 +151,7 @@ class AdminProducts extends React.Component {
                         return (
                             <div key={idx} className="admin-products__label">
                                 <Label>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, section)}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id={section} />
                                 </Label>
                             </div>
                         );
@@ -167,24 +161,12 @@ class AdminProducts extends React.Component {
         };
 
         let headings = [
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'skuHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'nameHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'stockHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'imagesHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'sectionsHeading')}
-                locales={intlStore.getCurrentLocale()} />,
-            <FormattedMessage
-                message={intlStore.getMessage(intlData, 'enabledHeading')}
-                locales={intlStore.getCurrentLocale()} />
+            <FormattedMessage id="skuHeading" />,
+            <FormattedMessage id="nameHeading"/>,
+            <FormattedMessage id="stockHeading" />,
+            <FormattedMessage id="imagesHeading" />,
+            <FormattedMessage id="sectionsHeading" />,
+            <FormattedMessage id="enabledHeading" />
         ];
 
         let rows = this.state.products.map(function (product) {
@@ -193,14 +175,12 @@ class AdminProducts extends React.Component {
                 data: [
                     <Text size="medium">{product.sku}</Text>,
                     <span className="admin-products__link">
-                        <Link to="adm-product-edit" params={Object.assign({productId: product.id}, routeParams)}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(product.name)}
-                                locales={intlStore.getCurrentLocale()} />
+                        <Link to={`/${locale}/adm/products/${product.id}`} >
+                            {product.name[locale]}
                         </Link>
                     </span>,
-                    <StatusIndicator status={(product.stock > 5) ? 'success' : 'error'} />,
-                    <StatusIndicator status={(product.images.length > 0) ? 'success' : 'default'} />,
+                    <StatusIndicator status={(product.stock > 0) ? 'default' : 'error'} />,
+                    <StatusIndicator status={(product.images.length > 0) ? 'default' : 'error'} />,
                     <Text size="medium">{getProductSections(product)}</Text>,
                     <StatusIndicator status={(product.enabled === true) ? 'success' : 'default'} />
                 ]
@@ -218,24 +198,18 @@ class AdminProducts extends React.Component {
                 <div className="admin-products__header">
                     <div className="admin-products__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminProductsHeader" />
                         </Heading>
                     </div>
                     <div className="admin-products__toolbar">
                         <div className="admin-products__toolbar-button">
                             <Button type="default" onClick={this.handleUploadClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'upload')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="uploadButton" />
                             </Button>
                         </div>
                         <div className="admin-products__toolbar-button">
                             <Button type="primary" onClick={this.handleNewProductClick}>
-                                <FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'new')}
-                                    locales={intlStore.getCurrentLocale()} />
+                                <FormattedMessage id="newButton" />
                             </Button>
                         </div>
                     </div>
@@ -258,8 +232,7 @@ class AdminProducts extends React.Component {
                 {!this.state.loading && this.state.products.length === 0 ?
                     <div className="admin-products__no-results">
                         <Text size="small">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'noResults')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="noResults" />
                         </Text>
                     </div>
                     :
diff --git a/src/components/pages/Admin/Products/AdminProductsAddForm.intl.js b/src/components/pages/Admin/Products/AdminProductsAddForm.intl.js
deleted file mode 100644
index 29fea85..0000000
--- a/src/components/pages/Admin/Products/AdminProductsAddForm.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        add: 'Add',
-        cancel: 'Cancel',
-        fieldRequired: 'This field is required',
-        name: 'Name',
-        sku: 'SKU',
-        type: 'Type'
-    },
-    es: {
-        add: 'Agregar',
-        cancel: 'Cancelar',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre',
-        sku: 'SKU',
-        type: 'Tipo'
-    }
-};
diff --git a/src/components/pages/Admin/Products/AdminProductsAddForm.js b/../simple-store/src/components/pages/Admin/Products/AdminProductsAddForm.js
index afee247..7c36a38 100644
--- a/src/components/pages/Admin/Products/AdminProductsAddForm.js
+++ b/../simple-store/src/components/pages/Admin/Products/AdminProductsAddForm.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import InputField from '../../../common/forms/InputField';
 import Select from '../../../common/forms/Select';
 
-// Translation data for this component
-import intlData from './AdminProductsAddForm.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,13 +19,14 @@ let debug = require('debug')('tienda765');
 class AdminProductsAddForm extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
 
     state = {
-        name: {en: '', es: ''},
+        name: {uk: '', ru:'', en: ''},
         sku: undefined,
         fieldErrors: {}
     };
@@ -56,18 +52,21 @@ class AdminProductsAddForm extends React.Component {
     };
 
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.sku) {
-            fieldErrors.sku = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.sku = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.en) {
-            fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.uk) {
+            fieldErrors.nameUA = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.name.es) {
-            fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.name.ru) {
+            fieldErrors.nameRU = intl.formatMessage({id: 'fieldRequired'});
+        }
+        if (!this.state.name.en) {
+            fieldErrors.nameEN = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -87,7 +86,7 @@ class AdminProductsAddForm extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         let fieldError = (field) => {
             return this.props.error ? this.props.error[field] : this.state.fieldErrors[field];
@@ -99,33 +98,34 @@ class AdminProductsAddForm extends React.Component {
         return (
             <div className="admin-products-add-form">
                 <div className="admin-products-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'sku')}
+                    <InputField label={intl.formatMessage({id: 'skuHeading'})}
                                 onChange={this.handleSKUChange}
                                 error={fieldError('sku')} />
                 </div>
                 <div className="admin-products-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
-                                onChange={this.handleNameChange.bind(null, 'en')}
-                                error={fieldError('nameEN')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (UA)'}
+                                onChange={this.handleNameChange.bind(null, 'uk')}
+                                error={fieldError('nameUA')} />
+                </div>
+                <div className="admin-products-add-form__item">
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (RU)'}
+                                onChange={this.handleNameChange.bind(null, 'ru')}
+                                error={fieldError('nameRU')} />
                 </div>
                 <div className="admin-products-add-form__item">
-                    <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                onChange={this.handleNameChange.bind(null, 'es')}
-                                error={fieldError('nameES')} />
+                    <InputField label={intl.formatMessage({id: 'name'}) + ' (EN)'}
+                                onChange={this.handleNameChange.bind(null, 'en')}
+                                error={fieldError('nameEN')} />
                 </div>
                 <div className="admin-products-add-form__actions">
                     <div className="admin-products-add-form__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-products-add-form__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'add')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="addButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Admin/Products/AdminProductsDelete.js b/src/components/pages/Admin/Products/AdminProductsDelete.js
deleted file mode 100644
index 16dc32b..0000000
--- a/src/components/pages/Admin/Products/AdminProductsDelete.js
+++ /dev/null
@@ -1,88 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-import { Link} from 'react-router';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../../../common/buttons/Button';
-import Select from '../../../common/forms/Select';
-import Text from '../../../common/typography/Text';
-
-// Translation data for this component
-import intlData from './AdminProductsEdit.intl';
-import deleteProduct from '../../../../actions/Admin/deleteProduct';
-
-// Instantiate logger
-let debug = require('debug')('tienda765');
-
-/**
- * Component
- */
-class AdminProductsDelete extends React.Component {
-
-    static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
-    };
-
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./AdminProductsUpload.scss');
-    }
-
-    //*** Template ***//
-
-    render() {
-
-        //
-        // Helper methods & variables
-        //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
-
-        //
-        // Return
-        //
-        return (
-            <div className="admin-products-upload">
-                <div className="admin-products-upload__actions">
-                    <div className="admin-products-upload__button">
-                        <Button type="default" onClick={this.props.onCancelClick}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
-                        </Button>
-                    </div>
-                    <div className="admin-products-upload__button">
-                      <Link to="adm-products" params={routeParams}>
-                        <Button type="primary" onClick={this.props.onSubmitClick}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'delete')}
-                                locales={intlStore.getCurrentLocale()} />
-                        </Button>
-                      </Link>
-                    </div>
-                </div>
-            </div>
-        );
-    }
-}
-
-/**
- * Default Props
- */
-AdminProductsDelete.defaultProps = {
-    onCancelClick: function () { debug('onCancelClick not defined'); }
-};
-/**
- * Exports
- */
-export default AdminProductsDelete;
diff --git a/src/components/pages/Admin/Products/AdminProductsEdit.intl.js b/src/components/pages/Admin/Products/AdminProductsEdit.intl.js
deleted file mode 100644
index 0b5551d..0000000
--- a/src/components/pages/Admin/Products/AdminProductsEdit.intl.js
+++ /dev/null
@@ -1,58 +0,0 @@
-export default {
-    en: {
-        back: 'Back',
-        delete: 'Delete item',
-        categories: 'Categories',
-        collections: 'Collections',
-        currency: 'Currency',
-        deleteProductModalTitle: 'You confirme the deletion?',
-        description: 'Description',
-        enabled: 'Enabled',
-        fieldRequired: 'This field is required',
-        homepage: 'Homepage',
-        fotocopias: 'Fotocopias',
-        verduras: 'Verduras',
-        cajon: 'Box',
-        listPrice: 'List Price',
-        mainCategory: 'Main Category',
-        mainCollection: 'Main Collection',
-        name: 'Name',
-        pricing: 'Pricing',
-        retailPrice: 'Retail Price',
-        save: 'Save',
-        sections: 'Featured in Sections',
-        sku: 'SKU',
-        stock: 'Stock',
-        title: 'Edit Product',
-        type: 'Type',
-        vat: '% VAT (Included)'
-    },
-    es: {
-        back: 'Volver',
-        delete: 'Borrar item',
-        categories: 'Categorias',
-        collections: 'Colecciones',
-        currency: 'Currency',
-        deleteProductModalTitle: 'Confirma la eliminacion?',
-        description: 'Descripción',
-        verduras: 'Verduras',
-        enabled: 'Activo',
-        fieldRequired: 'Este campo es obligatorio',
-        homepage: 'Página Principal',
-        fotocopias: 'Fotocopias',
-        cajon: 'Cajón',
-        listPrice: 'Lista de Precios',
-        mainCategory: 'Categoria Principal',
-        mainCollection: 'Colección Principal',
-        name: 'Nombre',
-        pricing: 'Precio',
-        retailPrice: 'Precio Final',
-        save: 'Guardar',
-        sections: 'Destacados en Secciones',
-        sku: 'SKU',
-        stock: 'Stock',
-        title: 'Editar Producto',
-        type: 'Tipo',
-        vat: '% IVA (Incluído)'
-    }
-};
diff --git a/src/components/pages/Admin/Products/AdminProductsEdit.js b/../simple-store/src/components/pages/Admin/Products/AdminProductsEdit.js
index 35c11cb..d021e6b 100644
--- a/src/components/pages/Admin/Products/AdminProductsEdit.js
+++ b/../simple-store/src/components/pages/Admin/Products/AdminProductsEdit.js
@@ -3,8 +3,9 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 // Flux
 import CollectionsStore from '../../../../stores/Collections/CollectionsStore';
@@ -14,11 +15,6 @@ import ProductDetailsStore from '../../../../stores/Products/ProductDetailsStore
 import fetchProductAndCheckIfFound from '../../../../actions/Products/fetchProductAndCheckIfFound';
 import updateProduct from '../../../../actions/Admin/updateProduct';
 
-// Delete
-import DeleteHandler from '../../../common/deleteHandler/DeleteHandler';
-import deleteProduct from '../../../../actions/Admin/deleteProduct';
-import Modal from '../../../common/modals/Modal';
-
 // Required components
 import Button from '../../../common/buttons/Button';
 import Checkbox from '../../../common/forms/Checkbox';
@@ -33,17 +29,15 @@ import Spinner from '../../../common/indicators/Spinner';
 import Textarea from '../../../common/forms/Textarea';
 import ToggleSwitch from '../../../common/buttons/ToggleSwitch';
 
-// Translation data for this component
-import intlData from './AdminProductsEdit.intl';
-
 /**
  * Component
  */
 class AdminProductsEdit extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -54,8 +48,7 @@ class AdminProductsEdit extends React.Component {
         loading: this.context.getStore(ProductDetailsStore).isLoading(),
         categories: this.context.getStore(CollectionsStore).getCollections(['category']),
         collections: this.context.getStore(CollectionsStore).getCollections(['collection']),
-        fieldErrors: {},
-        showDeleteProductModal: false
+        fieldErrors: {}
     };
 
     //*** Component Lifecycle ***//
@@ -66,7 +59,7 @@ class AdminProductsEdit extends React.Component {
         require('./AdminProductsEdit.scss');
 
         // Load required data
-        this.context.executeAction(fetchProductAndCheckIfFound, this.props.params.productId);
+        this.context.executeAction(fetchProductAndCheckIfFound, this.props.match.params.productId);
     }
 
     componentWillReceiveProps(nextProps) {
@@ -76,8 +69,9 @@ class AdminProductsEdit extends React.Component {
         if (nextProps._error && nextProps._error.validation && nextProps._error.validation.keys) {
             nextProps._error.validation.keys.forEach(function (field) {
                 if (field === 'description') {
+                    fieldErrors['description.uk'] = nextProps._error.validation.details[field];
+                    fieldErrors['description.ru'] = nextProps._error.validation.details[field];
                     fieldErrors['description.en'] = nextProps._error.validation.details[field];
-                    fieldErrors['description.es'] = nextProps._error.validation.details[field];
                 } else {
                     fieldErrors[field] = nextProps._error.validation.details[field];
                 }
@@ -159,40 +153,33 @@ class AdminProductsEdit extends React.Component {
         this.setState({product: product});
     };
 
-    handleImageLibraryChange = (images) => {
+    handlePricingIntlChange = (field, locale, value) => {
         let product = this.state.product;
-        product.images = images;
+        product.pricing[field][locale] = value;
         this.setState({product: product});
     };
 
-    // Delete Product Modal
-
-    handleDeleteProductModalClick = () => {
-        this.setState({showDeleteProductModal: true});
-    };
-
-    handleDeleteCancelClick = () => {
-        this.setState({showDeleteProductModal: false});
-    };
-
-    handleDeleteProductClick = () => {
+    handleImageLibraryChange = (images) => {
         let product = this.state.product;
-        this.context.executeAction(deleteProduct, product.id);
-        this.setState({showDeleteProductModal: false});
+        product.images = images;
+        this.setState({product: product});
     };
 
     handleSaveClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         // Client-side validations
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
-        if (!this.state.product.name.en) {
-            fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.product.name.uk) {
+            fieldErrors.nameUA = intl.formatMessage({id: 'fieldRequired'});
         }
-        if (!this.state.product.name.es) {
-            fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
+        if (!this.state.product.name.ru) {
+            fieldErrors.nameRU = intl.formatMessage({id: 'fieldRequired'});
+        }
+        if (!this.state.product.name.en) {
+            fieldErrors.nameEN = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -230,8 +217,8 @@ class AdminProductsEdit extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let getCollectionType = (collectionId) => {
             let collection = this.context.getStore(CollectionsStore).getCollection(collectionId);
@@ -244,18 +231,6 @@ class AdminProductsEdit extends React.Component {
             }
         };
 
-        /// Delete Modal
-        let deleteProductModal = () => {
-            if (this.state.showDeleteProductModal) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'deleteProductModalTitle')}>
-                    <DeleteHandler onCancelClick={this.handleDeleteCancelClick}
-                                         onSubmitClick={this.handleDeleteProductClick} />
-                    </Modal>
-                );
-            }
-        };
-
         // Stuff that won't work if we are in "404 Not Found", thus, no product object
         let productCategories;
         let productCollections;
@@ -266,7 +241,7 @@ class AdminProductsEdit extends React.Component {
                 let category = this.context.getStore(CollectionsStore).getCollection(collectionId);
                 return {
                     value: category.id,
-                    name: intlStore.getMessage(category.name)
+                    name: category.name[locale]
                 }
             });
 
@@ -276,7 +251,7 @@ class AdminProductsEdit extends React.Component {
                 let collection = this.context.getStore(CollectionsStore).getCollection(collectionId);
                 return {
                     value: collection.id,
-                    name: intlStore.getMessage(collection.name)
+                    name: collection.name[locale]
                 }
             });
         }
@@ -290,40 +265,26 @@ class AdminProductsEdit extends React.Component {
         //
         return (
             <div className="admin-products-edit">
-            {deleteProductModal()}
                 <div className="admin-products-edit__header">
                     <div className="admin-products-edit__title">
                         <Heading size="medium">
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="adminProductsEditHeader" />
                         </Heading>
                     </div>
                     {this.state.product ?
                         <div className="admin-products-edit__toolbar">
                             <div className="admin-products-edit__toolbar-item">
-                                <Link to="adm-products" params={routeParams}>
+                                <Link to={`/${locale}/adm/products`}>
                                     <Button type="default" disabled={this.state.loading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'back')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="backButton" />
                                     </Button>
                                 </Link>
                             </div>
                             <div className="admin-products-edit__toolbar-item">
                                 <Button type="primary" onClick={this.handleSaveClick} disabled={this.state.loading}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'save')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="saveButton" />
                                 </Button>
                             </div>
-                            <div className="admin-products-edit__toolbar-item">
-                              <Button type="primary" onClick={this.handleDeleteProductModalClick} disabled={this.state.loading}>
-                                  <FormattedMessage
-                                      message={intlStore.getMessage(intlData, 'delete')}
-                                      locales={intlStore.getCurrentLocale()} />
-                              </Button>
-                          </div>
                         </div>
                         :
                         null
@@ -346,27 +307,27 @@ class AdminProductsEdit extends React.Component {
                     <div className="admin-products-edit__form">
                         <div className="admin-products-edit__left-column">
                             <div className="admin-products-edit__form-item">
-                                <ToggleSwitch label={intlStore.getMessage(intlData, 'enabled')}
+                                <ToggleSwitch label={intl.formatMessage({id: 'enabledHeading'})}
                                               enabled={this.state.product.enabled === true}
                                               onChange={this.handleEnabledChange} />
                             </div>
                             <div className="admin-products-edit__form-item">
                                 <InlineItems>
-                                    <InputField label={intlStore.getMessage(intlData, 'sku')}
+                                    <InputField label={intl.formatMessage({id: 'skuHeading'})}
                                                 onChange={this.handleFieldChange.bind(null, 'sku')}
                                                 value={this.state.product.sku}
                                                 error={fieldError('sku')} />
-                                    <InputField label={intlStore.getMessage(intlData, 'stock')}
+                                    <InputField label={intl.formatMessage({id: 'stockHeading'})}
                                                 onChange={this.handleFieldChange.bind(null, 'stock')}
                                                 value={this.state.product.stock}
                                                 error={fieldError('stock')} />
-                                    <Select label={intlStore.getMessage(intlData, 'mainCategory')}
+                                    <Select label={intl.formatMessage({id: 'mainCategory'})}
                                             placeholder
                                             options={productCategories}
                                             value={this.state.product.metadata.mainCategory}
                                             error={fieldError('mainCategory')}
                                             onChange={this.handleMainCategoryChange} />
-                                    <Select label={intlStore.getMessage(intlData, 'mainCollection')}
+                                    <Select label={intl.formatMessage({id: 'mainCollection'})}
                                             placeholder
                                             options={productCollections}
                                             value={this.state.product.metadata.mainCollection}
@@ -375,51 +336,69 @@ class AdminProductsEdit extends React.Component {
                                 </InlineItems>
                             </div>
                             <div className="admin-products-edit__form-item">
-                                <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
+                                <InlineItems label={<FormattedMessage id="sections" />}>
+                                    <Checkbox label={intl.formatMessage({id: 'homepage'})}
+                                              onChange={this.handleSectionChange.bind(null, 'homepage')}
+                                              checked={this.state.product.tags && this.state.product.tags.indexOf('homepage') !== -1} />
+                                </InlineItems>
+                            </div>
+                            <div className="admin-products-edit__form-item">
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (UA)'}
+                                            onChange={this.handleNameChange.bind(null, 'uk')}
+                                            value={this.state.product.name.uk}
+                                            error={fieldError('nameUA')} />
+                            </div>
+                            <div className="admin-products-edit__form-item">
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (RU)'}
+                                            onChange={this.handleNameChange.bind(null, 'ru')}
+                                            value={this.state.product.name.ru}
+                                            error={fieldError('nameRU')} />
+                            </div>
+                            <div className="admin-products-edit__form-item">
+                                <InputField label={intl.formatMessage({id: 'name'}) + ' (EN)'}
                                             onChange={this.handleNameChange.bind(null, 'en')}
                                             value={this.state.product.name.en}
                                             error={fieldError('nameEN')} />
                             </div>
                             <div className="admin-products-edit__form-item">
-                                <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                                            onChange={this.handleNameChange.bind(null, 'es')}
-                                            value={this.state.product.name.es}
-                                            error={fieldError('nameES')} />
+                                <Textarea label={intl.formatMessage({id: 'description'}) + ' (UA)'}
+                                          rows="5"
+                                          onChange={this.handleIntlFieldChange.bind(null, 'description', 'uk')}
+                                          value={this.state.product.description ? this.state.product.description.uk : null}
+                                          error={fieldError('description.uk')} />
                             </div>
                             <div className="admin-products-edit__form-item">
-                                <Textarea label={intlStore.getMessage(intlData, 'description') + ' (EN)'}
+                                <Textarea label={intl.formatMessage({id: 'description'}) + ' (RU)'}
                                           rows="5"
-                                          onChange={this.handleIntlFieldChange.bind(null, 'description', 'en')}
-                                          value={this.state.product.description ? this.state.product.description.en : null}
-                                          error={fieldError('description.en')} />
+                                          onChange={this.handleIntlFieldChange.bind(null, 'description', 'ru')}
+                                          value={this.state.product.description ? this.state.product.description.ru : null}
+                                          error={fieldError('description.ru')} />
                             </div>
                             <div className="admin-products-edit__form-item">
-                                <Textarea label={intlStore.getMessage(intlData, 'description') + ' (ES)'}
+                                <Textarea label={intl.formatMessage({id: 'description'}) + ' (EN)'}
                                           rows="5"
-                                          onChange={this.handleIntlFieldChange.bind(null, 'description', 'es')}
-                                          value={this.state.product.description ? this.state.product.description.es : null}
-                                          error={fieldError('description.es')} />
+                                          onChange={this.handleIntlFieldChange.bind(null, 'description', 'en')}
+                                          value={this.state.product.description ? this.state.product.description.en : null}
+                                          error={fieldError('description.en')} />
                             </div>
                             <div className="admin-products-edit__form-item">
-                                <InlineItems label={<FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'pricing')}
-                                    locales={intlStore.getCurrentLocale()} />}>
-                                    <InputField label={intlStore.getMessage(intlData, 'currency')}
+                                <InlineItems label={<FormattedMessage id="pricing" />}>
+                                    <InputField label={intl.formatMessage({id: 'currency'})}
                                                 labelSize="small" labelWeight="normal"
                                                 value={this.state.product.pricing.currency}
-                                                onChange={this.handlePricingChange.bind(null, 'currency')}
+                                                disabled
                                                 error={fieldError('pricing.currency')} />
-                                    <InputField label={intlStore.getMessage(intlData, 'listPrice')}
+                                    <InputField label={intl.formatMessage({id: 'listPrice'})}
                                                 labelSize="small" labelWeight="normal"
                                                 value={this.state.product.pricing.list}
                                                 onChange={this.handlePricingChange.bind(null, 'list')}
                                                 error={fieldError('pricing.list')} />
-                                    <InputField label={intlStore.getMessage(intlData, 'retailPrice')}
+                                    <InputField label={intl.formatMessage({id: 'retailPrice'})}
                                                 labelSize="small" labelWeight="normal"
                                                 value={this.state.product.pricing.retail}
                                                 onChange={this.handlePricingChange.bind(null, 'retail')}
                                                 error={fieldError('pricing.retail')} />
-                                    <InputField label={intlStore.getMessage(intlData, 'vat')}
+                                    <InputField label={intl.formatMessage({id: 'vat'})}
                                                 labelSize="small" labelWeight="normal"
                                                 value={this.state.product.pricing.vat}
                                                 onChange={this.handlePricingChange.bind(null, 'vat')}
@@ -428,6 +407,7 @@ class AdminProductsEdit extends React.Component {
                             </div>
                             <div className="admin-products-edit__form-item">
                                 <ImageLibraryManager images={this.state.product.images}
+                                                     resource="products"
                                                      onChange={this.handleImageLibraryChange} />
                             </div>
                         </div>
@@ -436,36 +416,16 @@ class AdminProductsEdit extends React.Component {
                                 <CollectionPicker collections={this.state.categories}
                                                   checked={this.state.product.collections}
                                                   onChange={this.handleCollectionPickerChange}>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'categories')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="categories" />
                                 </CollectionPicker>
                             </div>
                             <div className="admin-products-edit__form-item">
                                 <CollectionPicker collections={this.state.collections}
                                                   checked={this.state.product.collections}
                                                   onChange={this.handleCollectionPickerChange}>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'collections')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="collections" />
                                 </CollectionPicker>
                             </div>
-                            <div className="admin-products-edit__form-item">
-                                <InlineItems label={<FormattedMessage
-                                    message={intlStore.getMessage(intlData, 'sections')}
-                                    locales={intlStore.getCurrentLocale()} />}>
-                                    <Checkbox label={intlStore.getMessage(intlData, 'homepage')}
-                                              onChange={this.handleSectionChange.bind(null, 'homepage')}
-                                              checked={this.state.product.tags && this.state.product.tags.indexOf('homepage') !== -1} />
-                                    <Checkbox label={intlStore.getMessage(intlData, 'fotocopias')}
-                                              onChange={this.handleSectionChange.bind(null, 'fotocopias')}
-                                              checked={this.state.product.tags && this.state.product.tags.indexOf('fotocopias') !== -1} />
-                                    <Checkbox label={intlStore.getMessage(intlData, 'verduras')}
-                                              onChange={this.handleSectionChange.bind(null, 'verduras')}
-                                              checked={this.state.product.tags && this.state.product.tags.indexOf('verduras') !== -1} />
-                                    <Checkbox label={intlStore.getMessage(intlData, 'cajon')}
-                                              onChange={this.handleSectionChange.bind(null, 'cajon')}
-                                              checked={this.state.product.tags && this.state.product.tags.indexOf('cajon') !== -1} />
-                                </InlineItems>
-                            </div>
                         </div>
                     </div>
                     :
diff --git a/src/components/pages/Admin/Products/AdminProductsUpload.intl.js b/src/components/pages/Admin/Products/AdminProductsUpload.intl.js
deleted file mode 100644
index 26cc953..0000000
--- a/src/components/pages/Admin/Products/AdminProductsUpload.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        catalog: 'Catalog',
-        cancel: 'Cancel',
-        fieldRequired: 'This field is required',
-        images: 'Images',
-        submit: 'Submit',
-        type: 'Content Type'
-    },
-    es: {
-        catalog: 'Catálogo',
-        cancel: 'Cancelar',
-        fieldRequired: 'Este campo es obligatorio',
-        images: 'Imagenes',
-        submit: 'Ingresar',
-        type: 'Contenido'
-    }
-};
diff --git a/src/components/pages/Admin/Products/AdminProductsUpload.js b/../simple-store/src/components/pages/Admin/Products/AdminProductsUpload.js
index 8c23e12..411bb8c 100644
--- a/src/components/pages/Admin/Products/AdminProductsUpload.js
+++ b/../simple-store/src/components/pages/Admin/Products/AdminProductsUpload.js
@@ -2,21 +2,16 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../../stores/Application/IntlStore';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../../common/buttons/Button';
 import Select from '../../../common/forms/Select';
 import Text from '../../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './AdminProductsUpload.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -24,7 +19,8 @@ let debug = require('debug')('tienda765');
 class AdminProductsUpload extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -54,15 +50,15 @@ class AdminProductsUpload extends React.Component {
     };
 
     handleSubmitClick = () => {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         this.setState({fieldErrors: {}});
         let fieldErrors = {};
         if (!this.state.type) {
-            fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.type = intl.formatMessage({id: 'fieldRequired'});
         }
         if (!this.state.file) {
-            fieldErrors.file = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors.file = intl.formatMessage({id: 'fieldRequired'});
         }
         this.setState({fieldErrors: fieldErrors});
 
@@ -75,18 +71,18 @@ class AdminProductsUpload extends React.Component {
     };
 
     //*** Template ***//
-    
+
     render() {
 
         //
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         let uploadTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'catalog'), value: 'catalog'},
-            {name: intlStore.getMessage(intlData, 'images'), value: 'images'}
+            {name: intl.formatMessage({id: 'catalogHeading'}), value: 'catalog'},
+            {name: intl.formatMessage({id: 'imagesHeading'}), value: 'images'}
         ];
 
         //
@@ -95,7 +91,7 @@ class AdminProductsUpload extends React.Component {
         return (
             <div className="admin-products-upload">
                 <div className="admin-products-upload__form-item">
-                    <Select label={intlStore.getMessage(intlData, 'type')}
+                    <Select label={intl.formatMessage({id: 'type'})}
                             placeholder
                             options={uploadTypeOptions}
                             onChange={this.handleTypeChange}
@@ -114,16 +110,12 @@ class AdminProductsUpload extends React.Component {
                 <div className="admin-products-upload__actions">
                     <div className="admin-products-upload__button">
                         <Button type="default" onClick={this.props.onCancelClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'cancel')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="cancelButton" />
                         </Button>
                     </div>
                     <div className="admin-products-upload__button">
                         <Button type="primary" onClick={this.handleSubmitClick} disabled={this.props.loading}>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'submit')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="uploadButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Application/Application.js b/../simple-store/src/components/pages/Application/Application.js
index 573f45e..7070862 100644
--- a/src/components/pages/Application/Application.js
+++ b/../simple-store/src/components/pages/Application/Application.js
@@ -2,20 +2,25 @@
  * Imports
  */
 import React from 'react';
+import async from 'async';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {RouteHandler} from 'react-router';
+import { renderRoutes } from 'react-router-config';
+import { injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
+import config from '../../../config';
 
 // Flux
 import AccountStore from '../../../stores/Account/AccountStore';
 import ApplicationStore from '../../../stores/Application/ApplicationStore';
 import CollectionsStore from '../../../stores/Collections/CollectionsStore';
 import DrawerStore from '../../../stores/Application/DrawerStore';
-import IntlStore from '../../../stores/Application/IntlStore';
 import NotificationQueueStore from '../../../stores/Application/NotificationQueueStore';
 import PageLoadingStore from '../../../stores/Application/PageLoadingStore';
 
+import fetchAccountDetails from '../../../actions/Account/fetchAccountDetails';
+import fetchUserLastOrder from '../../../actions/Orders/fetchUserLastOrder';
 import popNotification from '../../../actions/Application/popNotification';
 import triggerDrawer from '../../../actions/Application/triggerDrawer';
 
@@ -30,15 +35,19 @@ import SideMenu from '../../common/navigation/SideMenu';
 
 import PopTopNotification from '../../common/notifications/PopTopNotification';
 
+// Instantiate debugger
+let debug = require('debug')('simple-store');
+
+
 /**
  * Component
  */
 class Application extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -48,13 +57,12 @@ class Application extends React.Component {
         collectionsTree: this.context.getStore(CollectionsStore).getCollectionsTree(),
         notification: this.context.getStore(NotificationQueueStore).pop(),
         openedDrawer: this.context.getStore(DrawerStore).getOpenedDrawer(),
-        pageLoading: this.context.getStore(PageLoadingStore).isLoading()
+        pageLoading: this.context.getStore(PageLoadingStore).isLoading(),
     };
 
     //*** Component Lifecycle ***//
 
     componentDidMount() {
-
         // Load styles
         require('./Application.scss');
     }
@@ -65,7 +73,7 @@ class Application extends React.Component {
             collectionsTree: nextProps._collectionsTree,
             notification: nextProps._notification,
             openedDrawer: nextProps._openedDrawer,
-            pageLoading: nextProps._pageLoading
+            pageLoading: nextProps._pageLoading,
         });
     }
 
@@ -82,18 +90,13 @@ class Application extends React.Component {
     //*** Template ***//
 
     render() {
-
-        let intlStore = this.context.getStore(IntlStore);
-
         // Main navigation menu items
+        let locale = this.context.intl.locale;
         let collections = this.state.navCollections.map(function (collection) {
+            let name = collection.name[locale];
             return {
-                name: intlStore.getMessage(collection.name),
-                to: 'collection-slug',
-                params: {
-                    collectionId: collection.id,
-                    collectionSlug: slugify(intlStore.getMessage(collection.name))
-                }
+                name: name,
+                to: `/${locale}/collections/${collection.id}/${slugify(name)}`,
             };
         });
 
@@ -114,7 +117,7 @@ class Application extends React.Component {
         }
 
         // Check if user logged-in is an Admin
-        //let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
+        let isAdmin = this.context.getStore(AccountStore).isAuthorized(['admin']);
 
         // Return
         return (
@@ -134,6 +137,7 @@ class Application extends React.Component {
                     :
                     null
                 }
+
                 <Drawer position="left" open={this.state.openedDrawer === 'menu'}>
                     <SideMenu collections={collections} />
                 </Drawer>
@@ -144,13 +148,22 @@ class Application extends React.Component {
                     <div className="application__overlay-content"></div>
                 </div>
                 <div className={contentClass}>
-                    <Header collections={collections} collectionsTree={this.state.collectionsTree} />
+                    {isAdmin ?
+                        <div className="application__admin-warning">
+                            <Heading>*** ADMIN ACCOUNT ***</Heading>
+                        </div>
+                        :
+                        null
+                    }
+                    <Header collections={collections}
+                            collectionsTree={this.state.collectionsTree}
+                            location={this.props.location} />
                     <div className="application__container-wrapper">
                         <div className="application__container-content">
-                            <RouteHandler />
+                            {renderRoutes(this.props.route.routes)}
                         </div>
                     </div>
-                    <Footer />
+                    <Footer brandName={config.app.brand}/>
                 </div>
             </div>
         );
@@ -165,14 +178,14 @@ Application = connectToStores(Application, [
     CollectionsStore,
     DrawerStore,
     NotificationQueueStore,
-    PageLoadingStore
+    PageLoadingStore,
 ], (context) => {
     return {
         _navCollections: context.getStore(CollectionsStore).getMainNavigationCollections(),
         _collectionsTree: context.getStore(CollectionsStore).getCollectionsTree(),
         _notification: context.getStore(NotificationQueueStore).pop(),
         _openedDrawer: context.getStore(DrawerStore).getOpenedDrawer(),
-        _pageLoading: context.getStore(PageLoadingStore).isLoading()
+        _pageLoading: context.getStore(PageLoadingStore).isLoading(),
     };
 });
 
diff --git a/src/components/pages/Application/Application.scss b/../simple-store/src/components/pages/Application/Application.scss
index a724dbe..8a6946d 100644
--- a/src/components/pages/Application/Application.scss
+++ b/../simple-store/src/components/pages/Application/Application.scss
@@ -19,6 +19,9 @@
 }
 
 .application__container {
+    display: flex;
+    flex-direction: column;
+    min-height: 100vh;
     box-sizing: border-box;
     transition: .25s ease-in-out;
 
@@ -41,13 +44,14 @@
 
 .application__container-wrapper {
     display: flex;
+    flex-grow: 1;
     justify-content: center;
 }
 
 .application__container-content {
     width: 100%;
     max-width: $layout-max-width;
-    padding: 2px 32px 20px 32px;
+    padding: 20px 32px 20px 32px;
 
     @media only screen and (min-width: $layout-max-width) {
         padding-left: 0;
@@ -68,6 +72,7 @@
     visibility: hidden;
     cursor: pointer;
     z-index: 999;
+    transition: .25s ease-in-out;
 
     &--left-drawer-open {
         visibility: visible;
@@ -89,4 +94,6 @@
 .application__overlay-content {
     width: 100%;
     height: 100%;
+    background-color: #fff;
+    opacity: 0.7;
 }
diff --git a/src/components/pages/Articles/ArticlePage.intl.js b/../simple-store/src/components/pages/Articles/ArticlePage.intl.js
index b302a4d..1fbed44 100644
--- a/src/components/pages/Articles/ArticlePage.intl.js
+++ b/../simple-store/src/components/pages/Articles/ArticlePage.intl.js
@@ -1,18 +1,14 @@
 export default {
-    en: {
-        articleNotFound: 'Article Not Found',
-        newsletterCta: 'Did you like the article?',
-        invalidArticle: 'Invalid Article',
-        suggestedArticles: 'Related Articles',
-        suggestedProducts: 'Suggested Products',
-        viewAllArticles: 'View all articles'
+    "uk": {
+        "articleNotFound": "Статтю не знайдено",
+        "invalidArticle": "Немає такої статті",
+    },
+    "ru": {
+        "articleNotFound": "Статья не найдена",
+        "invalidArticle": "Нет такой статьи",
+    },
+    "en": {
+        "articleNotFound": "Article Not Found",
+        "invalidArticle": "Invalid Article",
     },
-    es: {
-        articleNotFound: 'Artículo no encontrado',
-        newsletterCta: 'Le gustó el artículo?',
-        invalidArticle: 'Artículo Inválido',
-        suggestedArticles: 'Artículos Relacionados',
-        suggestedProducts: 'Productos Sugeridos',
-        viewAllArticles: 'Ver todos los artículos'
-    }
 };
diff --git a/src/components/pages/Articles/ArticlePage.js b/../simple-store/src/components/pages/Articles/ArticlePage.js
index 93b3284..96a9b65 100644
--- a/src/components/pages/Articles/ArticlePage.js
+++ b/../simple-store/src/components/pages/Articles/ArticlePage.js
@@ -3,8 +3,9 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import config from '../../../config';
 
@@ -40,14 +41,15 @@ import intlData from './ArticlePage.intl';
 class ArticlePage extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        context.executeAction(fetchContentAndCheckIfFound, params.contentId, done);
+        return context.executeAction(fetchContentAndCheckIfFound, params.contentId, done);
     };
 
     //*** Page Title and Snippets ***//
@@ -57,7 +59,7 @@ class ArticlePage extends React.Component {
         let content = context.getStore(ContentDetailsStore).getContent();
         if (content && content.type === 'article') {
             return {
-                title: intlStore.getMessage(content.name)
+                title: `${intlStore.getMessage(content.name)} - ${config.app.title[intlStore.getCurrentLocale()]}`
             }
         } else if (content && content.type !== 'article') {
             return {
@@ -132,8 +134,7 @@ class ArticlePage extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         let breadcrumbs;
         if (this.state.content) {
@@ -141,11 +142,8 @@ class ArticlePage extends React.Component {
                 let collection = this.context.getStore(CollectionsStore).getCollection(collectionId);
                 if (collection) {
                     return {
-                        name: <FormattedMessage
-                            message={intlStore.getMessage(collection.name)}
-                            locales={intlStore.getCurrentLocale()} />,
-                        to: 'articles',
-                        params: routeParams
+                        name: collection.name[locale],
+                        to: `/${locale}/articles`,
                     };
                 }
             });
@@ -172,23 +170,23 @@ class ArticlePage extends React.Component {
                             </span>
                             {this.state.content.name ?
                                 <span itemProp="name">
-                                    {intlStore.getMessage(this.state.content.name)}
+                                    {this.state.content.name[locale]}
                                 </span>
                                 :
                                 null
                             }
                             {this.state.content.body && this.state.content.body.summary ?
                                 <span itemProp="headline">
-                                    {intlStore.getMessage(this.state.content.body.summary)}
+                                    {this.state.content.body.summary[locale]}
                                 </span>
                                 :
                                 null
                             }
                             <span itemProp="author">
-                                {config.app.title}
+                                {config.app.brand}
                             </span>
                             <span itemProp="publisher">
-                                {config.app.title}
+                                {config.app.brand}
                             </span>
                         </div>
                         {this.state.content.type === 'article' && this.state.content.body.markdown
@@ -197,16 +195,14 @@ class ArticlePage extends React.Component {
                                 <div className="article-page__header">
                                     <div className="article-page__title">
                                         <Heading size="large">
-                                            <FormattedMessage message={intlStore.getMessage(this.state.content.name)}
-                                                              locales={intlStore.getCurrentLocale()} />
+                                            {this.state.content.name[locale]}
                                         </Heading>
                                         <Breadcrumbs links={breadcrumbs} disableResponsive={true} />
                                     </div>
                                     <div className="article-page__articles-home">
-                                        <Link className="article-page__link" to="articles" params={routeParams}>
+                                        <Link className="article-page__link" to={`/${locale}/articles`} >
                                             <i className="fa fa-chevron-left" aria-hidden="true" />
-                                            <FormattedMessage message={intlStore.getMessage(intlData, 'viewAllArticles')}
-                                                              locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="viewAllArticles" />
                                         </Link>
                                     </div>
                                 </div>
@@ -215,7 +211,7 @@ class ArticlePage extends React.Component {
                                         <div className="article-page__triangle"></div>
                                         <div className="article-page__markdown" itemProp="articleBody">
                                             <MarkdownHTML>
-                                                {intlStore.getMessage(this.state.content.body.markdown)}
+                                                {this.state.content.body.markdown[locale]}
                                             </MarkdownHTML>
                                         </div>
                                         <div className="article-page__comments">
@@ -234,8 +230,7 @@ class ArticlePage extends React.Component {
                                         <div className="article-page__newsletter">
                                             <div className="article-page__newsletter-cta">
                                                 <Heading size="small">
-                                                    <FormattedMessage message={intlStore.getMessage(intlData, 'newsletterCta')}
-                                                                      locales={intlStore.getCurrentLocale()} />
+                                                    <FormattedMessage id="newsletterCta" />
                                                 </Heading>
                                             </div>
                                             <NewsletterSubscription signupSource={`Article ${this.state.content.id}`} />
@@ -243,8 +238,7 @@ class ArticlePage extends React.Component {
                                         {this.state.suggestions && this.state.suggestions.length > 0 ?
                                             <div className="article-page__product-suggestions">
                                                 <ProductSuggestions products={this.state.suggestions} loading={this.state.suggestionsLoading}>
-                                                    <FormattedMessage message={intlStore.getMessage(intlData, 'suggestedProducts')}
-                                                                      locales={intlStore.getCurrentLocale()} />
+                                                    <FormattedMessage id="suggestedProducts" />
                                                 </ProductSuggestions>
                                             </div>
                                             :
@@ -253,9 +247,7 @@ class ArticlePage extends React.Component {
                                         {this.state.relatedArticles && this.state.relatedArticles.length > 0 ?
                                             <div className="article-page__article-suggestions">
                                                 <ArticleSuggestions articles={this.state.relatedArticles}>
-                                                    <FormattedMessage
-                                                        message={intlStore.getMessage(intlData, 'suggestedArticles')}
-                                                        locales={intlStore.getCurrentLocale()}/>
+                                                    <FormattedMessage id="suggestedArticles" />
                                                 </ArticleSuggestions>
                                             </div>
                                             :
@@ -267,8 +259,7 @@ class ArticlePage extends React.Component {
                             :
                             <div>
                                 <Text>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'invalidArticle')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="invalidArticle" />
                                 </Text>
                             </div>
                         }
diff --git a/src/components/pages/Articles/ArticlesListingPage.intl.js b/../simple-store/src/components/pages/Articles/ArticlesListingPage.intl.js
index 398caef..7f06d25 100644
--- a/src/components/pages/Articles/ArticlesListingPage.intl.js
+++ b/../simple-store/src/components/pages/Articles/ArticlesListingPage.intl.js
@@ -1,20 +1,11 @@
 export default {
-    en: {
-        headline: 'In our content section you can find relevant and detailed articles about babies from 0 to 18 months. Like our toys, we aim to help and guide you through the several stages of development and understanding better the challenges and achievements that await you :) If you have any questions or doubts, don\'t hesitate to contact us!',
-        newsletterCta: 'Want to hear the news first?',
-        noResults: 'Your selection did not match any results',
-        pageTitle: 'Content',
-        suggestedProducts: 'Suggested Products',
-        title: '{appTitle} Content',
-        viewAllArticles: 'View all articles'
+    "uk": {
+        "title": "Cтатті",
+    },
+    "ru": {
+        "title": "Статьи",
+    },
+    "en": {
+        "title": "Articles",
     },
-    es: {
-        headline: 'En nuestra sección de contenidos podrá encontrar informacion detallada y relevante sobre bebes de 0 a 18 meses. Como nuestros jugetes, queremos ayudar y guiarlo a ustes a traves de las diferentes etapas y mejor entendimiento de las aventuras y los logros que te esperan :) Si tiene alguna pregunta no dude en contactarnos!',
-        newsletterCta: 'Quere recibir las noticias primero?',
-        noResults: 'Su selección no coincidió con algun resultado',
-        pageTitle: 'Contenido',
-        suggestedProducts: 'Productos Sugeridos',
-        title: 'Contenido {appTitle}',
-        viewAllArticles: 'Ver todos los artículos'
-    }
 };
diff --git a/src/components/pages/Articles/ArticlesListingPage.js b/../simple-store/src/components/pages/Articles/ArticlesListingPage.js
index de2fa2a..d10ad53 100644
--- a/src/components/pages/Articles/ArticlesListingPage.js
+++ b/../simple-store/src/components/pages/Articles/ArticlesListingPage.js
@@ -3,9 +3,11 @@
  */
 import React from 'react';
 import async from 'async';
+import queryString from 'query-string';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import config from '../../../config';
 import {slugify} from '../../../utils/strings';
@@ -36,14 +38,15 @@ import intlData from './ArticlesListingPage.intl';
 class ArticlesListingPage extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        async.parallel([
+        return async.parallel([
             function (callback) {
                 context.executeAction(fetchContents, {type: 'article', collections: query.collections}, callback);
             },
@@ -61,7 +64,7 @@ class ArticlesListingPage extends React.Component {
 
     static pageTitleAndSnippets = function (context, params, query) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'pageTitle')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -104,16 +107,16 @@ class ArticlesListingPage extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
+        let query = queryString.parse(this.props.location.search);
 
-        var filters = [
+        let filters = [
             {
-                name: {en: 'Categories', es: 'Categorias'},
+                name: this.context.intl.formatMessage({id: 'categories'}),
                 collections: this.state.categories
             },
             {
-                name: {en: 'Collections', es: 'Colecciones'},
+                name: this.context.intl.formatMessage({id: 'collections'}),
                 collections: this.state.collections
             }
         ];
@@ -128,31 +131,25 @@ class ArticlesListingPage extends React.Component {
                         <Heading size="large">
                             <i className="fa fa-file-text-o" aria-hidden="true" />
                             &nbsp;
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'title')}
-                                locales={intlStore.getCurrentLocale()}
-                                appTitle={config.app.title} />
+                            <FormattedMessage id="articlesListingHeader"
+                                values={{ 'appTitle': config.app.brand }} />
                         </Heading>
                     </div>
                     <div className="article-listing-page__headline">
                         <Text>
-                            <FormattedMessage
-                                message={intlStore.getMessage(intlData, 'headline')}
-                                locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="articlesHeadline" />
                         </Text>
                     </div>
                 </div>
                 <div className="article-listing-page__body">
                     <div className="article-listing-page__left-column">
-                        {this.props.query.collections ?
+                        {query.collections ?
                             <div className="article-listing-page__view-all">
-                                <Link to="articles" params={routeParams}>
+                                <Link to={`/${locale}/articles`}>
                                     <Text>
                                         <i className="fa fa-chevron-left" aria-hidden="true" />
                                         &nbsp;
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'viewAllArticles')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="viewAllArticles" />
                                     </Text>
                                 </Link>
                             </div>
@@ -162,24 +159,19 @@ class ArticlesListingPage extends React.Component {
                         {filters.map((item, idx) => {
                             let links = item.collections.map((col) => {
                                 return {
-                                    name: intlStore.getMessage(col.name),
-                                    to: 'articles',
-                                    params: {
-                                        locale: intlStore.getCurrentLocale()
-                                    },
+                                    name: col.name,
+                                    to: `/${locale}/articles`,
                                     query: {
                                         collections: col.id
                                     },
-                                    selected: this.props.query.collections ? this.props.query.collections.split(',').indexOf(col.id) !== -1 : false
+                                    selected: query.collections ? query.collections.split(',').indexOf(col.id) !== -1 : false
                                 };
                             });
                             if (links.length > 0) {
                                 return (
                                     <div key={idx} className="article-listing-page__filter">
                                         <TreeMenu links={links}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(item.name)}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            {item.name[locale]}
                                         </TreeMenu>
                                     </div>
                                 );
@@ -190,14 +182,9 @@ class ArticlesListingPage extends React.Component {
                         {this.state.contents.length > 0 ?
                             <div className="article-listing-page__list">
                                 {this.state.contents.filter(c => c.type === 'article').map((content, idx) => {
-                                    let articleRouteParams = Object.assign({
-                                        contentId: content.id,
-                                        contentSlug: slugify(intlStore.getMessage(content.name))
-                                    }, routeParams);
                                     return (
-                                        <div className="article-listing-page__item">
-                                            <Link className="article-listing-page__item-link" to="article-slug"
-                                                  params={articleRouteParams}>
+                                        <div key={idx} className="article-listing-page__item">
+                                            <Link className="article-listing-page__item-link" to={`/${locale}/articles/${content.id}/${slugify(content.name[locale])}`}>
                                                 <ArticleSummary key={idx} content={content} hideLink={true} />
                                             </Link>
                                         </div>
@@ -207,9 +194,7 @@ class ArticlesListingPage extends React.Component {
                             :
                             <div className="article-listing-page__list article-listing-page__noResults">
                                 <Text>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'noResults')}
-                                        locales={intlStore.getCurrentLocale()} />!
+                                    <FormattedMessage id="noResults" />!
                                 </Text>
                             </div>
                         }
@@ -218,8 +203,7 @@ class ArticlesListingPage extends React.Component {
                         <div className="article-listing-page__newsletter">
                             <div className="article-listing-page__newsletter-cta">
                                 <Heading size="small">
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'newsletterCta')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="newsletterCta" />
                                 </Heading>
                             </div>
                             <NewsletterSubscription />
@@ -227,8 +211,7 @@ class ArticlesListingPage extends React.Component {
                         {this.state.productSuggestions && this.state.productSuggestions.length > 0 ?
                             <div className="article-listing-page__product-suggestions">
                                 <ProductSuggestions products={this.state.productSuggestions} loading={this.state.productSuggestionsLoading}>
-                                    <FormattedMessage message={intlStore.getMessage(intlData, 'suggestedProducts')}
-                                                      locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="suggestedProducts" />
                                 </ProductSuggestions>
                             </div>
                             :
diff --git a/src/components/pages/Checkout/Checkout.intl.js b/../simple-store/src/components/pages/Checkout/Checkout.intl.js
index 080b183..3b5881d 100644
--- a/src/components/pages/Checkout/Checkout.intl.js
+++ b/../simple-store/src/components/pages/Checkout/Checkout.intl.js
@@ -1,36 +1,11 @@
 export default {
-    en: {
-        billingInformation: 'Billing Information',
-        continueShopping: 'Continue Shopping',
-        creatingOrder: 'Creating order',
-        customerDetails: 'Customer Details',
-        myAccount: 'My Account',
-        orderCreatedSuccessfullyWithPickUp: 'Usted recibirá un email de confirmación con su recibo (recuerde revisar en correo no deseado). Puede pasar a buscar su pedido en el dia y horario seleccionado.',
-        orderCreatedSuccessfullyDelivery: 'Usted recibirá un email de confirmación con su recibo (recuerde revisar en correo no deseado). El pedido se le entregará en el  dia y horario seleccionado.',
-        contactenosString: 'Cualquier duda o consulta envie un mail a contacto@bananacat.co o llame/mande WhatsApp al 3624201230',
-        contactenos: 'Cualquier duda o consulta envie un mail a contacto@bananacat.co o llame/mande WhatsApp al 3624201230',
-        orderError: 'There was an error creating your order',
-        orderModalTitle: 'Thanks for your order!',
-        orderSummary: 'Order Summary',
-        shippingInformation: 'Shipping Information',
-        title: 'Checkout',
-        tryAgain: 'Try Again'
+    "uk": {
+        "title": "Оформити замовлення",
+    },
+    "ru": {
+        "title": "Оформить заказ",
+    },
+    "en": {
+        "title": "Checkout",
     },
-    es: {
-        billingInformation: 'Detalles de Facturación',
-        continueShopping: 'Continuar',
-        creatingOrder: 'Creando encomienda',
-        customerDetails: 'Detalles del Cliente',
-        myAccount: 'Mi cuenta',
-        contactenosString: 'Cualquier duda o consulta envie un mail a contacto@bananacat.co o llame/mande WhatsApp al 3624201230',
-        orderCreatedSuccessfullyDelivery: 'Usted recibirá un email de confirmación con su recibo (recuerde revisar en correo no deseado). El pedido se le entregará en el  dia y horario seleccionado.',
-        contactenos: 'Cualquier duda o consulta envie un mail a contacto@bananacat.co o llame/mande WhatsApp al 3624201230',
-        orderCreatedSuccessfullyWithPickUp: 'Usted recibirá un email de confirmación con su recibo (recuerde revisar en correo no deseado). Puede pasar a buscar su pedido en el dia y horario seleccionado.',
-        orderError: 'Hubo un error al crear su orden de compra',
-        orderModalTitle: 'Muchas gracias por su compra!',
-        orderSummary: 'Resumen de pedido',
-        shippingInformation: 'Detalles de Envio',
-        title: 'Finalizar Compra',
-        tryAgain: 'Intentar nuevamente'
-    }
 };
diff --git a/src/components/pages/Checkout/Checkout.js b/../simple-store/src/components/pages/Checkout/Checkout.js
index 1c0eca9..da099c6 100644
--- a/src/components/pages/Checkout/Checkout.js
+++ b/../simple-store/src/components/pages/Checkout/Checkout.js
@@ -3,8 +3,9 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import config from '../../../config';
 
@@ -20,8 +21,6 @@ import createCart from '../../../actions/Cart/createCart';
 import createCheckout from '../../../actions/Checkout/createCheckout';
 import createOrder from '../../../actions/Orders/createOrder';
 import updateCheckout from '../../../actions/Checkout/updateCheckout';
-import mercadoPagoPay from '../../../actions/Checkout/mercadoPagoPay';
-import updateProduct from '../../../actions/Admin/updateProduct';
 
 // Required components
 import Button from '../../common/buttons/Button';
@@ -39,7 +38,6 @@ import CheckoutSummary from './CheckoutSummary';
 
 // Translation data for this component
 import intlData from './Checkout.intl';
-import { log } from 'util';
 
 /**
  * Component
@@ -47,15 +45,16 @@ import { log } from 'util';
 class Checkout extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context) {
         return {
-            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title}`
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -119,6 +118,7 @@ class Checkout extends React.Component {
                 billingAddress: this.state.user.addresses[0]
             };
         }
+
         this.context.executeAction(createCheckout, payload);
     }
 
@@ -129,8 +129,8 @@ class Checkout extends React.Component {
         //
 
         // When checkout is first created
-        if (!this.state.checkout && nextProps._checkout) {
-            if (Checkout.hasShippingAndBillingAddresses(nextProps._checkout)) {
+        if (!this.state.user && nextProps._user) {
+            if (Checkout.hasShippingDetails(nextProps._user)) {
                 this.setState({editingShippingAddress: false});
             }
         }
@@ -215,51 +215,42 @@ class Checkout extends React.Component {
     // Shipping
     //
 
-    handleShippingAddressSubmit = (address) => {
+    handleShippingDetailsSubmit = (shippingDetails) => {
         let payload = {
             checkoutId: this.state.checkout.id,
             cartAccessToken: this.state.cart.accessToken,
             data: {
-                shippingAddress: address,
-                billingAddress: (this.state.useShippingAddressForBilling) ? address : this.state.checkout.billingAddress
+                shippingDetails: shippingDetails,
             }
         };
         this.context.executeAction(updateCheckout, payload);
         this.setState({shippingAddressUpdateRequested: true});
     };
 
-    handleShippingAddressEditClick = () => {
-        this.setState({editingShippingAddress: true});
-    };
-
-    handleShippingOptionChange = (value) => {
+    handleShippingAddressSubmit = (address) => {
         let payload = {
             checkoutId: this.state.checkout.id,
             cartAccessToken: this.state.cart.accessToken,
             data: {
-                shippingMethod: value
+                shippingAddress: address,
+                billingAddress: (this.state.useShippingAddressForBilling) ? address : this.state.checkout.billingAddress
             }
         };
         this.context.executeAction(updateCheckout, payload);
+        this.setState({shippingAddressUpdateRequested: true});
     };
 
-    handleShippingDayChange = (value) => {
-        let payload = {
-            checkoutId: this.state.checkout.id,
-            cartAccessToken: this.state.cart.accessToken,
-            data: {
-                shippingDay: value
-            }
-        };
-        this.context.executeAction(updateCheckout, payload);
+    handleShippingAddressEditClick = () => {
+        console.log('edit click');
+        this.setState({editingShippingAddress: true});
     };
 
-    handleShippingTimeChange = (value) => {
+    handleShippingOptionChange = (value) => {
         let payload = {
             checkoutId: this.state.checkout.id,
             cartAccessToken: this.state.cart.accessToken,
             data: {
-                shippingTime: value
+                shippingMethod: value
             }
         };
         this.context.executeAction(updateCheckout, payload);
@@ -302,11 +293,6 @@ class Checkout extends React.Component {
         this.setState({billingAddressUpdateRequested: true});
     };
 
-    handleTestMercadoPagoSubmit = (payload) => {
-        console.log(payload);
-        this.context.executeAction(mercadoPagoPay, payload);
-    };
-
     handleBillingAddressEditClick = () => {
         this.setState({editingBillingAddress: true});
     };
@@ -342,37 +328,13 @@ class Checkout extends React.Component {
                 instrument: this.state.paymentInstrument.params || {}
             }
         };
-
         this.context.executeAction(createOrder, payload);
-
-        if (this.state.checkout.cart && this.state.checkout.cart.products.length > 0) {
-            this.state.checkout.cart.products.forEach(function (product) {
-              if (product.details.copies && product.details.tags.indexOf('fotocopias') !== -1) {
-                context.executeAction(updateProduct, {
-                    id: product.id,
-                    data: {
-                        enabled: product.details.enabled,
-                        sku: product.details.sku,
-                        name: product.details.name,
-                        description: product.details.description,
-                        images: product.details.images,
-                        pricing: {
-                            currency: product.details.pricing.currency,
-                            list: parseFloat(product.details.pricing.list),
-                            retail: parseFloat(product.details.pricing.retail),
-                            vat: parseInt(product.details.pricing.vat)
-                        },
-                        stock: parseInt(product.details.stock),
-                        tags: product.details.tags,
-                        collections: product.details.collections,
-                        metadata: product.details.metadata
-                    }
-                });
-              }
-            });
-          }
     };
 
+    //
+    // Order
+    //
+
     handleOrderErrorModalCloseClick = () => {
         this.setState({showOrderErrorModal: false});
     };
@@ -384,19 +346,20 @@ class Checkout extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()}; // Base route params
+
+        //
+        // Helper methods & variables
+        //
+        let locale = this.context.intl.locale;
 
         let orderModal = () => {
             if (this.state.orderLoading) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'orderModalTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'orderModalTitle'})}>
                         <div className="checkout__order-loading">
                             <div className="checkout__order-loading-item">
                                 <Text size="small">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'creatingOrder')}
-                                        locales={intlStore.getCurrentLocale()} />...
+                                    <FormattedMessage id="creatingOrder" />...
                                 </Text>
                             </div>
                             <div className="checkout__order-loading-item">
@@ -407,47 +370,12 @@ class Checkout extends React.Component {
                 );
             } else if (this.state.showOrderCreatedModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'orderModalTitle')}>
+                    <Modal title={this.context.intl.formatMessage({id: 'orderModalTitle'})}>
                         <div className="checkout__order-created">
                             <div className="checkout__order-created-item">
-                            {this.state.checkout.shippingMethod == 'free-pickup' ?
-                                <div>
-                                  <Text size="medium">
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'orderCreatedSuccessfullyWithPickUp')}
-                                          locales={intlStore.getCurrentLocale()} />
-
-                                  </Text>
-                                  <div className="checkout__order-created-item">
-                                      <Text size="medium">
-                                        {this.state.checkout.shippingDay}
-                                      </Text>
-                                  </div>
-                                  <Text size="medium">
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'contactenosString')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Text>
-                                </div>
-                                :
-                                <div>
-                                  <Text size="medium">
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'orderCreatedSuccessfullyDelivery')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Text>
-                                  <div className="checkout__order-created-item">
-                                      <Text size="medium">
-                                        {this.state.checkout.shippingDay}
-                                      </Text>
-                                  </div>
-                                  <Text size="medium">
-                                      <FormattedMessage
-                                          message={intlStore.getMessage(intlData, 'contactenosString')}
-                                          locales={intlStore.getCurrentLocale()} />
-                                  </Text>
-                                </div>
-                            }
+                                <Text size="medium">
+                                    <FormattedMessage id="orderCreatedSuccessfully" />
+                                </Text>
                             </div>
                             <div className="checkout__order-created-item">
                                 <Text size="medium">
@@ -457,21 +385,17 @@ class Checkout extends React.Component {
                             <div className="checkout__order-created-item">
                                 <InlineItems>
                                     {this.state.user ?
-                                        <Link to="account" params={routeParams} className="checkout__order-created-link">
+                                        <Link to={`/${locale}/account`} className="checkout__order-created-link">
                                             <Button onClick={this.requestNewCart}>
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'myAccount')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="myAccount" />
                                             </Button>
                                         </Link>
                                         :
                                         null
                                     }
-                                    <Link to="homepage" params={routeParams} className="checkout__order-created-link">
+                                    <Link to={`/${locale}`} className="checkout__order-created-link">
                                         <Button type="primary" onClick={this.requestNewCart}>
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'continueShopping')}
-                                                locales={intlStore.getCurrentLocale()} />
+                                            <FormattedMessage id="continueShopping" />
                                         </Button>
                                     </Link>
                                 </InlineItems>
@@ -481,20 +405,16 @@ class Checkout extends React.Component {
                 );
             } else if (this.state.showOrderErrorModal) {
                 return (
-                    <Modal title={intlStore.getMessage(intlData, 'orderModalTitle')} onCloseClick={this.handleOrderErrorModalCloseClick}>
+                    <Modal title={this.context.intl.formatMessage({id: 'orderModalTitle'})} onCloseClick={this.handleOrderErrorModalCloseClick}>
                         <div className="checkout__order-error">
                             <div className="checkout__order-error-item">
                                 <Text size="medium">
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'orderError')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="orderError" />
                                 </Text>
                             </div>
                             <div className="checkout__order-error-item">
                                 <Button onClick={this.handleOrderErrorModalCloseClick}>
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'tryAgain')}
-                                        locales={intlStore.getCurrentLocale()} />
+                                    <FormattedMessage id="tryAgain" />
                                 </Button>
                             </div>
                         </div>
@@ -511,9 +431,7 @@ class Checkout extends React.Component {
                 {orderModal()}
                 <div className="checkout__title">
                     <Heading size="large">
-                        <FormattedMessage
-                            message={intlStore.getMessage(intlData, 'title')}
-                            locales={intlStore.getCurrentLocale()} />
+                        <FormattedMessage id="checkoutHeader" />
                     </Heading>
                 </div>
                 {!this.state.checkout ?
@@ -525,7 +443,7 @@ class Checkout extends React.Component {
                     :
                     <div className="checkout__content">
                         <div className="checkout__left-column">
-                            <CheckoutSection className="checkout__section" number="1" title={intlStore.getMessage(intlData, 'customerDetails')}>
+                            <CheckoutSection className="checkout__section" number="1" title={this.context.intl.formatMessage({id: 'customerDetails'})}>
                                 <CheckoutCustomerDetails user={this.state.user}
                                                          editing={this.state.editingCustomerDetails}
                                                          onDetailsSubmit={this.handleCustomerDetailsSubmit}
@@ -533,26 +451,19 @@ class Checkout extends React.Component {
                                                          loading={this.state.checkoutLoading}
                                                          error={this.state.checkoutError} />
                             </CheckoutSection>
-                            <CheckoutSection className="checkout__section" number="2" title={intlStore.getMessage(intlData, 'shippingInformation')}>
+                            <CheckoutSection className="checkout__section" number="2" title={this.context.intl.formatMessage({id: 'shippingInformation'})}>
                                 <CheckoutShippingInformation user={this.state.user}
-                                                             checkout={this.state.checkout}
                                                              address={this.state.checkout.shippingAddress}
                                                              editingAddress={this.state.editingShippingAddress}
                                                              onAddressSubmit={this.handleShippingAddressSubmit}
                                                              onAddressEditClick={this.handleShippingAddressEditClick}
                                                              shippingOptions={this.state.checkout.shippingOptions}
-                                                             shippingTime={this.state.checkout.shippingTime}
-                                                             shippingDay={this.state.checkout.shippingDay}
-                                                             handleShippingTimeChange={this.handleShippingTimeChange}
-                                                             handleShippingDayChange={this.handleShippingDayChange}
                                                              shippingMethod={this.state.checkout.shippingMethod}
                                                              onShippingOptionChange={this.handleShippingOptionChange}
-                                                             loading={this.state.checkoutLoading}
-                                                             checkout={this.state.checkout} />
+                                                             loading={this.state.checkoutLoading} />
                             </CheckoutSection>
-                            <CheckoutSection className="checkout__section" number="3" title={intlStore.getMessage(intlData, 'billingInformation')}>
+                            <CheckoutSection className="checkout__section" number="3" title={this.context.intl.formatMessage({id: 'billingInformation'})}>
                                 <CheckoutBillingInformation user={this.state.user}
-                                                            handleTestMercadoPagoSubmit={this.handleTestMercadoPagoSubmit}
                                                             address={this.state.checkout.billingAddress}
                                                             useShippingAddress={this.state.useShippingAddressForBilling}
                                                             onUseShippingAddressChange={this.handleUseShippingAddressForBillingChange}
@@ -567,10 +478,10 @@ class Checkout extends React.Component {
                             </CheckoutSection>
                         </div>
                         <div className="checkout__right-column">
-                            <CheckoutSection className="checkout__section" number="✓" title={intlStore.getMessage(intlData, 'orderSummary')}>
+                            <CheckoutSection className="checkout__section" number="✓" title={this.context.intl.formatMessage({id: 'orderSummary'})}>
                                 <CheckoutSummary checkout={this.state.checkout}
                                                  useShippingAddressForBilling={this.state.useShippingAddressForBilling}
-                                                 readyForCheckout={this.state.checkout.ready && this.state.paymentInstrument.ready}
+                                                 readyForCheckout={this.state.checkout.ready}
                                                  onCheckoutClick={this.handleCheckoutClick}/>
                             </CheckoutSection>
                         </div>
diff --git a/src/components/pages/Checkout/CheckoutBillingInformation.intl.js b/src/components/pages/Checkout/CheckoutBillingInformation.intl.js
deleted file mode 100644
index 6ee82be..0000000
--- a/src/components/pages/Checkout/CheckoutBillingInformation.intl.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default {
-    en: {
-        paymentMethodLabel: 'Select Payment Method',
-        phoneNumber: 'Phone number',
-        save: 'Save',
-        validNumber: 'Please provide a valid number',
-        useShippingAddress: 'Use shipping address for billing',
-        creditCardAclaration: 'El págo con tarjeta tiene una recarga del %6.',
-    },
-    es: {
-        paymentMethodLabel: 'Selecione Método de Pago',
-        phoneNumber: 'Número de teléfono',
-        save: 'Guardar',
-        validNumber: 'Por favor indique un número válido',
-        useShippingAddress: 'Usar dirección de envio para datos de facturación',
-        creditCardAclaration: 'El págo con tarjeta tiene una recarga del %6.',
-    }
-};
diff --git a/src/components/pages/Checkout/CheckoutBillingInformation.js b/../simple-store/src/components/pages/Checkout/CheckoutBillingInformation.js
index fca5e3a..256b5bb 100644
--- a/src/components/pages/Checkout/CheckoutBillingInformation.js
+++ b/../simple-store/src/components/pages/Checkout/CheckoutBillingInformation.js
@@ -2,27 +2,23 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Flux
 import IntlStore from '../../../stores/Application/IntlStore';
 
 // Required components
-import CreditCardForm from '../../common/forms/CreditCardForm';
 import AddressField from '../../common/forms/AddressField';
 import AddressPreview from '../../common/forms/AddressPreview';
 import Checkbox from '../../common/forms/Checkbox';
 import InputField from '../../common/forms/InputField';
 import RadioSelect from '../../common/forms/RadioSelect';
-import Heading from '../../common/typography/Heading';
 
 import CheckoutSection from './CheckoutSection';
 
-// Translation data for this component
-import intlData from './CheckoutBillingInformation.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -30,7 +26,8 @@ let debug = require('debug')('tienda765');
 class CheckoutBillingInformation extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -74,8 +71,7 @@ class CheckoutBillingInformation extends React.Component {
         if (param === 'phone' && (value === '' || !(!isNaN(value) && value.length === 9))) {
             let fieldErrors = this.state.fieldErrors;
             fieldErrors.phone = (
-                <FormattedMessage message={this.context.getStore(IntlStore).getMessage(intlData, 'validNumber')}
-                                  locales={this.context.getStore(IntlStore).getCurrentLocale()} />
+                <FormattedMessage id="validNumber" />
             );
             this.setState({fieldErrors: fieldErrors});
         } else if (param === 'phone') {
@@ -95,18 +91,22 @@ class CheckoutBillingInformation extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        //
+        // Helper methods & variables
+        //
+
+        let intl = this.context.intl;
+        let locale = intl.locale;
 
         let paymentOptions = (this.props.paymentOptions) ? this.props.paymentOptions.map((paymentMethod) => {
             let name = (
-                <FormattedMessage message={intlStore.getMessage(paymentMethod.label)}
-                                  locales={intlStore.getCurrentLocale()} />
+                <FormattedMessage id={paymentMethod.label[locale]} />
             );
             let option = {value: paymentMethod.id, name: name};
             if (paymentMethod.id === 'mbway') {
                 option.children = (
                     <div>
-                        <InputField placeholder={intlStore.getMessage(intlData, 'phoneNumber')}
+                        <InputField placeholder={intl.formatMessage({id: 'phoneNumber'})}
                                     onChange={this.handleInstrumentParamChange.bind(null, 'phone')}
                                     error={this.state.fieldErrors.phone} />
                     </div>
@@ -120,14 +120,18 @@ class CheckoutBillingInformation extends React.Component {
         //
         return (
             <div className="checkout-billing-information">
-                <CreditCardForm handleTestMercadoPagoSubmit={this.props.handleTestMercadoPagoSubmit} />
+                <div className="checkout-billing-information__use-shipping-address">
+                    <Checkbox label={intl.formatMessage({id: 'useShippingAddress'})}
+                              onChange={this.props.onUseShippingAddressChange}
+                              checked={this.props.useShippingAddress} />
+                </div>
                 {this.props.editingAddress && !this.props.useShippingAddress ?
                     <div className="checkout-billing-information__content">
                         <AddressField labelWeight="normal"
                                       address={this.props.address}
                                       savedAddresses={this.props.user && this.props.user.addresses}
                                       onSubmit={this.props.onAddressSubmit}
-                                      submitLabel={intlStore.getMessage(intlData, 'save')} />
+                                      submitLabel={intl.formatMessage({id: 'saveButton'})} />
                     </div>
                     :
                     <div className="checkout-billing-information__content">
@@ -138,18 +142,13 @@ class CheckoutBillingInformation extends React.Component {
                             null
                         }
                         {paymentOptions ?
-                           <div>
-                              <div className="checkout-billing-information__select-payment-method">
+                            <div className="checkout-billing-information__select-payment-method">
+                                <CheckoutSection number="3.1"
+                                                 size="small"
+                                                 title={intl.formatMessage({id: 'paymentMethodLabel'})} />
                                 <RadioSelect options={paymentOptions}
                                              onChange={this.handlePaymentOptionsChange}
                                              value={this.props.paymentMethod} />
-                                 <div className="checkout-summary__warning">
-                                     <Heading size="small">
-                                       <FormattedMessage message={intlStore.getMessage(intlData, 'creditCardAclaration')}
-                                                         locales={intlStore.getCurrentLocale()} />
-                                     </Heading>
-                                 </div>
-                              </div>
                             </div>
                             :
                             null
diff --git a/src/components/pages/Checkout/CheckoutBillingInformation.scss b/../simple-store/src/components/pages/Checkout/CheckoutBillingInformation.scss
index 241ef65..c5eba93 100644
--- a/src/components/pages/Checkout/CheckoutBillingInformation.scss
+++ b/../simple-store/src/components/pages/Checkout/CheckoutBillingInformation.scss
@@ -1,6 +1,3 @@
-@import '../../../styles/mixins/breakpoints.scss';
-@import '../../../styles/variables.scss';
-
 .checkout-billing-information__use-shipping-address {
     background-color: #eee;
     padding: 10px;
@@ -16,13 +13,3 @@
     padding: 15px;
     border: 1px solid #eee;
 }
-
-.checkout-summary__warning {
-    display: flex;
-    flex-direction: column;
-    text-align: center;
-    margin-top: 15px;
-    padding: 10px;
-    background-color: $color-secondary;
-    border-radius: $border-radius-default;
-}
diff --git a/src/components/pages/Checkout/CheckoutCustomerDetails.intl.js b/src/components/pages/Checkout/CheckoutCustomerDetails.intl.js
deleted file mode 100644
index 7ecda0c..0000000
--- a/src/components/pages/Checkout/CheckoutCustomerDetails.intl.js
+++ /dev/null
@@ -1,16 +0,0 @@
-export default {
-    en: {
-        edit: 'Edit',
-        email: 'Email',
-        fieldRequired: 'This field is required',
-        name: 'Full Name',
-        save: 'Save'
-    },
-    es: {
-        edit: 'Editar',
-        email: 'Email',
-        fieldRequired: 'Este campo es obligatorio',
-        name: 'Nombre Completo',
-        save: 'Guardar'
-    }
-};
diff --git a/src/components/pages/Checkout/CheckoutCustomerDetails.js b/../simple-store/src/components/pages/Checkout/CheckoutCustomerDetails.js
index 6743d48..2fa7cfb 100644
--- a/src/components/pages/Checkout/CheckoutCustomerDetails.js
+++ b/../simple-store/src/components/pages/Checkout/CheckoutCustomerDetails.js
@@ -2,10 +2,9 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
 
 // Required components
 import Button from '../../common/buttons/Button';
@@ -13,11 +12,8 @@ import InlineItems from '../../common/forms/InlineItems';
 import InputField from '../../common/forms/InputField';
 import Text from '../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './CheckoutCustomerDetails.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
@@ -25,7 +21,8 @@ let debug = require('debug')('tienda765');
 class CheckoutCustomerDetails extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Initial State ***//
@@ -67,17 +64,17 @@ class CheckoutCustomerDetails extends React.Component {
 
     handleSaveClick = () => {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         // Client-side validations
         let fieldErrors = {};
 
         if (!this.state.name) {
-            fieldErrors['customer.name'] = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors['customer.name'] = intl.formatMessage({id: 'fieldRequired'});
         }
 
         if (!this.state.email) {
-            fieldErrors['customer.email'] = intlStore.getMessage(intlData, 'fieldRequired');
+            fieldErrors['customer.email'] = intl.formatMessage({id: 'fieldRequired'});
         }
 
         this.setState({fieldErrors: fieldErrors});
@@ -86,7 +83,7 @@ class CheckoutCustomerDetails extends React.Component {
         if (Object.keys(fieldErrors).length === 0) {
             this.props.onDetailsSubmit({
                 email: this.state.email,
-                name: this.state.name
+                name: this.state.name,
             });
         }
     };
@@ -94,19 +91,23 @@ class CheckoutCustomerDetails extends React.Component {
     //*** Template ***//
 
     render() {
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
         return (
             <div className="checkout-customer-details">
                 {this.props.editing && !this.props.user ?
                     <div className="checkout-customer-details__form">
                         <div className="checkout-customer-details__item">
                             <InlineItems>
-                                <InputField label={intlStore.getMessage(intlData, 'name')}
+                                <InputField label={intl.formatMessage({id: 'fullName'})}
                                             labelWeight="normal"
                                             value={this.state.name}
                                             onChange={this.handleInputChange.bind(null, 'name')}
                                             error={this.state.fieldErrors['customer.name']} />
-                                <InputField label={intlStore.getMessage(intlData, 'email')}
+                            </InlineItems>
+                        </div>
+                        <div className="checkout-customer-details__item">
+                            <InlineItems>
+                                <InputField label={intl.formatMessage({id: 'email'})}
                                             labelWeight="normal"
                                             value={this.state.email}
                                             onChange={this.handleInputChange.bind(null, 'email')}
@@ -120,9 +121,7 @@ class CheckoutCustomerDetails extends React.Component {
                                     <Button type="primary"
                                             onClick={this.handleSaveClick}
                                             loading={this.props.loading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'save')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="saveButton" />
                                     </Button>
                                 </div>
                             </InlineItems>
@@ -138,13 +137,13 @@ class CheckoutCustomerDetails extends React.Component {
                         </div>
                         {!this.props.user ?
                             <div className="checkout-customer-details__actions">
-                                <div className="checkout-customer-details__edit" onClick={this.props.onEditClick}>
-                                    <Text weight="bold">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'edit')}
-                                            locales={intlStore.getCurrentLocale()} />
-                                    </Text>
-                                </div>
+                                <Button className="checkout-customer-details__edit"
+                                        type="default"
+                                        fontSize="small"
+                                        onClick={this.props.onEditClick}
+                                        loading={this.props.loading}>
+                                    <FormattedMessage id="editButton" />
+                                </Button>
                             </div>
                             :
                             null
diff --git a/src/components/pages/Checkout/CheckoutCustomerDetails.scss b/../simple-store/src/components/pages/Checkout/CheckoutCustomerDetails.scss
index ff34097..a3dd9ec 100644
--- a/src/components/pages/Checkout/CheckoutCustomerDetails.scss
+++ b/../simple-store/src/components/pages/Checkout/CheckoutCustomerDetails.scss
@@ -13,16 +13,5 @@
 }
 
 .checkout-customer-details__edit, {
-    width: 100px;
-    padding: 10px;
-    text-align: center;
-    border: 1px solid #eee;
-    border-radius: 3px;
-    cursor: pointer;
-
-    &:hover {
-        span {
-            color: $color-primary;
-        }
-    }
+    width: 190px;
 }
diff --git a/src/components/pages/Checkout/CheckoutSection.scss b/../simple-store/src/components/pages/Checkout/CheckoutSection.scss
index 332aa79..5b7d674 100644
--- a/src/components/pages/Checkout/CheckoutSection.scss
+++ b/../simple-store/src/components/pages/Checkout/CheckoutSection.scss
@@ -5,7 +5,6 @@
  */
 
 .checkout-section__header {
-  margin-top: 6px;
     display: flex;
 }
 
@@ -50,5 +49,5 @@
  */
 
 .checkout-section__body {
-    margin-top: 10px;
+    margin-top: 15px;
 }
diff --git a/src/components/pages/Checkout/CheckoutShippingInformation.intl.js b/src/components/pages/Checkout/CheckoutShippingInformation.intl.js
deleted file mode 100644
index 2a8fafb..0000000
--- a/src/components/pages/Checkout/CheckoutShippingInformation.intl.js
+++ /dev/null
@@ -1,28 +0,0 @@
-export default {
-    en: {
-        save: 'Save',
-        shippingMethodLabel: 'Select Shipping Method',
-        aclarationVerduras: 'Si tiene verduras en su canasta, los pedidos cierran todos los dias a las 17 hs.',
-        aclarationVerdurasYFotocopias: 'Procure comprar el Cajón, verduras o impresiones en pedidos separados, ya que los pedidos de verduras cierran todos los días a las 17hs, las Impresiones de un día para el otro y los Cajones se reparten solo los Martes',
-        aclarationDefault: 'Por cualquier consulta no dude en escribirnos en Facebook o enviarnos un whatsapp al +3624201230',
-        shippingDateLabel: 'Selecione fecha y horario de Envio',
-        clientInfoLabel: 'Información del cliente',
-        takeoutDateLabel: 'Selecione fecha y horario a retirar el pedido',
-        day: 'Select Day of shipping',
-        time: 'Select Time of shipping',
-        modalTitle: 'Shipping zones'
-    },
-    es: {
-        save: 'Guardar',
-        shippingMethodLabel: 'Selecione Método de Envío',
-        shippingDateLabel: 'Selecione fécha y horario de envío',
-        takeoutDateLabel: 'Selecione fecha y horario a retirar el pedido',
-        aclarationVerduras: 'Los pedidos de verduras de un dia para el otro, cierran todos los dias a las 17 hs.',
-        aclarationVerdurasYFotocopias: 'Procure comprar el Cajón, verduras o impresiones en pedidos separados, ya que los pedidos de verduras cierran todos los días a las 17hs, las Impresiones de un día para el otro y los Cajones se reparten solo los Martes',
-        aclarationDefault: 'Por cualquier consulta no dude en escribirnos en Facebook o enviarnos un whatsapp al +3624201230',
-        clientInfoLabel: 'Información del cliente',
-        day: 'Día',
-        time: 'Hora',
-        modalTitle: 'Zonas de envío'
-    }
-};
diff --git a/src/components/pages/Checkout/CheckoutShippingInformation.js b/../simple-store/src/components/pages/Checkout/CheckoutShippingInformation.js
index 8d42214..75158c8 100644
--- a/src/components/pages/Checkout/CheckoutShippingInformation.js
+++ b/../simple-store/src/components/pages/Checkout/CheckoutShippingInformation.js
@@ -2,76 +2,51 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
-import AddressFieldShipping from '../../common/forms/AddressFieldShipping';
-import AddressFieldNoShipping from '../../common/forms/AddressFieldNoShipping';
+import Button from '../../common/buttons/Button';
+import AddressField from '../../common/forms/AddressField';
 import AddressPreview from '../../common/forms/AddressPreview';
 import RadioSelect from '../../common/forms/RadioSelect';
-import Heading from '../../common/typography/Heading';
-import Text from '../../common/typography/Text';
-import InlineItems from '../../common/forms/InlineItems';
-import Select from '../../common/forms/Select';
-import Modal from '../../common/modals/Modal';
 
 import CheckoutSection from './CheckoutSection';
 
-// Translation data for this component
-import intlData from './CheckoutShippingInformation.intl';
-
 // Instantiate logger
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Component
  */
 class CheckoutShippingInformation extends React.Component {
 
-    state = {
-          showModal: false,
-          daysOptions: []
-     };
-
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
 
+    //*** Component Lifecycle ***//
+
     componentDidMount() {
-        require('./CheckoutShippingInformation.scss');
-    }
 
-    componentWillReceiveProps(nextProps) {
-        this.setState({
-          showModal: false,
-          daysOptions: []
-        });
+        // Component styles
+        require('./CheckoutShippingInformation.scss');
     }
 
-    handleOpenModalClick = () => {
-        this.setState({showModal: true});
-    };
-
-    handleCloseModal = () => {
-        this.setState({showModal: false});
-    };
-
-
-
     //*** Template ***//
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        //
+        // Helper methods & variables
+        //
+        let locale = this.context.intl.locale;
 
         let shippingOptions = (this.props.shippingOptions) ? this.props.shippingOptions.map(function (option) {
             let name = (
-                <FormattedMessage message={intlStore.getMessage(option.name)}
-                                  locales={intlStore.getCurrentLocale()} />
+                <FormattedMessage id={option.name[locale]} />
             );
             let price = (
                 <FormattedNumber
@@ -86,156 +61,39 @@ class CheckoutShippingInformation extends React.Component {
             };
         }) : null;
 
-        let takeOutTimeOptions = [
-            {name: 'Entre 17:00 y 20:30', value: '17:00-20:30'}
-        ];
-
-        let deliveryTimeOptions = [
-            {name: 'Entre 07:00 y 09:00', value: '07:00-09:00'},
-            {name: 'Entre 09:00 y 11:00', value: '09:00-11:00'},
-            {name: 'Entre 11:00 y 13:00', value: '11:00-13:00'},
-            {name: 'Entre 13:00 y 15:00', value: '13:00-15:00'},
-            {name: 'Entre 15:00 y 17:00', value: '15:00-17:00'},
-            {name: 'Entre 20:00 y 22:00', value: '20:00-22:00'},
-        ];
-
-        let showModal = () => {
-            if (this.state.showModal === true) {
-                return (
-                    <Modal title={intlStore.getMessage(intlData, 'modalTitle')}
-                            onCloseClick={this.handleCloseModal}>
-                      <iframe src="https://www.google.com/maps/d/embed?mid=1D5L1sLC-E3JYa5ix8gSt3uPOEUU" width="480" height="480"></iframe>
-                    </Modal>
-                );
-            }
-        };
-
-        let showWarningText = () => {
-                return (
-                  <div>
-                    <div className="checkout-summary__warning">
-                        <Heading size="small">
-                          <FormattedMessage message={intlStore.getMessage(intlData, 'aclarationDefault')}
-                                            locales={intlStore.getCurrentLocale()} />
-                        </Heading>
-                    </div>
-                  </div>
-                );
-        };
-
-        let dayOptions = [
-            {name: 'Martes 14 de Noviembre', value: 'Martes 14 de Noviembre'},
-            {name: 'Miércoles 15 de Noviembre', value: 'Miércoles 15 de Noviembre'}
-        ];
 
+        //
+        // Return
+        //
         return (
-            <div className="checkout-shipping-information__select-method">
-            {shippingOptions ?
-                <div className="checkout-shipping-information__column">
-                    <div className="checkout-shipping-information__row">
-                      <CheckoutSection number="2.1"
-                                     size="small"
-                                     title={intlStore.getMessage(intlData, 'shippingMethodLabel')}>
-                         <RadioSelect options={shippingOptions}
-                                      onChange={this.props.onShippingOptionChange}
-                                      value={this.props.shippingMethod} />
-                      </CheckoutSection>
-                     </div>
-                     <div className="checkout-shipping-information__row">
-                         <div className="image-zone-image-container" onClick={this.handleOpenModalClick}>
-                           <div className="image-shipping-zones"></div>
-                         </div>
-                     </div>
-                </div>
-                :
-                null
-            }
-              {showModal()}
-                {this.props.shippingMethod === 'free-pickup' ?
-                    <div>
-                        <CheckoutSection number="2.2"
-                                       size="small"
-                                       title={intlStore.getMessage(intlData, 'takeoutDateLabel')}>
-                        <InlineItems>
-                            <Select label={intlStore.getMessage(intlData, 'day')}
-                                    placeholder
-                                    options={dayOptions}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.props.shippingDay}
-                                    onChange={this.props.handleShippingDayChange} />
-                            <Select label={intlStore.getMessage(intlData, 'time')}
-                                    placeholder
-                                    options={takeOutTimeOptions}
-                                    labelWeight={this.props.labelWeight}
-                                    value={this.props.shippingTime}
-                                    onChange={this.props.handleShippingTimeChange} />
-                            </InlineItems>
-                          </CheckoutSection>
-                          <CheckoutSection number="2.3"
-                                         size="small"
-                                         title={intlStore.getMessage(intlData, 'clientInfoLabel')}>
-                            {this.props.editingAddress ?
-                                <div>
-                                    <AddressFieldNoShipping labelWeight="normal"
-                                                  checkout={this.props.checkout}
-                                                  address={this.props.address}
-                                                  savedAddresses={this.props.user && this.props.user.addresses}
-                                                  onSubmit={this.props.onAddressSubmit}
-                                                  submitLabel={intlStore.getMessage(intlData, 'save')}
-                                                  loading={this.props.loading} />
-                                </div>
-                                :
-                                <div>
-                                    <div className="checkout-shipping-information__address-preview">
-                                        <AddressPreview address={this.props.address}
-                                                        onEditClick={this.props.onAddressEditClick} />
-                                    </div>
-                                </div>
-                            }
-                            {showWarningText()}
-                            </CheckoutSection>
+            <div className="checkout-shipping-information">
+                {this.props.editingAddress ?
+                    <div className="checkout-shipping-information__content">
+                        <AddressField labelWeight="normal"
+                                      address={this.props.address}
+                                      savedAddresses={this.props.user && this.props.user.addresses}
+                                      onSubmit={this.props.onAddressSubmit}
+                                      submitLabel={this.context.intl.formatMessage({id: 'saveButton'})}
+                                      loading={this.props.loading} />
                     </div>
                     :
-                    <div>
-                        <CheckoutSection number="2.2"
-                                       size="small"
-                                       title={intlStore.getMessage(intlData, 'shippingDateLabel')} />
-                          <InlineItems>
-                              <Select label={intlStore.getMessage(intlData, 'day')}
-                                      placeholder
-                                      options={dayOptions}
-                                      labelWeight={this.props.labelWeight}
-                                      value={this.props.shippingDay}
-                                      onChange={this.props.handleShippingDayChange} />
-                              <Select label={intlStore.getMessage(intlData, 'time')}
-                                      placeholder
-                                      options={deliveryTimeOptions}
-                                      labelWeight={this.props.labelWeight}
-                                      value={this.props.shippingTime}
-                                      onChange={this.props.handleShippingTimeChange} />
-                              </InlineItems>
-                          <CheckoutSection number="2.3"
-                                         size="small"
-                                         title={intlStore.getMessage(intlData, 'clientInfoLabel')} />
-                          {this.props.editingAddress ?
-                              <div>
-                                  <AddressFieldShipping labelWeight="normal"
-                                                checkout={this.props.checkout}
-                                                address={this.props.address}
-                                                savedAddresses={this.props.user && this.props.user.addresses}
-                                                onSubmit={this.props.onAddressSubmit}
-                                                submitLabel={intlStore.getMessage(intlData, 'save')}
-                                                loading={this.props.loading} />
-                              </div>
-                              :
-                              <div>
-                                  <div className="checkout-shipping-information__address-preview">
-                                      <AddressPreview address={this.props.address}
-                                                      onEditClick={this.props.onAddressEditClick} />
-                                  </div>
-                              </div>
-                          }
-                          {showWarningText()}
+                    <div className="checkout-shipping-information__content">
+                        <div className="checkout-shipping-information__address-preview">
+                            <AddressPreview address={this.props.address}
+                                            onEditClick={this.props.onAddressEditClick} />
+                        </div>
+                        {shippingOptions ?
+                            <div className="checkout-shipping-information__select-method">
+                                <CheckoutSection number="2.1"
+                                                 size="small"
+                                                 title={this.context.intl.formatMessage({id: 'shippingMethodLabel'})} />
+                                <RadioSelect options={shippingOptions}
+                                             onChange={this.props.onShippingOptionChange}
+                                             value={this.props.shippingMethod} />
+                            </div>
+                            :
+                            null
+                        }
                     </div>
                 }
             </div>
@@ -247,8 +105,8 @@ class CheckoutShippingInformation extends React.Component {
  * Default Props
  */
 CheckoutShippingInformation.defaultProps = {
-    onAddressSubmit: function (value) { debug(`onAddressSubmit not defined. Value: ${value}`); },
-    onAddressEditClick: function () { debug('onAddressEditClick not defined'); },
+    onShippingDetailsSubmit: function (value) { debug(`onShippingDetailsSubmit not defined. Value: ${value}`); },
+    onShippingDetailsEditClick: function () { debug('onShippingDetailsEditClick not defined'); },
 };
 
 /**
diff --git a/src/components/pages/Checkout/CheckoutShippingInformation.scss b/../simple-store/src/components/pages/Checkout/CheckoutShippingInformation.scss
index 008d688..fbcbb4d 100644
--- a/src/components/pages/Checkout/CheckoutShippingInformation.scss
+++ b/../simple-store/src/components/pages/Checkout/CheckoutShippingInformation.scss
@@ -1,51 +1,5 @@
-@import '../../../styles/mixins/breakpoints.scss';
-@import '../../../styles/variables.scss';
-
 .checkout-shipping-information__select-method {
     margin-top: 10px;
     padding: 15px;
     border: 1px solid #eee;
 }
-
-.checkout-shipping-information__content {
-    margin-top: 10px;
-    padding: 15px;
-    border: 1px solid #eee;
-}
-
-.checkout-summary__warning {
-    display: flex;
-    flex-direction: column;
-    text-align: center;
-    margin-top: 15px;
-    padding: 10px;
-    background-color: $color-secondary;
-    border-radius: $border-radius-default;
-}
-
-.checkout-shipping-information__row {
-    display: flex;
-    flex-direction: column;
-}
-
-.image-shipping-zones {
-    width: 183px;
-    height: 155px;
-    cursor: pointer;
-    background: url('./shipping-zones-image.png');
-    background-size: 100%;
-    background-repeat: no-repeat;
-    margin: 15 0 0 15;
-    &:hover {
-      border: 1px solid green;
-      border-radius: 3px;
-    }
-}
-
-.checkout-shipping-information__column {
-    display: flex;
-    flex-direction: row;
-    @include breakpoint(handhelds) {
-      flex-direction: column;
-    }
-}
diff --git a/src/components/pages/Checkout/CheckoutSummary.intl.js b/src/components/pages/Checkout/CheckoutSummary.intl.js
deleted file mode 100644
index 91122db..0000000
--- a/src/components/pages/Checkout/CheckoutSummary.intl.js
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-    en: {
-        billingAddress: 'Billing Address',
-        checkout: 'Checkout',
-        customerDetails: 'Customer Details',
-        paymentMethod: 'Payment Method',
-        shippingAddress: 'Shipping Address',
-        shippingMethod: 'Shipping Method',
-        shippingSchedule: 'Shipping Schedule',
-        whatsMissing: 'What\'s missing?'
-    },
-    es: {
-        billingAddress: 'Dirección de Facturación',
-        checkout: 'Pagar',
-        customerDetails: 'Detalles del Cliente',
-        paymentMethod: 'Método de Pago',
-        shippingAddress: 'Dirección de Envío',
-        shippingMethod: 'Método de Envío',
-        shippingSchedule: 'Día y hora de envío',
-        whatsMissing: 'Qué falta para poder finalizar?'
-    }
-};
diff --git a/src/components/pages/Checkout/CheckoutSummary.js b/../simple-store/src/components/pages/Checkout/CheckoutSummary.js
index 0661c1f..215c6c5 100644
--- a/src/components/pages/Checkout/CheckoutSummary.js
+++ b/../simple-store/src/components/pages/Checkout/CheckoutSummary.js
@@ -2,10 +2,9 @@
  * Imports
  */
 import React from 'react';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
 
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import PropTypes from 'prop-types';
 
 // Required components
 import Button from '../../common/buttons/Button';
@@ -13,16 +12,14 @@ import Heading from '../../common/typography/Heading';
 import OrderSummary from '../../common/orders/OrderSummary';
 import Text from '../../common/typography/Text';
 
-// Translation data for this component
-import intlData from './CheckoutSummary.intl';
-
 /**
  * Component
  */
 class CheckoutSummary extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -40,23 +37,23 @@ class CheckoutSummary extends React.Component {
         //
         // Helper methods & variables
         //
-        let intlStore = this.context.getStore(IntlStore);
+        let intl = this.context.intl;
 
         let missingInfo = [];
         if (!this.props.checkout.customer && !this.props.checkout.cart.userId) {
-            missingInfo.push(`1 - ${intlStore.getMessage(intlData, 'customerDetails')}`);
+            missingInfo.push(`1 - ${intl.formatMessage({id: 'customerDetails'})}`);
         }
         if (!this.props.checkout.shippingAddress || Object.keys(this.props.checkout.shippingAddress).length === 0) {
-            missingInfo.push(`2 - ${intlStore.getMessage(intlData, 'shippingAddress')}`);
+            missingInfo.push(`2 - ${intl.formatMessage({id: 'shippingInformation'})}`);
         }
         if (!this.props.checkout.shippingMethod) {
-            missingInfo.push(`2.1 - ${intlStore.getMessage(intlData, 'shippingMethod')}`);
+            missingInfo.push(`2.1 - ${intl.formatMessage({id: 'shippingMethod'})}`);
         }
         if (!this.props.useShippingAddressForBilling && (!this.props.checkout.billingAddress || Object.keys(this.props.checkout.billingAddress).length === 0)) {
-            missingInfo.push(`3 - ${intlStore.getMessage(intlData, 'billingAddress')}`);
+            missingInfo.push(`3 - ${intl.formatMessage({id: 'billingAddress'})}`);
         }
         if (!this.props.checkout.paymentMethod) {
-            missingInfo.push(`3.1 - ${intlStore.getMessage(intlData, 'paymentMethod')}`);
+            missingInfo.push(`3.1 - ${intl.formatMessage({id: 'paymentMethod'})}`);
         }
 
         //
@@ -65,13 +62,12 @@ class CheckoutSummary extends React.Component {
         return (
             <div className="checkout-summary">
                 <div className="checkout-summary__order">
-                    <OrderSummary checkout={this.props.checkout} containsVerduras={this.props.containsVerduras} handleVerdurasChange={this.props.handleVerdurasChange}/>
+                    <OrderSummary checkout={this.props.checkout} />
                 </div>
                 {missingInfo.length > 0 ?
                     <div className="checkout-summary__warning">
                         <Heading size="small">
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'whatsMissing')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="whatsMissing" />
                         </Heading>
                         {missingInfo.map(function (detail, idx) {
                             return (
@@ -87,8 +83,7 @@ class CheckoutSummary extends React.Component {
                 <div className="checkout-summary__row checkout-summary__submit">
                     <div className="checkout-summary__submit-button">
                         <Button type="primary" disabled={!this.props.readyForCheckout} onClick={this.props.onCheckoutClick}>
-                            <FormattedMessage message={intlStore.getMessage(intlData, 'checkout')}
-                                              locales={intlStore.getCurrentLocale()} />
+                            <FormattedMessage id="checkoutButton" />
                         </Button>
                     </div>
                 </div>
diff --git a/src/components/pages/Checkout/shipping-zones-image.png b/src/components/pages/Checkout/shipping-zones-image.png
deleted file mode 100644
index 4ecd1be..0000000
Binary files a/src/components/pages/Checkout/shipping-zones-image.png and /dev/null differ
diff --git a/src/components/pages/Collections/CollectionProductsPage.intl.js b/src/components/pages/Collections/CollectionProductsPage.intl.js
deleted file mode 100644
index c6b2cb6..0000000
--- a/src/components/pages/Collections/CollectionProductsPage.intl.js
+++ /dev/null
@@ -1,12 +0,0 @@
-export default {
-    en: {
-        homepage: 'Homepage',
-        pagination: 'Page {currentPage} of {totalPages}',
-        productsList: 'Products'
-    },
-    es: {
-        homepage: 'Página Principal',
-        pagination: 'Página {currentPage} de {totalPages}',
-        productsList: 'Productos'
-    }
-};
diff --git a/src/components/pages/Collections/CollectionProductsPage.js b/../simple-store/src/components/pages/Collections/CollectionProductsPage.js
index a2e6cfb..41b3288 100644
--- a/src/components/pages/Collections/CollectionProductsPage.js
+++ b/../simple-store/src/components/pages/Collections/CollectionProductsPage.js
@@ -3,9 +3,11 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
+import config from '../../../config';
 
 // Flux
 import CollectionsStore from '../../../stores/Collections/CollectionsStore';
@@ -20,17 +22,14 @@ import NotFound from '../../pages/NotFound/NotFound';
 import ProductList from '../../common/products/ProductList';
 import ProductsSortingSelect from '../../common/products/ProductsSortingSelect';
 
-// Translation data for this component
-import intlData from './CollectionProductsPage.intl';
-
 /**
  * Component
  */
 class CollectionProductsPage extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
@@ -43,7 +42,7 @@ class CollectionProductsPage extends React.Component {
         if (query.sort) {
             productsQuery.sort = query.sort;
         }
-        context.executeAction(fetchProducts, productsQuery, done);
+        return context.executeAction(fetchProducts, productsQuery, done);
     };
 
     //*** Page Title and Snippets ***//
@@ -52,7 +51,7 @@ class CollectionProductsPage extends React.Component {
         let collection = context.getStore(CollectionsStore).getCollection(params.collectionId);
         if (collection) {
             return {
-                title: context.getStore(IntlStore).getMessage(collection.name)
+                title: `${context.getStore(IntlStore).getMessage(collection.name)} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
             }
         } else {
             return {
@@ -92,10 +91,10 @@ class CollectionProductsPage extends React.Component {
     //*** View Controllers ***//
 
     handleSortChange = (value) => {
-        this.context.router.transitionTo('collection', {
-            locale: this.context.getStore(IntlStore).getCurrentLocale(),
-            collectionId: this.props.params.collectionId
-        }, {sort: value});
+        this.props.history.push({
+            pathname: `/${this.context.intl.locale}/collections/${this.props.match.params.collectionId}`,
+            search: `?sort=${value}`
+        });
     };
 
     //*** Template ***//
@@ -106,9 +105,8 @@ class CollectionProductsPage extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
-        let collection = this.context.getStore(CollectionsStore).getCollection(this.props.params.collectionId);
+        let locale = this.context.intl.locale;
+        let collection = this.context.getStore(CollectionsStore).getCollection(this.props.match.params.collectionId);
 
         // Stuff that only makes sense (and will crash otherwise) if collection exists
         if (collection) {
@@ -116,34 +114,26 @@ class CollectionProductsPage extends React.Component {
             // Breadcrumbs
             var breadcrumbs = [
                 {
-                    name: <FormattedMessage
-                              message={intlStore.getMessage(intlData, 'homepage')}
-                              locales={intlStore.getCurrentLocale()} />,
-                    to: 'homepage',
-                    params: routeParams
+                    name: this.context.intl.formatMessage({id: "homepage"}),
+                    to: `/${this.context.intl.locale}`,
                 },
                 {
-                    name: <FormattedMessage
-                        message={intlStore.getMessage(intlData, 'productsList')}
-                        locales={intlStore.getCurrentLocale()} />,
-                    to: 'products',
-                    params: routeParams
+                    name: this.context.intl.formatMessage({id: "productsList"}),
+                    to: `/${this.context.intl.locale}/products`,
                 },
                 {
-                    name: <FormattedMessage
-                              message={intlStore.getMessage(collection.name)}
-                              locales={intlStore.getCurrentLocale()} />
+                    name: collection.name[locale]
                 }
             ];
 
             // Products SideMenu
             var filters = [
                 {
-                    name: {en: 'Categories', es: 'Categorias'},
+                    name: this.context.intl.formatMessage({id: 'categories'}),
                     collections: this.state.categories
                 },
                 {
-                    name: {en: 'Collections', es: 'Colecciones'},
+                    name: this.context.intl.formatMessage({id: 'collections'}),
                     collections: this.state.collections
                 }
             ];
@@ -160,11 +150,10 @@ class CollectionProductsPage extends React.Component {
                             <div className="collection-products-page__breadcrumbs">
                                 <Breadcrumbs links={breadcrumbs}>
                                     {this.state.totalPages > 0 ?
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'pagination')}
-                                            locales={intlStore.getCurrentLocale()}
-                                            currentPage={this.state.currentPage}
-                                            totalPages={this.state.totalPages} />
+                                        <FormattedMessage id="pagination"
+                                            values={{
+                                                currentPage: this.state.currentPage,
+                                                totalPages: this.state.totalPages }} />
                                         :
                                         null
                                     }
@@ -176,12 +165,11 @@ class CollectionProductsPage extends React.Component {
                         </div>
 
                         <div className="collection-products-page__products">
-                            <ProductList title={<FormattedMessage message={intlStore.getMessage(collection.name)}
-                                                                  locales={intlStore.getCurrentLocale()} />}
+                            <ProductList title={collection.name[locale]}
                                          filters={filters}
+                                         location={this.props.location}
                                          collection={collection}
                                          products={this.state.products}
-                                         routeParams={Object.assign({collectionId: collection.id}, routeParams)}
                                          totalPages={this.state.totalPages}
                                          currentPage={this.state.currentPage} />
                         </div>
diff --git a/src/components/pages/Groups/GroupAddForm.js b/src/components/pages/Groups/GroupAddForm.js
deleted file mode 100644
index 823c8da..0000000
--- a/src/components/pages/Groups/GroupAddForm.js
+++ /dev/null
@@ -1,173 +0,0 @@
-/**
-* Imports
-*/
-import React from 'react';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
-
-// Required components
-import Button from '../../common/buttons/Button';
-import InputField from '../../common/forms/InputField';
-import Select from '../../common/forms/Select';
-
-// Translation data for this component
-import intlData from './GroupAddForm.intl';
-
-// Instantiate debugger
-let debug = require('debug')('tienda765');
-
-/**
-* Component
-*/
-class GroupAddForm extends React.Component {
-
-   static contextTypes = {
-       getStore: React.PropTypes.func.isRequired
-   };
-
-   //*** Initial State ***//
-
-   state = {
-       name: {en: '', es: ''},
-       tags: [],
-       buyers: [],
-       fieldErrors: {}
-   };
-
-   //*** Component Lifecycle ***//
-
-   componentDidMount() {
-       require('./GroupAddForm.scss');
-   }
-
-   //*** View Controllers ***//
-
-   handleNameChange = (locale, value) => {
-       let name = this.state.name;
-       name[locale] = value;
-       this.setState({name: name});
-   };
-
-   handleSubmitClick = () => {
-       let intlStore = this.context.getStore(IntlStore);
-
-       this.setState({fieldErrors: {}});
-       let fieldErrors = {};
-       if (this.state.tags.indexOf('fyv20') === -1) {
-           fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       if (!this.state.name.en) {
-           fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       if (!this.state.name.es) {
-           fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       this.setState({fieldErrors: fieldErrors});
-
-       if (Object.keys(fieldErrors).length === 0) {
-           this.props.onSubmitClick({
-               name: this.state.name,
-               buyers: this.state.buyers,
-               tags: this.state.tags
-           });
-       }
-   };
-
-   handleSaveClick = () => {
-
-       let intlStore = this.context.getStore(IntlStore);
-
-       this.setState({fieldErrors: {}});
-       let fieldErrors = {};
-       if (this.state.tags.indexOf('fyv20') === -1) {
-           fieldErrors.type = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       if (!this.state.name.en) {
-           fieldErrors.nameEN = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       if (!this.state.name.es) {
-           fieldErrors.nameES = intlStore.getMessage(intlData, 'fieldRequired');
-       }
-       this.setState({fieldErrors: fieldErrors});
-
-       if (Object.keys(fieldErrors).length === 0) {
-           this.props.onSubmitClick({
-               name: this.state.name,
-               buyers: this.state.buyers,
-               tags: this.state.tags
-           });
-       }
-   };
-
-   handleTypeChange = (value) => {
-       this.setState({tags: [value]});
-   };
-
-   //*** Template ***//
-
-   render() {
-
-       let intlStore = this.context.getStore(IntlStore);
-
-       let groupTypeOptions = [
-           {name: intlStore.getMessage(intlData, 'fyv20'), value: 'fyv20'}
-       ];
-
-       let fieldError = (field) => {
-           return this.state.fieldErrors[field];
-       };
-
-       return (
-           <div className="group-add-form">
-               <div className="group-add-form__item">
-                   <Select label={intlStore.getMessage(intlData, 'type')}
-                           placeholder
-                           options={groupTypeOptions}
-                           onChange={this.handleTypeChange}
-                           error={fieldError('type')} />
-               </div>
-               <div className="group-add-form__item">
-                   <InputField label={intlStore.getMessage(intlData, 'name') + ' (EN)'}
-                               onChange={this.handleNameChange.bind(null, 'en')}
-                               error={fieldError('nameEN')} />
-               </div>
-               <div className="group-add-form__item">
-                   <InputField label={intlStore.getMessage(intlData, 'name') + ' (ES)'}
-                               onChange={this.handleNameChange.bind(null, 'es')}
-                               error={fieldError('nameES')} />
-               </div>
-               <div className="group-add-form__actions">
-                   <div className="group-add-form__button">
-                       <Button type="default" onClick={this.props.onCancelClick}>
-                           <FormattedMessage
-                               message={intlStore.getMessage(intlData, 'cancel')}
-                               locales={intlStore.getCurrentLocale()} />
-                       </Button>
-                   </div>
-                   <div className="group-add-form__button">
-                       <Button type="primary" onClick={this.handleSubmitClick}>
-                           <FormattedMessage
-                               message={intlStore.getMessage(intlData, 'add')}
-                               locales={intlStore.getCurrentLocale()} />
-                       </Button>
-                   </div>
-               </div>
-          </div>
-       );
-   }
-}
-
-/**
-* Default Props
-*/
-GroupAddForm.defaultProps = {
-   onCancelClick: function () { debug('onCancelClick not defined'); },
-   onSubmitClick: function (data) { debug(`onSubmitClick not defined. Value: ${data}`); }
-};
-
-/**
-* Exports
-*/
-export default GroupAddForm;
diff --git a/src/components/pages/Groups/GroupAddForm.scss b/src/components/pages/Groups/GroupAddForm.scss
deleted file mode 100644
index b4a25ee..0000000
--- a/src/components/pages/Groups/GroupAddForm.scss
+++ /dev/null
@@ -1,19 +0,0 @@
-.group-add-form__item {
-
-   &:not(:first-child) {
-       margin-top: 20px;
-   }
-}
-
-.group-add-form__actions {
-   display: flex;
-   justify-content: flex-end;
-   margin-top: 20px;
-}
-
-.group-add-form__button {
-
-   &:not(:first-child) {
-       margin-left: 10px;
-   }
-}
diff --git a/src/components/pages/Homepage/Homepage.intl.js b/src/components/pages/Homepage/Homepage.intl.js
deleted file mode 100644
index c5fa18b..0000000
--- a/src/components/pages/Homepage/Homepage.intl.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-    en: {
-        productsList: 'Featured Products'
-    },
-    es: {
-        productsList: 'Productos Destacados'
-    }
-};
diff --git a/src/components/pages/Homepage/Homepage.js b/../simple-store/src/components/pages/Homepage/Homepage.js
index 9e88109..063c582 100644
--- a/src/components/pages/Homepage/Homepage.js
+++ b/../simple-store/src/components/pages/Homepage/Homepage.js
@@ -4,15 +4,15 @@
 import React from 'react';
 import async from 'async';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
-import {Link} from 'react-router';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import {Link} from 'react-router-dom';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
 
 // Flux
 import CollectionsStore from '../../../stores/Collections/CollectionsStore';
 import ContentsListStore from '../../../stores/Contents/ContentsListStore';
-import IntlStore from '../../../stores/Application/IntlStore';
 import ProductsHomepageStore from '../../../stores/Products/ProductsHomepageStore';
 
 import fetchContents from '../../../actions/Contents/fetchContents';
@@ -25,22 +25,20 @@ import ProductList from '../../common/products/ProductList';
 
 import HomepageFeaturedCollection from './HomepageFeaturedCollection';
 
-// Translation data for this component
-import intlData from './Homepage.intl';
-
 /**
  * Component.
  */
 class Homepage extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        async.parallel([
+        return async.parallel([
             function (callback) {
                 context.executeAction(fetchContents, {tags: 'homepage'}, callback);
             },
@@ -58,7 +56,8 @@ class Homepage extends React.Component {
         collections: this.context.getStore(CollectionsStore).getOrderedCollections(['homepageFeatured'], true, 'homepageFeaturedOrder'),
         featuredCategories: this.context.getStore(CollectionsStore).getCollections(['category', 'homepage']),
         featuredCollections: this.context.getStore(CollectionsStore).getCollections(['collection', 'homepage']),
-        featuredProducts: this.context.getStore(ProductsHomepageStore).getProducts()
+        featuredProducts: this.context.getStore(ProductsHomepageStore).getProducts(),
+        hideCTA: true,
     };
 
     //*** Component Lifecycle ***//
@@ -76,7 +75,7 @@ class Homepage extends React.Component {
             collections: nextProps._collections,
             featuredProducts: nextProps._featuredProducts,
             featuredCategories: nextProps._featuredCategories,
-            featuredCollections: nextProps._featuredCollections
+            featuredCollections: nextProps._featuredCollections,
         });
     }
 
@@ -88,10 +87,7 @@ class Homepage extends React.Component {
         // Helper methods & variables
         //
 
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Base route params
-        let routeParams = {locale: this.context.getStore(IntlStore).getCurrentLocale()};
+        let locale = this.context.intl.locale;
 
         // Featured Collections
         let featuredCollections = [null, null, null, null];
@@ -99,19 +95,15 @@ class Homepage extends React.Component {
             if (this.state.collections[i]) {
                 let collection = this.state.collections[i];
                 featuredCollections[i] = {
-                    name: collection.name,
+                    name: collection.name[locale],
                     link: {
-                        to: 'collection-slug',
-                        params: Object.assign({
-                            collectionId: collection.id,
-                            collectionSlug: slugify(intlStore.getMessage(collection.name))
-                        }, routeParams)
+                        to: `/${locale}/collections/${collection.id}/${slugify(collection.name[locale])}`,
                     }
                 };
                 if (collection.images && collection.images.length > 0) {
                     featuredCollections[i].img = {
                         src: `//${collection.images[0].url}`,
-                        alt: intlStore.getMessage(collection.name)
+                        alt: collection.name[locale]
                     };
                 }
             }
@@ -122,11 +114,11 @@ class Homepage extends React.Component {
             if (this.state.featuredCategories.length > 0 || this.state.featuredCollections.length > 0) {
                 return [
                     {
-                        name: {en: 'Categories', es: 'Categorias'},
+                        name: this.context.intl.formatMessage({id: 'categories'}),
                         collections: this.state.featuredCategories
                     },
                     {
-                        name: {en: 'Collections', es: 'Colecciones'},
+                        name: this.context.intl.formatMessage({id: 'collections'}),
                         collections: this.state.featuredCollections
                     }
                 ];
@@ -135,9 +127,7 @@ class Homepage extends React.Component {
 
         // Fetaured Products Title Component
         let featuredProductsTitle = function() {
-            return <FormattedMessage
-                       message={intlStore.getMessage(intlData, 'productsList')}
-                       locales={intlStore.getCurrentLocale()} />;
+            return <FormattedMessage id="productsList" />;
         };
 
         //
@@ -145,22 +135,54 @@ class Homepage extends React.Component {
         //
         return (
             <div className="homepage">
-                <div className="homepage__cta">
-                  <div className="homepage__banners">
-                      <Carousel images={this.state.banners.filter(function (banner) {
-                          return banner.body && banner.body.image;
-                      }).map(function (banner) {
-                          return {
-                              src: `//${banner.body.image.url}`,
-                              link: banner.body.link
-                          };
-                      })} />
-                  </div>
-                </div>
-                <div className="homepage__banner"></div>
+                {!this.state.hideCTA ?
+                    <div className="homepage__cta">
+                        <div className="homepage__featured">
+                            <div className="homepage__featured-block">
+                                <HomepageFeaturedCollection feature={featuredCollections[0]} />
+                                <HomepageFeaturedCollection feature={featuredCollections[1]} />
+                            </div>
+                            <div className="homepage__featured-block">
+                                <HomepageFeaturedCollection feature={featuredCollections[2]} />
+                                <HomepageFeaturedCollection feature={featuredCollections[3]} />
+                            </div>
+                        </div>
+
+                        <div className="homepage__banners">
+                            <Carousel images={this.state.banners.filter(function (banner) {
+                                return banner.body && banner.body.image;
+                            }).map(function (banner) {
+                                return {
+                                    src: `//${banner.body.image.url}`,
+                                    link: banner.body.link
+                                };
+                            })} />
+                        </div>
+                    </div>
+                    :
+                    null
+                }
+
+                {this.state.articles.length > 0 ?
+                    <div className="homepage__articles">
+                        {this.state.articles.map((content, idx) => {
+                            return (
+                                <div key={idx} className="homepage__article-item">
+                                    <Link className="homepage__article-link" to={`/${locale}/articles/${content.id}/${slugify(content.name[locale])}`} >
+                                        <ArticleSummary key={idx} size="small" content={content} hideLink={true} />
+                                    </Link>
+                                </div>
+                            );
+                        })}
+                    </div>
+                    :
+                    null
+                }
+
                 <div className="homepage__products">
                     <ProductList title={featuredProductsTitle()}
                                  filters={productFilters()}
+                                 location={this.props.location}
                                  products={this.state.featuredProducts} />
                 </div>
             </div>
diff --git a/src/components/pages/Homepage/Homepage.scss b/../simple-store/src/components/pages/Homepage/Homepage.scss
index 56b5db2..f4aafe3 100644
--- a/src/components/pages/Homepage/Homepage.scss
+++ b/../simple-store/src/components/pages/Homepage/Homepage.scss
@@ -31,11 +31,11 @@
 }
 
 .homepage__banners {
-  align-self: center;
-  width: 100%;
-  @include breakpoint(handhelds) {
-      order: 1;
-  }
+    align-self: center;
+    width: 100%;
+    @include breakpoint(handhelds) {
+        order: 1;
+    }
 }
 
 /*
@@ -96,15 +96,3 @@
          margin-top: 0;
      }
  }
-
- .homepage__banner {
-     background: url('./banner-pasos.jpg');
-     background-size: 100%;
-     height: 90px;
-     width: 100%;
-     background-repeat: no-repeat;
-
-     @include breakpoint(handhelds) {
-         margin-top: 0;
-     }
- }
diff --git a/src/components/pages/Homepage/HomepageFeaturedCollection.js b/../simple-store/src/components/pages/Homepage/HomepageFeaturedCollection.js
index 307fd7c..30cb8f3 100644
--- a/src/components/pages/Homepage/HomepageFeaturedCollection.js
+++ b/../simple-store/src/components/pages/Homepage/HomepageFeaturedCollection.js
@@ -2,11 +2,9 @@
  * Imports.
  */
 import React from 'react';
-import {Link} from 'react-router';
-import {FormattedMessage} from 'react-intl';
-
-// Flux
-import IntlStore from '../../../stores/Application/IntlStore';
+import {Link} from 'react-router-dom';
+import { injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 // Required components
 import Text from '../../common/typography/Text';
@@ -17,7 +15,8 @@ import Text from '../../common/typography/Text';
 class HomepageFeaturedCollection extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Component Lifecycle ***//
@@ -32,7 +31,7 @@ class HomepageFeaturedCollection extends React.Component {
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
+        let locale = this.context.intl.locale;
 
         if (this.props.feature && this.props.feature.img) {
             return (
@@ -48,9 +47,7 @@ class HomepageFeaturedCollection extends React.Component {
                     <Link to={this.props.feature.link.to} params={this.props.feature.link.params}>
                         <div>
                             <Text size="large">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(this.props.feature.name)}
-                                    locales={intlStore.getCurrentLocale()} />
+                                {this.props.feature.name[locale]}
                             </Text>
                         </div>
                     </Link>
diff --git a/src/components/pages/Homepage/banner-pasos.jpg b/src/components/pages/Homepage/banner-pasos.jpg
deleted file mode 100644
index 654aaa1..0000000
Binary files a/src/components/pages/Homepage/banner-pasos.jpg and /dev/null differ
diff --git a/src/components/pages/Homepage/home-screen.jpg b/src/components/pages/Homepage/home-screen.jpg
deleted file mode 100644
index 43835b3..0000000
Binary files a/src/components/pages/Homepage/home-screen.jpg and /dev/null differ
diff --git a/src/components/pages/NotFound/NotFound.js b/../simple-store/src/components/pages/NotFound/NotFound.js
index 277076e..0986e0f 100644
--- a/src/components/pages/NotFound/NotFound.js
+++ b/../simple-store/src/components/pages/NotFound/NotFound.js
@@ -2,6 +2,8 @@
  * Imports
  */
 import React from 'react';
+import PropTypes from 'prop-types';
+
 
 /**
  * Component
diff --git a/src/components/pages/Products/ProductListingPage.intl.js b/../simple-store/src/components/pages/Products/ProductListingPage.intl.js
index c3682b9..9878c00 100644
--- a/src/components/pages/Products/ProductListingPage.intl.js
+++ b/../simple-store/src/components/pages/Products/ProductListingPage.intl.js
@@ -1,16 +1,11 @@
 export default {
-    en: {
-        homepage: 'Homepage',
-        pageTitle: 'Products',
-        fotocopias: 'Fotocopias',
-        pagination: 'Page {currentPage} of {totalPages}',
-        productsList: 'Products'
+    "uk": {
+        "title": "Товари",
+    },
+    "ru": {
+        "title": "Товары",
+    },
+    "en": {
+        "title": "Products",
     },
-    es: {
-        homepage: 'Página Principal',
-        fotocopias: 'Fotocopias',
-        pageTitle: 'Productos',
-        pagination: 'Página {currentPage} de {totalPages}',
-        productsList: 'Productos'
-    }
 };
diff --git a/src/components/pages/Products/ProductListingPage.js b/../simple-store/src/components/pages/Products/ProductListingPage.js
index 57d5809..a7468ef 100644
--- a/src/components/pages/Products/ProductListingPage.js
+++ b/../simple-store/src/components/pages/Products/ProductListingPage.js
@@ -3,7 +3,10 @@
  */
 import React from 'react';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage} from 'react-intl';
+import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
 
 // Flux
 import CollectionsStore from '../../../stores/Collections/CollectionsStore';
@@ -26,8 +29,8 @@ import intlData from './ProductListingPage.intl';
 class ProductListingPage extends React.Component {
 
     static contextTypes = {
-        getStore: React.PropTypes.func.isRequired,
-        router: React.PropTypes.func.isRequired
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
@@ -40,14 +43,14 @@ class ProductListingPage extends React.Component {
         if (query.sort) {
             productsQuery.sort = query.sort;
         }
-        context.executeAction(fetchProducts, productsQuery, done);
+        return context.executeAction(fetchProducts, productsQuery, done);
     };
 
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context, params, query) {
         return {
-            title: context.getStore(IntlStore).getMessage(intlData, 'pageTitle')
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -82,9 +85,10 @@ class ProductListingPage extends React.Component {
     //*** View Controllers ***//
 
     handleSortChange = (value) => {
-        this.context.router.transitionTo('products', {
-            locale: this.context.getStore(IntlStore).getCurrentLocale()
-        }, {sort: value});
+        this.props.history.push({
+            pathname: `/${this.context.intl.locale}/products`,
+            search: `?sort=${value}`
+        });
     };
 
     //*** Template ***//
@@ -94,34 +98,27 @@ class ProductListingPage extends React.Component {
         //
         // Helper methods & variables
         //
-
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        let locale = this.context.intl.locale;
 
         // Breadcrumbs
-        var breadcrumbs = [
+        let breadcrumbs = [
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'homepage')}
-                    locales={intlStore.getCurrentLocale()} />,
-                to: 'homepage',
-                params: routeParams
+                name: <FormattedMessage id="homepage" />,
+                to: `/${this.context.intl.locale}`,
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'productsList')}
-                    locales={intlStore.getCurrentLocale()} />
+                name: <FormattedMessage id="productsList" />
             }
         ];
 
         // Products SideMenu
-        var filters = [
+        let filters = [
             {
-                name: {en: 'Categories', es: 'Categorias'},
+                name: this.context.intl.formatMessage({id: 'categories'}),
                 collections: this.state.categories
             },
             {
-                name: {en: 'Collections', es: 'Colecciones'},
+                name: this.context.intl.formatMessage({id: 'collections'}),
                 collections: this.state.collections
             }
         ];
@@ -136,11 +133,10 @@ class ProductListingPage extends React.Component {
                         <div className="product-listing-page__breadcrumbs">
                             <Breadcrumbs links={breadcrumbs}>
                                 {this.state.totalPages > 0 ?
-                                    <FormattedMessage
-                                        message={intlStore.getMessage(intlData, 'pagination')}
-                                        locales={intlStore.getCurrentLocale()}
-                                        currentPage={this.state.currentPage}
-                                        totalPages={this.state.totalPages} />
+                                    <FormattedMessage id="pagination"
+                                        values={{
+                                            currentPage: this.state.currentPage,
+                                            totalPages: this.state.totalPages }} />
                                     :
                                     null
                                 }
@@ -152,13 +148,11 @@ class ProductListingPage extends React.Component {
                     </div>
 
                     <div className="product-listing-page__products">
-                        <ProductList title={<FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'pageTitle')}
-                                                    locales={intlStore.getCurrentLocale()} />}
+                        <ProductList title={<FormattedMessage id="productsHeader" />}
                                      filters={filters}
                                      products={this.state.products}
-                                     paginateTo="products"
-                                     routeParams={routeParams}
+                                     location={this.props.location}
+                                     paginateTo={`/${locale}/products/`}
                                      totalPages={this.state.totalPages}
                                      currentPage={this.state.currentPage} />
                     </div>
diff --git a/src/components/pages/Products/ProductPage.intl.js b/src/components/pages/Products/ProductPage.intl.js
deleted file mode 100644
index 4060639..0000000
--- a/src/components/pages/Products/ProductPage.intl.js
+++ /dev/null
@@ -1,64 +0,0 @@
-export default {
-    en: {
-        addToCart: 'Add to cart',
-        crossSell: 'More in this collection',
-        descriptionLabel: 'Description',
-        homepage: 'Homepage',
-        outOfStock: 'Out of Stock',
-        productsList: 'Products',
-        quantity: 'Quantity',
-        quantityFotocopias: 'Quantity',
-        comments: 'Comentarios',
-        filestitle: 'Subi el archivo a imprimir (un archivo por pedido)',
-        anillado: 'Anillado (+$35)',
-        fieldRequired: 'This field is required',
-        pagetype: 'Tipo de hoja',
-        pagesnum: 'Cantidad de hojas del archivo (Número preciso para calcular el precio a pagar)',
-        oficio: 'Hoja oficio',
-        a4: 'Hoja A4',
-        doblefaz: 'Doble Faz',
-        suscribirse: 'Comprar y Suscribirse',
-        desuscribirse: 'Desuscribirse',
-        login: 'Login',
-        register: 'Register',
-        cancel: 'Cancel',
-        checkout: 'Finalizar',
-        continueShopping: 'Continuar comprando',
-        registerModalTitle: 'Para ingresar a la lista de grupos de compradores debes ingresar a tu cuenta.',
-        thanksModalText: 'Estas suscripto. Ahora rellenaras la informacion de pago y envio. Gracias por la confianza!',
-        anotadoModalTitle: 'Anotado!',
-        new: 'Crear grupo',
-        newModalTitle: 'Add new group',
-    },
-    es: {
-        addToCart: 'Comprar',
-        crossSell: 'Otros productos de esta colección',
-        descriptionLabel: 'Descripción',
-        homepage: 'Página Principal',
-        outOfStock: 'Sin Stock',
-        productsList: 'Productos',
-        quantity: 'Cantidad',
-        quantityFotocopias: 'Cant. de juegos',
-        filestitle: 'Subi el archivo a imprimir (un archivo por pedido)',
-        anillado: 'Anillado (+$35)',
-        fieldRequired: 'Este campo es obligatorio',
-        comments: 'Comentarios',
-        pagetype: 'Tipo de hoja',
-        pagesnum: 'Cantidad de hojas del archivo (Número preciso para calcular el precio a pagar)',
-        oficio: 'Hoja oficio',
-        a4: 'Hoja A4',
-        doblefaz: 'Doble Faz',
-        suscribirse: 'Comprar y Suscribirse',
-        desuscribirse: 'Desuscribirse',
-        login: 'Loggearse',
-        register: 'Registrarse',
-        cancel: 'Cancelar',
-        checkout: 'Finalizar',
-        continueShopping: 'Continuar comprando',
-        registerModalTitle: 'Para ingresar a la lista de grupos de compradores debes ingresar a tu cuenta.',
-        anotadoModalTitle: 'Suscripto!',
-        thanksModalText: 'Estas suscripto. Ahora rellenarás la información de pago y envío. Gracias por la confianza!',
-        new: 'Crear grupo',
-        newModalTitle: 'Crear nuevo grupo',
-    }
-};
diff --git a/src/components/pages/Products/ProductPage.js b/../simple-store/src/components/pages/Products/ProductPage.js
index 3fea80e..8bce220 100644
--- a/src/components/pages/Products/ProductPage.js
+++ b/../simple-store/src/components/pages/Products/ProductPage.js
@@ -4,9 +4,11 @@
 import React from 'react';
 import async from 'async';
 import connectToStores from 'fluxible-addons-react/connectToStores';
-import {FormattedMessage, FormattedNumber} from 'react-intl';
+import { FormattedMessage, FormattedNumber, injectIntl, intlShape } from 'react-intl';
+import PropTypes from 'prop-types';
 
 import {slugify} from '../../../utils/strings';
+import config from '../../../config';
 
 // Flux
 import CartStore from '../../../stores/Cart/CartStore';
@@ -21,7 +23,6 @@ import clearSuggestionsList from '../../../actions/Products/clearSuggestionsList
 import fetchProductContent from '../../../actions/Products/fetchProductContent';
 import fetchProductSuggestions from '../../../actions/Products/fetchProductSuggestions';
 import fetchProductAndCheckIfFound from '../../../actions/Products/fetchProductAndCheckIfFound';
-import updateProduct from '../../../actions/Admin/updateProduct';
 import triggerDrawer from '../../../actions/Application/triggerDrawer';
 
 // Required components
@@ -31,18 +32,9 @@ import Button from '../../common/buttons/Button';
 import Heading from '../../common/typography/Heading';
 import ImageGallery from '../../common/images/ImageGallery';
 import NotFound from '../../pages/NotFound/NotFound';
-import InputField from '../../common/forms/InputField';
 import ProductSuggestions from '../../common/products/ProductSuggestions';
 import QuantitySelector from '../../common/forms/QuantitySelector';
-import ToggleSwitch from '../../common/buttons/ToggleSwitch';
-import Select from '../../common/forms/Select';
-import Textarea from '../../common/forms/Textarea';
 import Text from '../../common/typography/Text';
-import RadioSelect from '../../common/forms/RadioSelect';
-import FilesLibraryManager from '../../containers/files/FilesLibraryManager';
-
-// Translation data for this component
-import intlData from './ProductPage.intl';
 
 /**
  * Component
@@ -50,14 +42,15 @@ import intlData from './ProductPage.intl';
 class ProductPage extends React.Component {
 
     static contextTypes = {
-        executeAction: React.PropTypes.func.isRequired,
-        getStore: React.PropTypes.func.isRequired
+        executeAction: PropTypes.func.isRequired,
+        getStore: PropTypes.func.isRequired,
+        intl: intlShape.isRequired,
     };
 
     //*** Required Data ***//
 
     static fetchData = function (context, params, query, done) {
-        async.parallel([
+        return async.parallel([
             function (callback) {
                 context.executeAction(fetchProductAndCheckIfFound, params.productId, callback);
             },
@@ -74,7 +67,7 @@ class ProductPage extends React.Component {
         let product = context.getStore(ProductDetailsStore).getProduct();
         if (product) {
             return {
-                title: context.getStore(IntlStore).getMessage(product.name)
+                title: `${context.getStore(IntlStore).getMessage(product.name)} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
             }
         } else {
             return {
@@ -108,14 +101,7 @@ class ProductPage extends React.Component {
         suggestions: this.context.getStore(ProductSuggestionsStore).getProducts(),
         suggestionsLoading: this.context.getStore(ProductSuggestionsStore).isLoading(),
         placeholderImage: undefined,
-        quantity: 1,
-        fieldErrors: {},
-        isFotocopia: false,
-        pagetype: undefined,
-        pagesnum: undefined,
-        files: [],
-        anillado: false,
-        doblefaz: true
+        quantity: 1
     };
 
     //*** Component Lifecycle ***//
@@ -136,10 +122,6 @@ class ProductPage extends React.Component {
         } else {
             this.context.executeAction(clearSuggestionsList);
         }
-
-        if (this.state.product && this.state.product.tags.indexOf('fotocopias') !== -1) {
-          this.setState({isFotocopia: true});
-        }
     }
 
     componentWillReceiveProps(nextProps) {
@@ -169,144 +151,49 @@ class ProductPage extends React.Component {
             this.context.executeAction(triggerDrawer, 'cart');
         }
 
-        let fieldErrors = {};
-        if (nextProps._error && nextProps._error.validation && nextProps._error.validation.keys) {
-            nextProps._error.validation.keys.forEach(function (field) {
-                if (field === 'comments') {
-                    fieldErrors['comments'] = nextProps._error.validation.details[field];
-                } else {
-                    fieldErrors[field] = nextProps._error.validation.details[field];
-                }
-            });
-        }
-
-
         this.setState({
             cartLoading: nextProps._cartLoading,
             cartProducts: nextProps._cartProducts,
             product: nextProps._product,
             contents: nextProps._contents,
             suggestions: nextProps._suggestions,
-            suggestionsLoading: nextProps._suggestionsLoading,
-            fieldErrors: fieldErrors
+            suggestionsLoading: nextProps._suggestionsLoading
         });
     }
 
     //*** View Controllers ***//
 
     handleAddToCartClick = () => {
-      if (this.state.isFotocopia) {
-        //*** First update the  ***//
-        let intlStore = this.context.getStore(IntlStore);
-
-        // Client-side validations
-        this.setState({fieldErrors: {}});
-        let fieldErrors = {};
-        if (!this.state.pagesnum) {
-            fieldErrors.pagesnum = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-        if (!this.state.pagetype) {
-            fieldErrors.pagetype = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-
-        if (!this.state.files[0]) {
-            fieldErrors.files = intlStore.getMessage(intlData, 'fieldRequired');
-        }
-
-        this.setState({fieldErrors: fieldErrors});
-        // Client-side validation checked, trigger update request
-        if (Object.keys(fieldErrors).length === 0) {
-            let product = this.state.product;
-            let copyPriceTotal = 0;
-            copyPriceTotal = product.pricing.retail * product.copies.pagesnum;
-
-            this.context.executeAction(updateProduct, {
-                id: product.id,
-                data: {
-                    enabled: product.enabled,
-                    sku: product.sku,
-                    name: product.name,
-                    description: product.description,
-                    images: product.images,
-                    pricing: {
-                        currency: product.pricing.currency,
-                        list: parseFloat(product.pricing.list),
-                        retail: parseFloat(product.pricing.retail),
-                        vat: parseInt(product.pricing.vat)
-                    },
-                    stock: parseInt(product.stock),
-                    tags: product.tags,
-                    collections: product.collections,
-                    metadata: product.metadata
-                }
-            });
-
-            let payload = Object.assign({details: this.state.product}, {
-                id: this.state.product.id,
-                quantity: this.getQuantityInCart() + this.state.quantity
-            });
-            this.setState({addingToCart: true});
-            this.context.executeAction(addToCart, payload);
-          }
-      } else {
         let payload = Object.assign({details: this.state.product}, {
             id: this.state.product.id,
             quantity: this.getQuantityInCart() + this.state.quantity
         });
         this.setState({addingToCart: true});
         this.context.executeAction(addToCart, payload);
-      }
-
     };
 
     handleQuantityChange = (value) => {
         this.setState({quantity: value});
     };
 
-    handleCopiesChange = (param, value) => {
-        let product = this.state.product;
-        product.copies[param] = value;
-        this.state[param] = value;
-        this.setState({product: product});
-    };
-
-    handleAnilladoChange = () => {
-        let product = this.state.product;
-        let anillado = this.state.anillado;
-        product.copies.anillado = !(product.copies.anillado === true);
-        anillado = !(product.copies.anillado === true);
-        this.setState({product: product, anillado});
-    };
-
-    handleDobleFazChange = () => {
-        let product = this.state.product;
-        let doblefaz = this.state.doblefaz;
-        product.copies.doblefaz = !(product.copies.doblefaz === true);
-        doblefaz = !(product.copies.doblefaz === true);
-        this.setState({product: product, doblefaz});
-    };
     //*** Template ***//
 
     render() {
 
-        let intlStore = this.context.getStore(IntlStore);
-        let routeParams = {locale: intlStore.getCurrentLocale()}; // Base route params
+        //
+        // Helper methods & variables
+        //
+        let locale = this.context.intl.locale;
 
         // Breadcrumbs
         let breadcrumbs = [
             {
-                name: <FormattedMessage
-                          message={intlStore.getMessage(intlData, 'homepage')}
-                          locales={intlStore.getCurrentLocale()} />,
-                to: 'homepage',
-                params: routeParams
+                name: <FormattedMessage id="homepage" />,
+                to: `/${locale}`,
             },
             {
-                name: <FormattedMessage
-                    message={intlStore.getMessage(intlData, 'productsList')}
-                    locales={intlStore.getCurrentLocale()} />,
-                to: 'products',
-                params: routeParams
+                name: <FormattedMessage id="productsList" />,
+                to: `/${locale}/products/`,
             }
         ];
 
@@ -314,14 +201,8 @@ class ProductPage extends React.Component {
             let collection = this.context.getStore(CollectionsStore).getCollection(collectionId);
             if (collection) {
                 breadcrumbs.push({
-                    name: <FormattedMessage
-                              message={intlStore.getMessage(collection.name)}
-                              locales={intlStore.getCurrentLocale()} />,
-                    to: 'collection-slug',
-                    params: Object.assign({
-                        collectionId: collection.id,
-                        collectionSlug: slugify(intlStore.getMessage(collection.name))
-                    }, routeParams)
+                    name: collection.name[locale],
+                    to: `/${locale}/collections/${collection.id}/${slugify(collection.name)}`,
                 });
             }
         };
@@ -340,15 +221,9 @@ class ProductPage extends React.Component {
             }
         }
 
-        let pageTypeOptions = [
-            {name: intlStore.getMessage(intlData, 'oficio'), value: 'oficio'},
-            {name: intlStore.getMessage(intlData, 'a4'), value: 'a4'}
-        ];
-
-        let fieldError = (field) => {
-            return this.state.fieldErrors[field];
-        };
-
+        //
+        // Return
+        //
         return (
             <div className="product-page">
                 {!this.state.product ?
@@ -357,9 +232,7 @@ class ProductPage extends React.Component {
                     <div>
                         <div className="product-page__header">
                             <Breadcrumbs links={breadcrumbs} weight="bold">
-                                <FormattedMessage
-                                    message={intlStore.getMessage(this.state.product.name)}
-                                    locales={intlStore.getCurrentLocale()} />
+                                {this.state.product.name[locale]}
                             </Breadcrumbs>
                         </div>
 
@@ -381,33 +254,9 @@ class ProductPage extends React.Component {
                             <div className="product-page__details">
                                 <div className="product-page__name" itemProp="name">
                                     <Heading size="large">
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(this.state.product.name)}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        {this.state.product.name[locale]}
                                     </Heading>
                                 </div>
-                                <div className="product-page__description">
-                                    <div className="product-page__description-label">
-                                        <Heading size="medium">
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(intlData, 'descriptionLabel')}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Heading>
-                                    </div>
-                                    {this.state.product.tags.includes('cajon') ?
-                                    <div className="product-page__description-content" itemProp="description">
-                                        {productDescription()}
-                                    </div>
-                                    :
-                                    <div className="product-page__description-content" itemProp="description">
-                                        <Text size="small">
-                                            <FormattedMessage
-                                                message={intlStore.getMessage(this.state.product.description)}
-                                                locales={intlStore.getCurrentLocale()} />
-                                        </Text>
-                                    </div>
-                                    }
-                                </div>
                                 {this.state.product.pricing ?
                                     <div className="product-page__price" itemProp="offers" itemScope itemType="http://schema.org/Offer">
                                         <div style={{display: 'none'}} itemProp="price">
@@ -417,8 +266,8 @@ class ProductPage extends React.Component {
                                             {this.state.product.pricing.currency}
                                         </div>
                                         <div>
-                                            <Text size="medium" weight="bold">
-                                                Precio: <FormattedNumber
+                                            <Text size="large" weight="normal">
+                                                <FormattedNumber
                                                     value={this.state.product.pricing.retail}
                                                     style="currency"
                                                     currency={this.state.product.pricing.currency} />
@@ -430,111 +279,58 @@ class ProductPage extends React.Component {
                                 }
                                 <div className="product-page__sku">
                                     <Text size="small">
-                                        Ref: <span itemProp="sku">{this.state.product.sku}</span>
+                                        <FormattedMessage id="ref" />:
+                                        <span itemProp="sku">{this.state.product.sku}</span>
                                     </Text>
                                 </div>
-
-                                { this.state.isFotocopia ?
-                                    <div className="fotocopias-page__copies-form">
-                                        <div className="product-page__quantity">
-                                            <Text size="medium" weight="bold">
-                                               <FormattedMessage message={intlStore.getMessage(intlData, 'quantityFotocopias')}
-                                                              locales={intlStore.getCurrentLocale()} />
-                                            </Text>
-                                            <QuantitySelector value={this.state.quantity}
-                                                              onChange={this.handleQuantityChange} />
-                                        </div>
-                                       <div className="fotocopias-page__form-item">
-                                         <InputField label={intlStore.getMessage(intlData, 'pagesnum')}
-                                                     value={this.state.pagesnum}
-                                                     onChange={this.handleCopiesChange.bind(null, 'pagesnum')}
-                                                     error={fieldError('pagesnum')} />
-                                       </div>
-                                       <div className="fotocopias-page__form-item-row">
-                                          <div className="fotocopias-page__form-item-one">
-                                               <Text size="medium" weight="bold">
-                                                  <FormattedMessage message={intlStore.getMessage(intlData, 'pagetype')}
-                                                                 locales={intlStore.getCurrentLocale()} />
-                                               </Text>
-                                               <RadioSelect options={pageTypeOptions}
-                                                            onChange={this.handleCopiesChange.bind(null, 'pagetype')}
-                                                            value={this.state.pagetype}
-                                                            error={fieldError('pagetype')} />
-                                           </div>
-                                           <div className="fotocopias-page__form-item-one">
-                                                <ToggleSwitch label={intlStore.getMessage(intlData, 'anillado')}
-                                                          enabled={this.state.anillado === true}
-                                                          onChange={this.handleAnilladoChange} />
-                                            </div>
-                                            <div className="fotocopias-page__form-item-one">
-                                                <ToggleSwitch label={intlStore.getMessage(intlData, 'doblefaz')}
-                                                        enabled={this.state.doblefaz === true}
-                                                        onChange={this.handleDobleFazChange} />
-                                            </div>
-                                       </div>
-                                       <div className="fotocopias-page__form-item">
-                                           <Textarea label={intlStore.getMessage(intlData, 'comments')}
-                                                     rows="5"
-                                                     onChange={this.handleCopiesChange.bind(null, 'comments')}
-                                                     error={fieldError('comments')} />
-                                       </div>
-                                       <div className="fotocopias-page__form-item">
-                                         <Text size="medium" weight="bold">
-                                            <FormattedMessage message={intlStore.getMessage(intlData, 'filestitle')}
-                                                           locales={intlStore.getCurrentLocale()} />
-                                         </Text>
-                                          <FilesLibraryManager files={this.state.files}
-                                                                onChange={this.handleCopiesChange.bind(null, 'files')}
-                                                                error={fieldError('files')} />
-                                        </div>
-                                    </div>
-                                    :
+                                <div className="product-page__add">
                                     <div className="product-page__quantity">
-                                        <Text size="medium" weight="bold">
-                                           <FormattedMessage message={intlStore.getMessage(intlData, 'quantity')}
-                                                          locales={intlStore.getCurrentLocale()} />
-                                        </Text>
                                         <QuantitySelector value={this.state.quantity}
                                                           onChange={this.handleQuantityChange} />
                                     </div>
-                                }
-                                <div className="product-page__add">
-
                                     <div className="product-page__add-buttons">
                                         {this.state.product.stock > 0 ?
                                             <Button type="primary"
                                                     onClick={this.handleAddToCartClick}
                                                     disabled={this.state.quantity <= 0 || this.state.cartLoading}>
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'addToCart')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="addToCart"/>
                                             </Button>
                                             :
                                             <Button type="primary" disabled={true}>
-                                                <FormattedMessage
-                                                    message={intlStore.getMessage(intlData, 'outOfStock')}
-                                                    locales={intlStore.getCurrentLocale()} />
+                                                <FormattedMessage id="outOfStock" />
                                             </Button>
                                         }
                                     </div>
                                 </div>
 
-                                {this.state.contents.map(function (content) {
+                                <div className="product-page__description">
+                                    <div className="product-page__description-label">
+                                        <Heading size="medium">
+                                            <FormattedMessage id="descriptionLabel" />
+                                        </Heading>
+                                    </div>
+                                    <div className="product-page__description-content" itemProp="description">
+                                        <Text size="small">
+                                            {this.state.product.description[locale]}
+                                        </Text>
+                                    </div>
+                                </div>
+
+                                {this.state.contents.map(function (content, idx) {
                                     return (
-                                        <div className="product-page__content">
+                                        <div key={idx} className="product-page__content">
                                             <ArticleSummary content={content} />
                                         </div>
                                     );
                                 })}
-                              </div>
+                            </div>
+
                             {!this.state.suggestionsLoading && this.state.suggestions.length === 0 ?
                                 <div className="product-page__suggestions product-page__suggestions--no-border"></div>
                                 :
                                 <div className="product-page__suggestions">
                                     <ProductSuggestions products={this.state.suggestions} loading={this.state.suggestionsLoading}>
-                                        <FormattedMessage
-                                            message={intlStore.getMessage(intlData, 'crossSell')}
-                                            locales={intlStore.getCurrentLocale()} />
+                                        <FormattedMessage id="crossSell" />
                                     </ProductSuggestions>
                                 </div>
                             }
diff --git a/src/components/pages/Products/ProductPage.scss b/../simple-store/src/components/pages/Products/ProductPage.scss
index 65170d7..5f344a8 100644
--- a/src/components/pages/Products/ProductPage.scss
+++ b/../simple-store/src/components/pages/Products/ProductPage.scss
@@ -9,82 +9,6 @@
     }
 }
 
-.fotocopias-page__copies-form {
-    margin: 5px;
-
-    @include breakpoint(handhelds) {
-        margin-bottom: 5px;
-    }
-}
-
-.groups-table__table {
-    border: 1px solid #eeeeee;
-    text-align: left;
-}
-
-.groups-table__row {
-    border-bottom: 1px solid #eeeeee;
-
-
-    &--info {
-        background-color: $background-color-table-info;
-    }
-
-    &--success {
-        background-color: $background-color-table-success;
-    }
-
-    &--warning {
-        background-color: $background-color-table-warning;
-    }
-
-    &--error {
-        background-color: $background-color-table-error;
-    }
-}
-
-.groups-page__description {
-    margin-top: 30px;
-}
-
-.groups-table__heading,
-.groups-table__data {
-    vertical-align: middle;
-    padding: 2px;
-}
-
-.groups-table__body > .groups-table__row {
-    &:hover {
-        background-color: #F9F9F9;
-    }
-}
-
-.input-field__input {
-    width: 100%;
-    max-width: 100%;
-    min-height: 32px;
-    padding: 15px 0px;
-    margin: 0px;
-    outline: none;
-    box-sizing: border-box;
-    border: 1px solid #eeeeee;
-    border-radius: 3px;
-    text-indent: 10px;
-    font: $font-size-small $font-family-body;
-    color: $color-body;
-    transition: border-color 0.2s linear, box-shadow 0.2s ease;
-
-    &:hover,
-    &:focus {
-        box-shadow: 0 0 3px rgba(0,0,0,.2);
-        min-height: 32px;
-    }
-
-    &--error {
-        border-color: $color-error;
-    }
-}
-
 /*
  * Header
  */
@@ -114,24 +38,6 @@
     }
 }
 
-.fotocopias-page__form-item {
-    &:not(:first-child) {
-        margin-top: 30px;
-    }
-}
-
-.fotocopias-page__form-item-one {
-  padding: 0 10px 0 10px;
-}
-
-.fotocopias-page__form-item-row {
-    display: flex;
-    flex-direction: row;
-    &:not(:first-child) {
-        margin-top: 30px;
-    }
-}
-
 // Image Gallery
 
 .product-page__gallery-container {
@@ -176,6 +82,7 @@
 
 .product-page__add {
     display: flex;
+    margin-top: 15px;
 
     @include breakpoint(handhelds) {
         flex-direction: column;
@@ -187,9 +94,12 @@
 }
 
 .product-page__quantity {
-    margin-top: 10px;
     width: 100%;
     align-self: center;
+
+    @include breakpoint(wide-screens) {
+        max-width: 150px;
+    }
 }
 
 .product-page__add-buttons {
@@ -197,7 +107,9 @@
     margin-top: 10px;
 
     @include breakpoint(wide-screens) {
+        max-width: 200px;
         margin-top: 0;
+        margin-left: 20px;
     }
 }
 
diff --git a/../simple-store/src/components/pages/StaticContent/DeliveryPage.intl.js b/../simple-store/src/components/pages/StaticContent/DeliveryPage.intl.js
new file mode 100644
index 0000000..fc866f9
--- /dev/null
+++ b/../simple-store/src/components/pages/StaticContent/DeliveryPage.intl.js
@@ -0,0 +1,11 @@
+export default {
+    "uk": {
+        "title": "Доставка та оплата",
+    },
+    "ru": {
+        "title": "Доставка и оплата",
+    },
+    "en": {
+        "title": "Shipping and payment",
+    }
+};
diff --git a/../simple-store/src/components/pages/StaticContent/DeliveryPage.js b/../simple-store/src/components/pages/StaticContent/DeliveryPage.js
new file mode 100644
index 0000000..84f8298
--- /dev/null
+++ b/../simple-store/src/components/pages/StaticContent/DeliveryPage.js
@@ -0,0 +1,108 @@
+/**
+ * Imports
+ */
+import React from 'react';
+import {FormattedMessage} from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
+
+// Flux
+import IntlStore from '../../../stores/Application/IntlStore';
+
+// Required components
+import Heading from '../../common/typography/Heading';
+import Text from '../../common/typography/Text';
+
+// Translation data for this component
+import intlData from './DeliveryPage.intl';
+
+
+/**
+ * Component
+ */
+class DeliveryPage extends React.Component {
+
+    static contextTypes = {
+        getStore: PropTypes.func.isRequired
+    };
+
+    //*** Page Title and Snippets ***//
+
+    static pageTitleAndSnippets = function (context, params, query) {
+        return {
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
+        }
+    };
+
+    //*** Component Lifecycle ***//
+
+    componentDidMount() {
+
+        // Component styles
+        require('./DeliveryPage.scss');
+    }
+
+    //*** Template ***//
+
+    render() {
+        let intlStore = this.context.getStore(IntlStore);
+
+        return (
+            <div className="stores-page">
+                <div className="stores-page__title">
+                    <Heading size="large">
+                        <FormattedMessage id="deliveryHeader"/>
+                    </Heading>
+                </div>
+                <div className="stores-page__content">
+                    <div className="stores-page__block">
+                        <Heading size="medium">
+                            <FormattedMessage id="deliveryShippingTitle" />
+                        </Heading>
+                        <p>
+                            <FormattedMessage id="deliveryShippingDescription" />
+                        </p>
+                        <ul>
+                            <li>
+                                <FormattedMessage id="deliveryShippingMethodNovaPoshta" />
+                            </li>
+                            <li>
+                                <FormattedMessage id="deliveryShippingMethodUkrPoshta" />
+                            </li>
+                            <li>
+                                <FormattedMessage id="deliveryShippingMethodInPerson" />
+                            </li>
+                        </ul>
+                    </div>
+                </div>
+                <div className="stores-page__content">
+                    <div className="stores-page__block">
+                        <Heading size="medium">
+                            <FormattedMessage id="deliveryPaymentTitle" />
+                        </Heading>
+                        <p>
+                            <FormattedMessage id="deliveryPaymentDescription" />
+                        </p>
+                        <ul>
+                            <li>
+                                <FormattedMessage id="deliveryPaymentMethodPrivatBank" />
+                            </li>
+                            <li>
+                                <FormattedMessage id="deliveryPaymentMethodPOD" />
+                            </li>
+                            <li>
+                                <FormattedMessage id="deliveryPaymentMethodInPerson" />
+                            </li>
+                        </ul>
+                    </div>
+                </div>
+            </div>
+        );
+    }
+}
+
+/**
+ * Exports
+ */
+export default DeliveryPage;
diff --git a/../simple-store/src/components/pages/StaticContent/DeliveryPage.scss b/../simple-store/src/components/pages/StaticContent/DeliveryPage.scss
new file mode 100644
index 0000000..23dcd4a
--- /dev/null
+++ b/../simple-store/src/components/pages/StaticContent/DeliveryPage.scss
@@ -0,0 +1,40 @@
+@import '../../../styles/mixins/breakpoints';
+@import '../../../styles/variables.scss';
+
+.stores-page {
+    padding-top: 20px;
+    padding-bottom: 20px;
+}
+
+.stores-page__content {
+    margin-top: 30px;
+}
+
+.stores-page__block {
+
+    &:not(:last-child) {
+        padding-bottom: 30px;
+    }
+
+    &:not(:first-child) {
+        padding-top: 30px;
+        border-top: 1px solid #eee;
+    }
+
+    p {
+        margin-top: 15px;
+        line-height: 32px;
+        font-family: $font-family-body;
+        font-size: $font-size-small;
+        color: $color-body;
+    }
+
+    ul {
+        font-family: $font-family-body;
+        font-size: $font-size-small;
+        color: $color-body;
+        list-style: initial;
+        margin: 10px;
+        padding: 0 10px 10px 10px;
+    }
+}
diff --git a/../simple-store/src/components/pages/StaticContent/InfoPage.intl.js b/../simple-store/src/components/pages/StaticContent/InfoPage.intl.js
new file mode 100644
index 0000000..63fcf88
--- /dev/null
+++ b/../simple-store/src/components/pages/StaticContent/InfoPage.intl.js
@@ -0,0 +1,11 @@
+export default {
+    "uk": {
+        "title": "Про нас",
+    },
+    "ru": {
+        "title": "О нас",
+    },
+    "en": {
+        "title": "About us",
+    }
+};
diff --git a/src/components/pages/StaticContent/InfoPage.js b/../simple-store/src/components/pages/StaticContent/InfoPage.js
index a69454b..43324ac 100644
--- a/src/components/pages/StaticContent/InfoPage.js
+++ b/../simple-store/src/components/pages/StaticContent/InfoPage.js
@@ -2,20 +2,35 @@
  * Imports
  */
 import React from 'react';
+import {FormattedMessage} from 'react-intl';
+import PropTypes from 'prop-types';
+
+import config from '../../../config';
+
+// Flux
+import IntlStore from '../../../stores/Application/IntlStore';
 
 // Required components
 import Heading from '../../common/typography/Heading';
+import Text from '../../common/typography/Text';
+
+// Translation data for this component
+import intlData from './InfoPage.intl';
 
 /**
  * Component
  */
 class InfoPage extends React.Component {
 
+    static contextTypes = {
+        getStore: PropTypes.func.isRequired
+    };
+
     //*** Page Title and Snippets ***//
 
     static pageTitleAndSnippets = function (context, params, query) {
         return {
-            title: 'Información'
+            title: `${context.getStore(IntlStore).getMessage(intlData, 'title')} - ${config.app.title[context.getStore(IntlStore).getCurrentLocale()]}`
         }
     };
 
@@ -30,127 +45,31 @@ class InfoPage extends React.Component {
     //*** Template ***//
 
     render() {
+        let intlStore = this.context.getStore(IntlStore);
+
         return (
             <div className="info-page">
                 <div className="info-page__title">
                     <Heading size="large">
-                        Información
+                        <FormattedMessage id="aboutUsHeader" />
                     </Heading>
                 </div>
                 <div className="info-page__content">
                     <div className="info-page__block">
-                        <Heading size="medium">
-                            Asistencia al cliente
-                        </Heading>
-                        <div className="info-page__support">
-                            <p>
-                                Para cualquier problema relacionado con la tienda online, póngase en contacto a través de <a href="mailto:vendas@tienda765.com"> ventas@tienda765.com </a> <br />
-                                Gracias
-                            </p>
-                        </div>
-                    </div>
-                    <div className="info-page__block">
-                        <Heading size="medium">
-                          Costos de Envío
-                        </Heading>
-                        <div className="info-page__shipping">
-                            <p>
-                              Costos de Envío
-                            </p>
+                        <div className="info-page__text">
                             <p>
-                                Válido para Resistencia Chaco
-                                <ul>
-                                    <li>Gratis para encomiendas con valor superior a $150 en Zona 1</li>
-                                    <li>$25 para encomiendas con valor menores a $150 en Zona 1</li>
-                                    <li>$30 para envíos en la Zona 2</li>
-                                </ul>
+                                <Text size="medium">
+                                    <FormattedMessage id="aboutUsDescriptionFirst" />
+                                </Text>
                             </p>
                             <p>
-                                Todos los precios incluyen IVA.
+                                <Text size="medium">
+                                    <FormattedMessage id="aboutUsDescriptionSecond"/>
+                                </Text>
                             </p>
                         </div>
                     </div>
-                    <div className="info-page__block">
-                        <Heading size="medium">
-                            Términos y Condiciones
-                        </Heading>
-                        <div className="info-page__terms-and-conditions">
-                            <p>
-                            Términos y Condiciones Generales de Venta<br />
-                                 Estimado (a) Cliente,
-                            </p>
-                            <p>
-                            ¡Bienvenido a la tienda Tienda765 Store!
-                                 Los Términos y Condiciones Generales de Venta que siguen regulan la oferta y la venta de productos en nuestro sitio web ("tienda765.com").
-                                 Los productos adquiridos en los sitios web Tienda765 son vendidos directamente por Tienda 765 Resistencia Chaco, Representaciones S.A. (de ahora en adelante denominado Tienda765 ).
-                                 Recordamos también que los usuarios tienen el derecho de solicitar y recibir apoyo de la Tienda765 sobre pedidos y entregas o cómo hacer compras en línea en el plazo de 72 horas laborables a partir del momento en que se recibe la solicitud (salvo motivos de fuerza mayor).
-                            </p>
-                            <p>
-                              Todas las solicitudes se deben realizar a través de la página web destinada a este efecto, siendo posible en caso de duda contactar al centro de atención al cliente a través de correo electrónico a la dirección creada a tal efecto, ya sea a través del número de apoyo existente. Cuanto más información nos proporcione mejor y más rápidamente podremos darle apoyo y más eficiente será nuestro servicio. Para obtener más información sobre los pedidos y el estado de la entrega, se pondrá a disposición del usuario una vez que haya algún cambio en el estado del pedido. Todas las comunicaciones se enviarán a su dirección electrónica (e-mail) registrada en el momento del pedido. La información legal relativa a las compras en línea y las entregas está disponible en la sección de "Términos y Condiciones Generales de Venta" y "Política de Privacidad" en nuestra página web.
-                            </p>
-                            <p>
-                            <strong> 1. Nuestra política comercial </ strong> <br />
-                                1.1 Los productos Tienda765 presentes en nuestro catálogo en línea y los servicios comerciales previstos están disponibles exclusivamente para sus usuarios finales, es decir los "Consumidores". Nuestros productos y sus respectivos precios son válidos si siempre que estén disponibles en nuestros almacenes.
-                                1.2 "Consumidor" significa, de conformidad con el artículo 18 del Código del Consumo, cualquier persona física que actúe con fines fuera de su actividad económica, comercial o profesional. Si no es un consumidor, le pedimos que no compre ningún producto en nuestra tienda online.
-                                1.3 La Tienda765 se reserva el derecho de no procesar pedidos recibidos de usuarios que no sean "Consumidores" y cualquier otro pedido que no cumpla la política comercial de la Tienda765 Argentina.
-                                Los presentes Términos y Condiciones Generales de Venta regulan exclusivamente la oferta, transmisión y aceptación de pedidos de compra relativos a productos existentes en la tienda online de la Tienda765 entre los usuarios de la Tienda765 y la empresa Tienda765.
-                                1.5 Los Términos y Condiciones Generales de Venta no regulan la prestación de servicios o la venta de productos por parte de terceros que estén en Tienda765 Argentina a través de enlaces, banners u otras conexiones de hipertexto. Antes de enviar pedidos y adquirir productos y servicios a estos terceros, recomendamos a nuestros usuarios que cumplan los términos y condiciones de éstos, ya que la Tienda765 Argentina no puede, en ninguna circunstancia,                ser responsabilizada por la prestación de servicios prestados por terceros o por la ejecución De transacciones de comercio electrónico entre usuarios de Tienda765 Argentina y terceros.
-                            </p>
-                            <p>
 
-                            <strong> 2. Cómo celebrar un contrato con Tienda765  </ strong> <br />
-                                2.1 Para solicitar un pedido relativo a la adquisición de uno o varios productos en Tienda765 , deberá elegir los mismos en la tienda online y rellenar el formulario de pedido que se envía electrónicamente a la plataforma alquilada a tal efecto, siguiendo las instrucciones pertinentes al añadir un producto A la cesta, quedando su compra registrada.<br />
-                                2.2 El formulario del pedido contiene una sección con estos Términos y Condiciones Generales de Venta, y contiene también información sobre las principales características de cada producto pedido y su precio unitario (incluyendo todas las tasas y derechos aplicables), el tipo de pago que puede Para la compra, los términos de envío a los productos adquiridos, los gastos de envío y entrega, y las referencias a los términos y condiciones para la devolución de artículos adquiridos en línea.<br />
-                                2.3 Se considera que un pedido se ha efectuado cuando la Tienda765  ha recibido su formulario de pedido por vía electrónica y la información ha sido verificada y dada como correcta.<br />
-                                2.4 Antes de enviar su formulario de pedido para la compra de productos, se le pide que lea atentamente los Términos y Condiciones Generales de Venta, guarde o solicite una copia del mismo para su uso personal.<br />
-                                2.5 El formulario de pedido se archiva en nuestra base de datos por el tiempo necesario para procesar su pedido de conformidad con la ley. Puede acceder a su formulario de pedido en su email, el cual se envía inmediatamente después del pago a través de Paypal o después de finalizar el pedido cuando se selecciona el modo de pago Transferencia Bancaria o Contra-Reembolso. Además, la copia de las pruebas informáticas relativas a la celebración del contrato se conservará por el tiempo previsto por las normas de derecho civil y fiscal aplicables.<br />
-                                2.6 Los pedidos enviados a la Tienda765  deben cumplimentarse en Español, Inglés o Español, de acuerdo con el país al que se enviará el pedido.<br />
-                                2.7 Después de que su formulario de pedido haya sido registrado, Tienda765  procesará su pedido tan pronto como sea posible.<br />
-                                2.9 Tienda765  puede no procesar pedidos de compra si no hay garantías suficientes de solvencia, si los pedidos son incompletos o incorrectos, o si los productos ya no están disponibles. En las situaciones antes mencionadas, le informaremos por correo electrónico de que el contrato no se ha ejecutado y que la Tienda765  no ha efectuado su pedido especificando los motivos. Además de la información suministrada, Tienda765  no está en condiciones de dar indicaciones más detalladas en relación con la disponibilidad del producto (s); Por lo que una vez examinada su pedido, Tienda765  le informará por correo electrónico o por teléfono si algunos de los productos pedidos por usted no están disponibles. Sin perjuicio de las disposiciones de las Condiciones Generales de Venta, se considera que el pedido en cuestión tiene por objeto prestaciones de venta divisibles, autónomas y relativas a más de una unidad económica, cuantos son los productos pedidos, tal como se ha expresado expresamente Cliente y Tienda765  con el envío del pedido y la aceptación de la misma. Por consiguiente, en el caso en que la ejecución del pedido por parte de Tienda765  se limite a algunos de los productos pedidos debido a la indisponibilidad de algunos de ellos o por otras razones legítimas, independientes de la voluntad de Tienda765 , con el envío del pedido en cuestión, El Comprador declara su interés y presta su consentimiento a la ejecución parcial de la compra, limitada a los productos restantes, que por lo tanto no podrá ser rechazada por el Comprador, ni podrá consentir al Comprador la terminación de dicho pedido. En el caso Tienda765  no se encuentra en las condiciones de aceptar íntegramente el pedido efectuado por el Cliente, dando lugar a la aceptación parcial de la misma con respecto a los productos disponibles, el eventual ejercicio del derecho de arrepentimiento previsto por el art. N ° 8 de las Condiciones Generales de Venta no dará lugar a ningún gasto de transporte a cargo del propio cliente.<br />
-                                2.10 La presentación de un formulario de pedido a la Tienda765  significa la aceptación incondicional y el compromiso de observar las disposiciones de los presentes Términos y Condiciones Generales de Venta en el contrato que celebra con Tienda765 . Si no está de acuerdo con algunas de las disposiciones de los presentes Términos y Condiciones Generales de Venta, no someta su formulario de pedido para la compra de productos en la Tienda765  y contacte con nosotros.<br />
-2.11 Al someter un formulario de pedido, acepta y acepta las presentes Condiciones Generales de Venta, así como con otras condiciones igualmente contenidas en la Tienda765  a través de enlaces, incluyendo los Términos y Condiciones Generales de Venta y Política de Privacidad. />
-                                2.12 Una vez enviado un formulario de pedido, Tienda765  le enviará por correo electrónico copia del recibo electrónico de la orden de compra, que contiene un resumen de la información relacionada con el formulario de pedido (Principales características de los productos, información detallada sobre el precio , Condiciones de pago y el costo de la solicitud de envío al cliente, dirección donde presentar eventuales reclamaciones y servicios de asistencia posventa).
-                                2.13 Al someter un formulario de pedido a la Tienda765 , está aceptando recibir la factura / talón emitidos a efectos fiscales en formato Físico junto con el pedido efectuado.
-                            </ p>
-                            <p>
-                                <strong> 3. Garantías e indicación del precio del producto </ strong> <br />
-                                Los productos para la venta en Tienda765  son de calidad superior, de acuerdo con los estándares europeos, después de pasar por las pruebas de calidad. Estas pruebas son supervisadas por la Tienda765.<br />
-                                3.2 Las principales características de los productos se presentan en la Tienda765  en la página web de cada producto. Los productos ofrecidos para la venta en la Tienda765  pueden no corresponder exactamente a lo real en términos de imagen y colores debido al navegador de Internet o al monitor utilizados. Las imágenes presentadas tienen un efecto meramente indicativo. Las características técnicas de un producto, las homologaciones y declaraciones de seguridad de un producto de marca Tienda765  y de cualquier otro producto vendido a través del sitio se indican en la etiqueta o en el embalaje o en las instrucciones de uso del producto y pueden estar mencionadas en la totalidad o En parte en el propio sitio junto a la ilustración del producto. Todos los productos de marca Tienda765  cumplen los estándares y están homologados según lo previsto por las normas de la Comunidad Argentina de Ventas online.<br />
-                                3.3 El precio de los productos se expresa en euros, incluido el IVA, así como todos los impuestos e impuestos aplicables aplicándose los gastos de transporte cuando el pedido efectuado no esté exenta de las mismas. Los precios están sujetos a cambios. Compruebe el precio final de venta y los gastos de transporte antes de enviar el formulario de pedido.<br />
-                                3.4 Los pedidos efectuados desde el sitio de un país distinto del que desea enviar el producto, o para direcciones para las cuales la Tienda765  no permite expedir, son automáticamente canceladas.<br />
-                                3.5 Todos los productos se entregan con una etiqueta de identificación. No retire la etiqueta o el sello de los artículos adquiridos si desea devolverlos. No somos en modo alguno responsables de información o datos erróneos ni por eventuales inexactitudes técnicas o de cualquier otra naturaleza proporcionadas por terceros a la Tienda765 .<br />
-                                3.6 En caso de que decida ejercer su derecho de devolución de los productos adquiridos, Tienda765  tiene el derecho de no aceptar productos que se devuelven sin la correspondiente etiqueta o si éstos han sufrido cambios en el estado original o si se presentan dañados (p. O estropeados).<br />
-                                3.8 La garantía, suministrada en el período de duración asociado, se aplicará al producto que presente un defecto de conformidad, siempre que el producto se haya utilizado correctamente, respetando el uso a que se destina y de lo previsto en la documentación técnica o las instrucciones de uso Uso adjunto. La garantía se presta únicamente al cliente que sea el consumidor. En caso de defectos de conformidad, con los gastos a nuestro cargo, se procederá al restablecimiento de la conformidad del producto mediante la reparación o sustitución o la reducción del precio, a menos que se resuelva el contrato, si procede. La asistencia durante el período de garantía se realiza mediante la exhibición del Factura de Compra. Nos reservamos la posibilidad de sustituir el producto (a nuestra discreción incluso por un producto de características equivalentes) o rescindir el contrato de venta con la devolución del valor total pagado y de eventuales gastos posteriores, en el caso de que, por cualquier motivo, no Es posible restablecer o sustituir un producto en el período de garantía. No nos responsabilizamos por eventuales retrasos en la sustitución. En los casos en que esté prevista la devolución del producto para poder disfrutar de la garantía, el producto deberá ser restituido en el embalaje original, con todas las partes que lo componen (incluyendo el embalaje y eventual documentación y accesorios suministrados: manuales, envoltorios, etc.) . Garantizamos el cumplimiento de las normas de calidad relativas a nuestros productos exclusivamente hasta el momento de la entrega. Se excluye cualquier responsabilidad de nuestra parte derivada del uso inapropiado de los productos después de la entrega.
-                            </p>
-                            <p>
-                                <strong>4. Págos</strong><br />
-                                4.1 El pago del precio de los productos y sus costes de envío deben realizarse utilizando uno de los procedimientos indicados en el formulario de pedido en línea.<br />
-                                4.2 En el caso de pago por Transferencia bancaria, el cliente final deberá efectuar la misma para la cuenta designada en el proceso de pedido en el plazo de 24 horas después de la finalización de la misma, enviando el comprobante a la dirección <a href = "mailto: ventas @ Tienda765.com "> ventas@tienda765.com </a>, indicando el número de pedido correspondiente. En el caso de pago por contra reembolso el cliente final deberá indicar el máximo de datos esenciales para la entrega del pedido y su cobro, así como el número de identificación fiscal (NIF) y un contacto telefónico para confirmación de entrega o proporcionarlo al transportista , Siendo que en este caso el cliente final acuerda aceptar estos términos, en que su contacto pueda ser cedido sólo con la finalidad de entrega de la misma. En el caso de pago por Paypal, todos los datos (por ejemplo, número de tarjeta y fecha de caducidad) se gestionan directamente en el sitio de pagos en línea de PayPal (Europe) S.à r.l. Y Cie, S.C.A. Que presta los servicios remotos de pago electrónico, sin que terceros tengan ningún tipo de acceso a los mismos. Tales datos no serán utilizados directamente por Tienda765 . El producto consistirá en el proceso de gestión de los pagos siempre a través del mismo gestor de pagos: sea relativo a compras o la emisión de reembolsos en caso de devoluciones, en el cumplimiento del ejercicio de su derecho de devolución o en los casos señalados como posibles fraudes por la autoridad De seguridad pública. El precio relativo a los productos adquiridos y sus costes de envío, como se indica en el formulario de pedido, se cargarán en su tarjeta de débito / crédito después de haber efectuado el pago de los mismos en el sitio del proveedor. Todos los datos sobre los términos de uso de Paypal se pueden encontrar <a href = "https://cms.paypal.com/ie/cgi-bin/?cmd=_render-content&content_ID=ua/UserAgreement_full&locale.x=en_US "Target =" _ blank "> en este enlace </a>, siendo la Tienda765  ajena a cualquier problema con pagos o utilización de este medio.
-                                4.4 Si, por cualquier razón, existe algún problema en el pago del pedido o la ausencia de la efectividad del mismo, la Tienda765  se reserva el derecho de cancelar la misma, siendo esta información enviada posteriormente por e-mail.
-                            </p>
-                            <p>
-                                <strong>5. Vouchers Electrónicos de Descuentos en la tienda online de la Tienda765 </strong><br />
-                                5.1 Los Vouchers suministrados por la tienda online de la Tienda765 , son códigos electrónicos, también denominados códigos de descuento Tienda765 , que le permiten aprovechar un descuento en la compra de artículos o categorías específicas en la tienda online de la Tienda765 .<br />
-                                5.2 El cuadro de inserción del indicador de descuento Tienda765  se visualiza en la esquina inferior izquierda de la pantalla de resumen de la cesta de la compra y el consumidor que envía el mismo a través del botón enviar. El descuento se calculará automáticamente, siendo responsabilidad del consumidor comprobar si este descuento se refleja en el precio final del pedido.<br />
-                            </p>
-                            <p>
-                                <strong>[Resolución alternativa de conflictos]</strong>
-                            </p>
-                            <p>
-                                En caso de litigio de consumo en línea, el consumidor puede recurrir a un sistema de resolución de litigios en línea (RLL), la Plataforma ODR (en línea controvertida), con competencia para resolver los litigios relativos a las obligaciones contractuales resultantes De contratos de venta o de servicios en línea.
-                            </p>
-                            <p>
-                                El consumidor pasa así a tener un portal único donde puede registrar sus reclamaciones y acompañar su evolución. "La plataforma garantiza todos los pasos para resolver los litigios, desde la introducción por el consumidor, pasando por la interconexión con las entidades de RAL, y terminando en la información a las partes involucradas"
-                            </p>
-                            <p>
-                                Acceda aquí a la Plataforma Electrónica de Resolución Alternativa de Litigios en los contratos de venta o de servicios online.
-                            </p>
-                            <p>
-                            Para Quejas y Reclamaciones - <a href="mailto:vendas@tienda765.com"> ventas@tienda765.com </a> <br />
-                                 Más información en Portal del Consumidor - <a href="http://www.consumidor.ar" target="_blank">http://www.consumidor.ar </a>.
-                            </p>
-                        </div>
-                    </div>
                 </div>
             </div>
         );
diff --git a/src/components/pages/StaticContent/InfoPage.scss b/../simple-store/src/components/pages/StaticContent/InfoPage.scss
index 7841a90..4020e7f 100644
--- a/src/components/pages/StaticContent/InfoPage.scss
+++ b/../simple-store/src/components/pages/StaticContent/InfoPage.scss
@@ -16,9 +16,7 @@
     }
 }
 
-.info-page__support,
-.info-page__shipping,
-.info-page__terms-and-conditions {
+.info-page__text {
 
     a {
         color: $color-primary;
@@ -26,6 +24,7 @@
 
     p {
         margin-top: 15px;
+        line-height: 32px;
     }
 
     p, ul {
diff --git a/src/components/pages/StaticContent/StoresPage.js b/src/components/pages/StaticContent/StoresPage.js
deleted file mode 100644
index 1387543..0000000
--- a/src/components/pages/StaticContent/StoresPage.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Imports
- */
-import React from 'react';
-
-// Required components
-import Heading from '../../common/typography/Heading';
-
-/**
- * Component
- */
-class StoresPage extends React.Component {
-
-    //*** Page Title and Snippets ***//
-
-    static pageTitleAndSnippets = function (context, params, query) {
-        return {
-            title: 'As Nossas Lojas'
-        }
-    };
-
-    //*** Component Lifecycle ***//
-
-    componentDidMount() {
-
-        // Component styles
-        require('./StoresPage.scss');
-    }
-
-    //*** Template ***//
-
-    render() {
-        return (
-          <div className="stores-page__content">
-            <p className="stores-page__address">
-                <strong>Dirección:</strong><br />
-                Güemes 765 <a href="https://goo.gl/maps/iCGwsKYjQXq" target="_blank">Ver en Google Maps</a><br />
-                CP 3500 - Resistencia Chaco<br />
-            </p>
-            <p className="stores-page__schedule">
-                <strong>Horarios:</strong><br />
-                Lunes a Viernes: de 07 a 12:30 y 17 a 20:30<br />
-                Sábados: de 09 a 12:30<br />
-            </p>
-            <p className="stores-page__contacts">
-                <strong>Contactanos:</strong><br />
-                3624-201230
-            </p>
-          </div>
-        );
-    }
-}
-
-/**
- * Exports
- */
-export default StoresPage;
diff --git a/src/components/pages/StaticContent/StoresPage.scss b/src/components/pages/StaticContent/StoresPage.scss
deleted file mode 100644
index ae87fb4..0000000
--- a/src/components/pages/StaticContent/StoresPage.scss
+++ /dev/null
@@ -1,49 +0,0 @@
-@import '../../../styles/mixins/breakpoints';
-@import '../../../styles/variables.scss';
-
-.stores-page {
-    padding-top: 20px;
-    padding-bottom: 20px;
-}
-
-.stores-page__content {
-    margin-top: 30px;
-}
-
-.stores-page__content p,a { color: white; }
-
-.stores-page__block {
-
-    @include breakpoint(wide-screens) {
-        width: 50%;
-    }
-
-    &:not(:last-child) {
-        padding-bottom: 30px;
-    }
-
-    &:not(:first-child) {
-        padding-top: 30px;
-        border-top: 1px solid #eee;
-    }
-
-    a {
-        color: $color-primary;
-    }
-}
-
-.stores-page__schedule,
-.stores-page__address,
-.stores-page__contacts{
-    font-family: $font-family-body;
-    font-size: $font-size-small;
-    color: $color-body;
-}
-
-.stores-page__schedule {
-    margin-top: 5px;
-}
-
-.stores-page__contacts {
-    margin-top: 5px;
-}
diff --git a/src/constants/account.js b/../simple-store/src/constants/account.js
index 5637cbb..128ac16 100644
--- a/src/constants/account.js
+++ b/../simple-store/src/constants/account.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
 
     ACCOUNT_FETCH: null,
     ACCOUNT_FETCH_SUCCESS: null,
diff --git a/src/constants/application.js b/../simple-store/src/constants/application.js
index 20864e2..5126d4a 100644
--- a/src/constants/application.js
+++ b/../simple-store/src/constants/application.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
     APPLICATION_CHANGE_ROUTE: null,
     APPLICATION_ROUTE_ERROR: null,
     APPLICATION_DRAWER_TRIGGER: null,
diff --git a/src/constants/cart.js b/../simple-store/src/constants/cart.js
index ecd3ccb..43b0924 100644
--- a/src/constants/cart.js
+++ b/../simple-store/src/constants/cart.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
 
     CART_FETCH: null,
     CART_FETCH_SUCCESS: null,
diff --git a/src/constants/checkout.js b/../simple-store/src/constants/checkout.js
index e872bc9..99eb228 100644
--- a/src/constants/checkout.js
+++ b/../simple-store/src/constants/checkout.js
@@ -1,14 +1,10 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
     CHECKOUT_CREATE: null,
     CHECKOUT_CREATE_SUCCESS: null,
     CHECKOUT_CREATE_ERROR: null,
 
-    CHECKOUT_CC_CREATE: null,
-    CHECKOUT_CC_CREATE_SUCCESS: null,
-    CHECKOUT_CC_CREATE_ERROR: null,
-
     CHECKOUT_SET_PAYMENT_OPTIONS: null,
 
     CHECKOUT_UPDATE: null,
diff --git a/src/constants/collections.js b/../simple-store/src/constants/collections.js
index e553305..bce17e2 100644
--- a/src/constants/collections.js
+++ b/../simple-store/src/constants/collections.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
 
     // All Collections
     COLLECTIONS: null,
@@ -17,11 +17,6 @@ export default keyMirror({
     COLLECTIONS_ADD_SUCCESS: null,
     COLLECTIONS_ADD_ERROR: null,
 
-    // Delete item
-    COLLECTIONS_ITEM_DELETE: null,
-    COLLECTIONS_ITEM_DELETE_SUCCESS: null,
-    COLLECTIONS_ITEM_DELETE_ERROR: null,
-
     // Fetch item
     COLLECTIONS_ITEM: null,
     COLLECTIONS_ITEM_SUCCESS: null,
diff --git a/src/constants/contents.js b/../simple-store/src/constants/contents.js
index eae4bf6..c1077a6 100644
--- a/src/constants/contents.js
+++ b/../simple-store/src/constants/contents.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
 
     // Contents list
     CONTENTS_FIND: null,
diff --git a/src/constants/customers.js b/../simple-store/src/constants/customers.js
index c57e6cd..9aa4832 100644
--- a/src/constants/customers.js
+++ b/../simple-store/src/constants/customers.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
     CUSTOMERS_FIND: null,
     CUSTOMERS_FIND_SUCCESS: null,
     CUSTOMERS_FIND_ERROR: null
diff --git a/src/constants/files.js b/../simple-store/src/constants/files.js
index 9dc1523..d2ff7b0 100644
--- a/src/constants/files.js
+++ b/../simple-store/src/constants/files.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
     FILES_UPLOAD: null,
     FILES_UPLOAD_SUCCESS: null,
     FILES_UPLOAD_ERROR: null
diff --git a/src/constants/groupChico.js b/src/constants/groupChico.js
deleted file mode 100644
index 2368a04..0000000
--- a/src/constants/groupChico.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import keyMirror from 'react/lib/keyMirror';
-
- export default keyMirror({
-
-     // All GROUPS
-     GROUPS_CHICO: null,
-     GROUPS_CHICO_SUCCESS: null,
-     GROUPS_CHICO_ERROR: null,
-
-     // GROUPS list
-     GROUPS_CHICO_FIND: null,
-     GROUPS_CHICO_FIND_SUCCESS: null,
-     GROUPS_CHICO_FIND_ERROR: null,
-
-     // Add collection
-     GROUPS_CHICO_ADD: null,
-     GROUPS_CHICO_ADD_SUCCESS: null,
-     GROUPS_CHICO_ADD_ERROR: null,
-
-     // Delete item
-     GROUPS_CHICO_ITEM_DELETE: null,
-     GROUPS_CHICO_ITEM_DELETE_SUCCESS: null,
-     GROUPS_CHICO_ITEM_DELETE_ERROR: null,
-
-     // Fetch item
-     GROUPS_CHICO_ITEM: null,
-     GROUPS_CHICO_ITEM_SUCCESS: null,
-     GROUPS_CHICO_ITEM_ERROR: null,
-
-     // Save item
-     GROUPS_CHICO_ITEM_SAVE: null,
-     GROUPS_CHICO_ITEM_SAVE_SUCCESS: null,
-     GROUPS_CHICO_ITEM_SAVE_ERROR: null,
- });
diff --git a/src/constants/groupGrande.js b/src/constants/groupGrande.js
deleted file mode 100644
index 4af63e5..0000000
--- a/src/constants/groupGrande.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import keyMirror from 'react/lib/keyMirror';
-
- export default keyMirror({
-
-     // All GROUPS
-     GROUPS_GRANDE: null,
-     GROUPS_GRANDE_SUCCESS: null,
-     GROUPS_GRANDE_ERROR: null,
-
-     // GROUPS list
-     GROUPS_GRANDE_FIND: null,
-     GROUPS_GRANDE_FIND_SUCCESS: null,
-     GROUPS_GRANDE_FIND_ERROR: null,
-
-     // Add collection
-     GROUPS_GRANDE_ADD: null,
-     GROUPS_GRANDE_ADD_SUCCESS: null,
-     GROUPS_GRANDE_ADD_ERROR: null,
-
-     // Delete item
-     GROUPS_GRANDE_ITEM_DELETE: null,
-     GROUPS_GRANDE_ITEM_DELETE_SUCCESS: null,
-     GROUPS_GRANDE_ITEM_DELETE_ERROR: null,
-
-     // Fetch item
-     GROUPS_GRANDE_ITEM: null,
-     GROUPS_GRANDE_ITEM_SUCCESS: null,
-     GROUPS_GRANDE_ITEM_ERROR: null,
-
-     // Save item
-     GROUPS_GRANDE_ITEM_SAVE: null,
-     GROUPS_GRANDE_ITEM_SAVE_SUCCESS: null,
-     GROUPS_GRANDE_ITEM_SAVE_ERROR: null,
- });
diff --git a/src/constants/groupMediano.js b/src/constants/groupMediano.js
deleted file mode 100644
index 0dd67af..0000000
--- a/src/constants/groupMediano.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import keyMirror from 'react/lib/keyMirror';
-
- export default keyMirror({
-
-     // All GROUPS
-     GROUPS_MEDIANO: null,
-     GROUPS_MEDIANO_SUCCESS: null,
-     GROUPS_MEDIANO_ERROR: null,
-
-     // GROUPS list
-     GROUPS_MEDIANO_FIND: null,
-     GROUPS_MEDIANO_FIND_SUCCESS: null,
-     GROUPS_MEDIANO_FIND_ERROR: null,
-
-     // Add collection
-     GROUPS_MEDIANO_ADD: null,
-     GROUPS_MEDIANO_ADD_SUCCESS: null,
-     GROUPS_MEDIANO_ADD_ERROR: null,
-
-     // Delete item
-     GROUPS_MEDIANO_ITEM_DELETE: null,
-     GROUPS_MEDIANO_ITEM_DELETE_SUCCESS: null,
-     GROUPS_MEDIANO_ITEM_DELETE_ERROR: null,
-
-     // Fetch item
-     GROUPS_MEDIANO_ITEM: null,
-     GROUPS_MEDIANO_ITEM_SUCCESS: null,
-     GROUPS_MEDIANO_ITEM_ERROR: null,
-
-     // Save item
-     GROUPS_MEDIANO_ITEM_SAVE: null,
-     GROUPS_MEDIANO_ITEM_SAVE_SUCCESS: null,
-     GROUPS_MEDIANO_ITEM_SAVE_ERROR: null,
- });
diff --git a/src/constants/orders.js b/../simple-store/src/constants/orders.js
index f01994c..f351f30 100644
--- a/src/constants/orders.js
+++ b/../simple-store/src/constants/orders.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
     ORDER_CREATE: null,
     ORDER_CREATE_SUCCESS: null,
     ORDER_CREATE_ERROR: null,
diff --git a/../simple-store/src/constants/primaryBrand.js b/../simple-store/src/constants/primaryBrand.js
new file mode 100644
index 0000000..6ffe1df
--- /dev/null
+++ b/../simple-store/src/constants/primaryBrand.js
@@ -0,0 +1,20 @@
+import keymirror from 'keymirror';
+
+export default keymirror({
+
+    // Add Primary Brand
+    PRIMARY_BRAND_CREATE: null,
+    PRIMARY_BRAND_CREATE_SUCCESS: null,
+    PRIMARY_BRAND_CREATE_ERROR: null,
+
+    // Fetch Primary Brand
+    PRIMARY_BRAND_FETCH: null,
+    PRIMARY_BRAND_FETCH_SUCCESS: null,
+    PRIMARY_BRAND_FETCH_ERROR: null,
+
+    // Save Primary Brand
+    PRIMARY_BRAND_SAVE: null,
+    PRIMARY_BRAND_SAVE_SUCCESS: null,
+    PRIMARY_BRAND_SAVE_ERROR: null,
+
+});
diff --git a/src/constants/products.js b/../simple-store/src/constants/products.js
index d68a215..53a8bcd 100644
--- a/src/constants/products.js
+++ b/../simple-store/src/constants/products.js
@@ -1,6 +1,6 @@
-import keyMirror from 'react/lib/keyMirror';
+import keymirror from 'keymirror';
 
-export default keyMirror({
+export default keymirror({
 
     // Add product
     PRODUCTS_ADD: null,
@@ -16,11 +16,6 @@ export default keyMirror({
     PRODUCTS_HOMEPAGE: null,
     PRODUCTS_HOMEPAGE_SUCCESS: null,
     PRODUCTS_HOMEPAGE_ERROR: null,
-    
-    // Delete item
-    PRODUCTS_ITEM_DELETE: null,
-    PRODUCTS_ITEM_DELETE_SUCCESS: null,
-    PRODUCTS_ITEM_DELETE_ERROR: null,
 
     // Fetch item
     PRODUCTS_ITEM: null,
diff --git a/../simple-store/src/dataLoader.js b/../simple-store/src/dataLoader.js
new file mode 100644
index 0000000..95d8f06
--- /dev/null
+++ b/../simple-store/src/dataLoader.js
@@ -0,0 +1,68 @@
+/**
+ * Imports
+ */
+/*global  document, window */
+import React from 'react';
+import { Route, withRouter } from 'react-router-dom';
+import { matchRoutes } from 'react-router-config';
+
+import queryString from 'query-string';
+
+import fetchData from './utils/fetchData';
+import fetchPageTitleAndSnippets from './utils/fetchPageTitleAndSnippets';
+
+import config from './config';
+
+/**
+ * Data Loader to fetch data for current route
+ */
+
+class DataLoader extends React.Component {
+    state = {
+        previousLocation: null
+    }
+
+    componentWillReceiveProps(nextProps) {
+        const navigated = nextProps.location !== this.props.location;
+        const { routes } = this.props;
+
+        if (navigated) {
+            // save the location so we can render the old screen
+            this.setState({
+                previousLocation: this.props.location
+            });
+
+            const branch = matchRoutes(routes, nextProps.location.pathname);
+            const query = queryString.parse(nextProps.location.search);
+            fetchData(context, branch, query)
+                .then(() => {
+                    let pageTitleAndSnippets = fetchPageTitleAndSnippets(context, branch);
+                    // set default title to ukranian language
+                    document.title = pageTitleAndSnippets ? pageTitleAndSnippets.title : config.app.title.uk;
+
+                    this.setState({
+                        previousLocation: null
+                    })
+                });
+        }
+    }
+
+    render() {
+        const { children, location } = this.props
+        const { previousLocation } = this.state
+
+        // use a controlled <Route> to trick all descendants into
+        // rendering the old location
+        return (
+            <Route
+                location={previousLocation || location}
+                render={() => children}
+            />
+        )
+    }
+};
+
+/**
+ * Exports
+ */
+export default withRouter(DataLoader);
diff --git a/src/routes.js b/../simple-store/src/routes.js
index 9d396cd..bd24914 100644
--- a/src/routes.js
+++ b/../simple-store/src/routes.js
@@ -2,7 +2,6 @@
  * Imports
  */
 import React from 'react';
-import {DefaultRoute, NotFoundRoute, Route} from 'react-router';
 
 // Required components
 import Application from './components/pages/Application/Application';
@@ -14,9 +13,10 @@ import CollectionProductsPage from './components/pages/Collections/CollectionPro
 import ProductListingPage from './components/pages/Products/ProductListingPage';
 import ProductPage from './components/pages/Products/ProductPage';
 
-import Account from './components/pages/Account/Account';
 import AccountBase from './components/pages/Account/AccountBase';
+import Account from './components/pages/Account/Account';
 import AccountOrderDetailsPage from './components/pages/Account/AccountOrderDetailsPage';
+
 import Login from './components/pages/Account/Login';
 import Logout from './components/pages/Account/Logout';
 import Register from './components/pages/Account/Register';
@@ -24,13 +24,14 @@ import RegisterConfirm from './components/pages/Account/RegisterConfirm';
 import Reset from './components/pages/Account/Reset';
 import ResetConfirm from './components/pages/Account/ResetConfirm';
 
-import StoresPage from './components/pages/StaticContent/StoresPage';
+import DeliveryPage from './components/pages/StaticContent/DeliveryPage';
 import InfoPage from './components/pages/StaticContent/InfoPage';
 
 import ArticlesListingPage from './components/pages/Articles/ArticlesListingPage';
 import ArticlePage from './components/pages/Articles/ArticlePage';
 
 import Admin from './components/pages/Admin/Admin';
+
 import AdminCollections from './components/pages/Admin/Collections/AdminCollections';
 import AdminCollectionsEdit from './components/pages/Admin/Collections/AdminCollectionsEdit';
 import AdminContents from './components/pages/Admin/Contents/AdminContents';
@@ -45,50 +46,167 @@ import AdminProductsEdit from './components/pages/Admin/Products/AdminProductsEd
 /**
  * Application's Routes
  */
-const routes = (
-    <Route name="app" path="/:locale" handler={Application}>
-        <DefaultRoute name="homepage" handler={Homepage} />
-        <Route name="login" handler={Login} />
-        <Route name="logout" handler={Logout} />
-        <Route name="admin-panel" handler={Admin}>
-            <DefaultRoute name="admin-dashboard" handler={AdminDashboard} />
-        </Route>
-        <Route name="register" handler={Register} />
-        <Route name="register-confirm" path="register/confirm/:token" handler={RegisterConfirm} />
-        <Route name="reset" handler={Reset} />
-        <Route name="reset-confirm" path="reset/confirm/:token" handler={ResetConfirm} />
-        <Route name="account" handler={AccountBase}>
-            <DefaultRoute handler={Account} />
-            <Route name="account-order-details" path="orders/:orderId/?" handler={AccountOrderDetailsPage} />
-        </Route>
-        <Route name="collection" path="collections/:collectionId/?" handler={CollectionProductsPage} />
-        <Route name="collection-slug" path="collections/:collectionId/:collectionSlug/?" handler={CollectionProductsPage} />
-        <Route name="products" path="products/?" handler={ProductListingPage} />
-        <Route name="product" path="products/:productId/?" handler={ProductPage} />
-        <Route name="product-slug" path="products/:productId/:productSlug/?" handler={ProductPage} />
-        <Route name="checkout" handler={Checkout} />
-        <Route name="stores" handler={StoresPage} />
-        <Route name="info" handler={InfoPage} />
-        <Route name="articles" path="articles/?" handler={ArticlesListingPage} />
-        <Route name="article" path="articles/:contentId/?" handler={ArticlePage} />
-        <Route name="article-slug" path="articles/:contentId/:contentSlug/?" handler={ArticlePage} />
-        <Route name="adm" handler={Admin}>
-            <DefaultRoute name="adm-dashboard" handler={AdminDashboard} />
-            <Route name="adm-collections" path="collections" handler={AdminCollections} />
-            <Route name="adm-collection-edit" path="collections/:collectionId/?" handler={AdminCollectionsEdit} />
-            <Route name="adm-contents" path="contents" handler={AdminContents} />
-            <Route name="adm-content-edit" path="contents/:contentId/?" handler={AdminContentsEdit} />
-            <Route name="adm-customers" path="customers" handler={AdminCustomers} />
-            <Route name="adm-orders" path="orders" handler={AdminOrders} />
-            <Route name="adm-order-edit" path="orders/:orderId/?" handler={AdminOrdersEdit} />
-            <Route name="adm-products" path="products" handler={AdminProducts} />
-            <Route name="adm-product-edit" path="products/:productId/?" handler={AdminProductsEdit} />
-        </Route>
-        <NotFoundRoute name="not-found" handler={NotFound} />
-    </Route>
-);
+
+const routesConfig = [
+    {
+        component: Application,
+        routes: [
+            {
+                path: '/:locale',
+                exact: true,
+                component: Homepage
+            },
+            {
+                path: '/:locale/login',
+                exact: true,
+                component: Login
+            },
+            {
+                path: '/:locale/logout',
+                exact: true,
+                component: Logout
+            },
+            {
+                path: '/:locale/register',
+                exact: true,
+                component: Register
+            },
+            {
+                path: '/:locale/register/confirm/:token',
+                exact: true,
+                component: RegisterConfirm
+            },
+            {
+                path: '/:locale/reset',
+                exact: true,
+                component: Reset
+            },
+            {
+                path: '/:locale/reset/confirm/:token',
+                exact: true,
+                component: ResetConfirm
+            },
+            {
+                path: '/:locale/account',
+                component: AccountBase,
+                routes: [
+                    {
+                        path: '/:locale/account',
+                        exact: true,
+                        component: Account
+                    },
+                    {
+                        path: '/:locale/account/orders/:orderId',
+                        exact: true,
+                        component: AccountOrderDetailsPage
+                    },
+                ]
+            },
+            {
+                path: '/:locale/collections/:collectionId/:collectionSlug?',
+                exact: true,
+                component: CollectionProductsPage,
+            },
+            {
+                path: '/:locale/products',
+                exact: true,
+                component: ProductListingPage,
+            },
+            {
+                path: '/:locale/products/:productId/:productSlug?',
+                exact: true,
+                component: ProductPage,
+            },
+            {
+                path: '/:locale/checkout',
+                exact: true,
+                component: Checkout,
+            },
+            {
+                path: '/:locale/delivery',
+                exact: true,
+                component: DeliveryPage,
+            },
+            {
+                path: '/:locale/info',
+                exact: true,
+                component: InfoPage,
+            },
+            {
+                path: '/:locale/articles',
+                exact: true,
+                component: ArticlesListingPage,
+            },
+            {
+                path: '/:locale/articles/:contentId/:contentSlug?',
+                exact: true,
+                component: ArticlePage,
+            },
+            {
+                path: '/:locale/adm',
+                component: Admin,
+                routes: [
+                    {
+                        path: '/:locale/adm',
+                        exact: true,
+                        component: AdminDashboard,
+                    },
+                    {
+                        path: '/:locale/adm/collections',
+                        exact: true,
+                        component: AdminCollections,
+                    },
+                    {
+                        path: '/:locale/adm/collections/:collectionId',
+                        exact: true,
+                        component: AdminCollectionsEdit,
+                    },
+                    {
+                        path: '/:locale/adm/contents',
+                        exact: true,
+                        component: AdminContents,
+                    },
+                    {
+                        path: '/:locale/adm/contents/:contentId',
+                        exact: true,
+                        component: AdminContentsEdit,
+                    },
+                    {
+                        path: '/:locale/adm/customers',
+                        exact: true,
+                        component: AdminCustomers,
+                    },
+                    {
+                        path: '/:locale/adm/orders',
+                        exact: true,
+                        component: AdminOrders,
+                    },
+                    {
+                        path: '/:locale/adm/orders/:orderId',
+                        exact: true,
+                        component: AdminOrdersEdit,
+                    },
+                    {
+                        path: '/:locale/adm/products',
+                        exact: true,
+                        component: AdminProducts,
+                    },
+                    {
+                        path: '/:locale/adm/products/:productId',
+                        exact: true,
+                        component: AdminProductsEdit,
+                    },
+                ]
+            },
+            {
+                path: '*',
+                component: NotFound,
+            }
+        ]
+    },
+];
 
 /**
  * Exports
  */
-export default routes;
+export default routesConfig;
diff --git a/src/server.js b/../simple-store/src/server.js
index d4703ee..0cb719d 100644
--- a/src/server.js
+++ b/../simple-store/src/server.js
@@ -3,10 +3,17 @@
  */
 import Debug from 'debug';
 import Express from 'express';
+
+import expressStaticGzip from 'express-static-gzip';
+import cookieParser from 'cookie-parser';
+
 import React from 'react';
-import Router from 'react-router';
+import ReactDOMServer from 'react-dom/server';
+import { StaticRouter } from 'react-router-dom';
+import { matchRoutes, renderRoutes } from 'react-router-config';
 import Serialize from 'serialize-javascript';
-import {FluxibleComponent} from 'fluxible-addons-react';
+import { FluxibleComponent } from 'fluxible-addons-react';
+import { addLocaleData, IntlProvider } from 'react-intl';
 
 import fetchData from './utils/fetchData';
 import fetchPageTitleAndSnippets from './utils/fetchPageTitleAndSnippets';
@@ -15,12 +22,15 @@ import webpackStats from '../webpack/stats';
 
 // Flux
 import ApplicationStore from './stores/Application/ApplicationStore';
+import CartStore from './stores/Cart/CartStore';
 
 import clearRouteErrors from './actions/Application/clearRouteErrors';
 import fetchAllCollections from './actions/Collections/fetchAllCollections';
 import navigateAction from './actions/Application/navigate';
 import setLocale from './actions/Application/setLocale';
 import setMobileBreakpoint from './actions/Application/setMobileBreakpoint';
+import fetchAccountDetails from './actions/Account/fetchAccountDetails';
+import fetchOrCreateCart from './actions/Cart/fetchOrCreateCart';
 
 // Required components
 import BaseHtml from './components/core/BaseHtml';
@@ -28,11 +38,26 @@ import NotFound from './components/pages/NotFound/NotFound';
 import ServerError from './components/pages/ServerError/ServerError';
 
 // Initialize debugging utility
-let debug = Debug('tienda765');
+let debug = Debug('simple-store');
 
 // App fluxible wrapper, configurations, base html component and router action
 import app from './app';
+import DataLoader from './dataLoader';
 import config from './config';
+import routes from './routes';
+
+import uk from 'react-intl/locale-data/uk';
+import en from 'react-intl/locale-data/en';
+import ru from 'react-intl/locale-data/ru';
+
+addLocaleData([...uk, ...en, ...ru]);
+
+const messages = {};
+
+['uk', 'en', 'ru'].forEach((locale) => {
+    messages[locale] = require(`../static/localizations/${locale}.json`);
+});
+
 
 /**
  * Emitted when an exception bubbles all the way back to the event loop.
@@ -77,22 +102,39 @@ function dispatchSetMobileBreakpoint(context, isMobile) {
     });
 }
 
+function dispatchGetAccountDetails(context) {
+    return new Promise(function (resolve, reject) {
+        context.executeAction(fetchAccountDetails, {}, function () { resolve(); });
+    });
+}
+
+function dispatchFetchOrCreateCart(context) {
+    return new Promise(function (resolve, reject) {
+        context.executeAction(fetchOrCreateCart, {
+            cartId: context.getStore(CartStore).getCartId(),
+            cartAccessToken: context.getStore(CartStore).getCartAccessToken()
+        }, function () { resolve(); });
+    });
+}
+
 /**
  * Express server
  */
 let server = Express();
 
-//
-// a) Routes (remember, order is relevant!)
-//
+server.use(cookieParser());
 
 // 1) Serve static files
-server.use('/static', Express.static(__dirname + '/../static'));
 server.use('/robots.txt', Express.static(__dirname + '/../static/robots.txt'));
+server.use('/static', expressStaticGzip(__dirname + '/../static'));
 
 // 2) If requesting root URL, redirect to default locale
 server.get('/', function (req, res, next) {
     let defaultLocale = config.app.locale.default || 'en';
+    let userLocale = req.headers['accept-language'] ? req.headers['accept-language'].substring(0,2) : false;
+    if(config.app.locale.available.indexOf(userLocale) !== -1) {
+        defaultLocale = userLocale;
+    }
     debug(`Redirecting to default locale: ${defaultLocale}`);
     return res.redirect(301, `/${defaultLocale}`);
 });
@@ -102,7 +144,7 @@ server.use(async function (req, res, next) {
 
     try {
 
-        let context = app.createContext({config: config});
+        let context = app.createContext({req, res, config});
 
         // Locale:
         // - Fetch locale from URL
@@ -111,7 +153,7 @@ server.use(async function (req, res, next) {
         let locale = req.path.split('/')[1];
         if (!config.app.locale.available || config.app.locale.available.indexOf(locale) === -1) {
             let NotFoundComponent = React.createFactory(NotFound);
-            let html = React.renderToStaticMarkup(NotFoundComponent());
+            let html = ReactDOMServer.renderToStaticMarkup(NotFoundComponent());
             return res.status(404).send(html);
         }
         await dispatchSetLocale(context, locale);
@@ -129,79 +171,88 @@ server.use(async function (req, res, next) {
         // it with every other route change.
         await dispatchFetchAllCollections(context);
 
+        // When first loading the app on the client, trigger fetching of user account
+        // details before proceding so that, if a user is logged in, this information
+        // is readily available to the application (e.g. for limiting access to certain pages)
+        await dispatchGetAccountDetails(context);
+
+        // Now that we have the account figured out, let's figure out the state of the cart,
+        // fetching any one that we currently have or creating a new one if necessary
+        await dispatchFetchOrCreateCart(context);
+
+        const branch = matchRoutes(routes, req.path);
+        await fetchData(context, branch, req.query);
+        let pageTitle = fetchPageTitleAndSnippets(context, branch);
+
         debug('Executing navigate action');
-        Router.run(app.getComponent(), req.originalUrl, async function (Handler, state) {
-
-            // Trigger fetching and wait for the data required by the components of the given route
-            await fetchData(context, state);
-
-            // Fetch page title and snippets from the route handlers
-            let pageTitleAndSnippets = fetchPageTitleAndSnippets(context, state);
-            let pageTitle = pageTitleAndSnippets ? pageTitleAndSnippets.title : null;
-
-            // Route Errors (i.e. most likely 404 Not Found)
-            // There are are routes that may be valid in the sense that they "exist" but,
-            // in reality, are invalid because the underlying resource does not exist (e.g. Product ID not found).
-            // We should catch those here and act accordingly, like rendering Not Found page or setting
-            // proper HTTP status code.
-            //
-            // *** IMPORTANT ***
-            // Getting and clearing this info must be done BEFORE dehydrating the state or else,
-            // on first route change in the client, it will still think there's an error.
-            let routeError = context.getStore(ApplicationStore).getRouteError();
-            await dispatchClearRouteErrors(context); // Very important!!!
+
+        // Route Errors (i.e. most likely 404 Not Found)
+        // There are are routes that may be valid in the sense that they "exist" but,
+        // in reality, are invalid because the underlying resource does not exist (e.g. Product ID not found).
+        // We should catch those here and act accordingly, like rendering Not Found page or setting
+        // proper HTTP status code.
+        //
+        // *** IMPORTANT ***
+        // Getting and clearing this info must be done BEFORE dehydrating the state or else,
+        // on first route change in the client, it will still think there's an error.
+        let routeError = context.getStore(ApplicationStore).getRouteError();
+        await dispatchClearRouteErrors(context); // Very important!!!
+        if (routeError) {
+            debug(`(Server) Route Error ${routeError}`);
+        }
+
+        // Fire navigate action
+        context.executeAction(navigateAction, {url: req.url }, function (err) {
+
+            debug('Exposing context state');
+            let exposed = 'window.App=' + Serialize(app.dehydrate(context)) + ';';
+
+            debug('Rendering Application component into html');
+
+            let BaseHtmlComponent = React.createFactory(BaseHtml);
+            let html = ReactDOMServer.renderToStaticMarkup(BaseHtmlComponent({
+                context: context.getComponentContext(),
+                state: exposed,
+                markup: ReactDOMServer.renderToString(
+                    <FluxibleComponent context={context.getComponentContext()}>
+                        <IntlProvider locale={locale} messages={messages[locale]}>
+                            <StaticRouter location={req.url} context={context.getComponentContext()}>
+                                <DataLoader routes={routes}>
+                                    {renderRoutes(routes)}
+                                </DataLoader>
+                            </StaticRouter>
+                        </IntlProvider>
+                    </FluxibleComponent>
+                ),
+                css: webpackStats.css,
+                scripts: webpackStats.scripts,
+                locale: locale,
+                title: (pageTitle && pageTitle.title) || config.app.title[locale],
+                staticURL: '/static'
+            }));
+
+
+            // Figure out appopriate HTTP status code:
+            // 1) Not Found component -> 404
+            // 2) Route Error -> whichever is returned
+            // 3) Business as usual -> 200
+            let responseStatus;
             if (routeError) {
-                debug(`(Server) Route Error ${routeError}`);
+                responseStatus = routeError;
+            } else {
+                responseStatus = 200;
+                // responseStatus = state.routes.some(route => route.name == 'not-found') ? 404 : 200;
             }
 
-            // Fire navigate action
-            
-            context.executeAction(navigateAction, state, function (err) {
-
-                debug('Exposing context state');
-                let exposed = 'window.App=' + Serialize(app.dehydrate(context)) + ';';
-
-                debug('Rendering Application component into html');
-                let Component = React.createFactory(Handler);
-                let BaseHtmlComponent = React.createFactory(BaseHtml);
-                let html = React.renderToStaticMarkup(BaseHtmlComponent({
-                    context: context.getComponentContext(),
-                    state: exposed,
-                    markup: React.renderToString(
-                        React.createElement(
-                            FluxibleComponent,
-                            { context: context.getComponentContext() },
-                            Component()
-                        )
-                    ),
-                    css: webpackStats.css,
-                    scripts: webpackStats.scripts,
-                    locale: locale,
-                    title: pageTitle || config.app.title,
-                    staticURL: '/static'
-                }));
-
-                // Figure out appopriate HTTP status code:
-                // 1) Not Found component -> 404
-                // 2) Route Error -> whichever is returned
-                // 3) Business as usual -> 200
-                let responseStatus;
-                if (routeError) {
-                    responseStatus = routeError;
-                } else {
-                    responseStatus = state.routes.some(route => route.name == 'not-found') ? 404 : 200;
-                }
-
-                // Return rendered component with appropriate status code.
-                debug('Sending markup');
-                return res.status(responseStatus).send(html);
-            });
+            // Return rendered component with appropriate status code.
+            debug('Sending markup');
+            return res.status(responseStatus).send(html);
         });
 
     } catch (err) {
         debug('Unhandled Server Error (Oops!)', err);
         let ServerErrorComponent = React.createFactory(ServerError);
-        let html = React.renderToStaticMarkup(ServerErrorComponent());
+        let html = ReactDOMServer.renderToStaticMarkup(ServerErrorComponent());
         return res.status(500).send(html);
     }
 });
@@ -210,6 +261,6 @@ server.use(async function (req, res, next) {
 // b) Start server
 //
 const host = 'localhost';
-const port = 4000;
+const port = 3030;
 server.listen(port, host);
 debug('Storefront Isomorphic Server running. Host: %s, Port: %s', host, port);
diff --git a/src/stores/Account/LoginStore.js b/../simple-store/src/stores/Account/LoginStore.js
index 2dff9f5..a2eb4ee 100644
--- a/src/stores/Account/LoginStore.js
+++ b/../simple-store/src/stores/Account/LoginStore.js
@@ -5,8 +5,6 @@ import createStore from 'fluxible/addons/createStore';
 
 import accountActions from '../../constants/account';
 
-let debug = require('debug')('tienda765');
-
 /**
  * Create Store.
  */
@@ -64,8 +62,8 @@ const LoginStore = createStore({
     },
 
     getToken: function () {
-        if (typeof localStorage != 'undefined') {
-            return localStorage.getItem('authToken');
+        if (this && this.getContext && this.getContext().getCookie) {
+            return this.getContext().getCookie('authToken');
         } else {
             return null;
         }
@@ -83,21 +81,21 @@ const LoginStore = createStore({
     handleLoginSuccess: function (payload) {
         this.loading = false;
         this.error = null;
-        localStorage.setItem('authToken', payload.authToken);
+        this.getContext().setCookie('authToken', payload.authToken, {maxAge: 5 * 24 * 60 * 60, path: '/'});
         this.emitChange();
     },
 
     handleLoginError: function (payload) {
         this.loading = false;
         this.error = payload;
-        localStorage.removeItem('authToken');
+        this.getContext().clearCookie('authToken');
         this.emitChange();
     },
 
     handleLogoutSuccess: function () {
         this.loading = false;
         this.error = null;
-        localStorage.removeItem('authToken');
+        this.getContext().clearCookie('authToken');
         this.emitChange();
     }
 });
diff --git a/src/stores/Application/ApplicationStore.js b/../simple-store/src/stores/Application/ApplicationStore.js
index bd3c492..b68f1d1 100644
--- a/src/stores/Application/ApplicationStore.js
+++ b/../simple-store/src/stores/Application/ApplicationStore.js
@@ -4,7 +4,7 @@
 import applicationActions from '../../constants/application';
 import createStore from 'fluxible/addons/createStore';
 
-let debug = require('debug')('tienda765');
+let debug = require('debug')('simple-store');
 
 /**
  * Create Store.
diff --git a/src/stores/Application/IntlStore.js b/../simple-store/src/stores/Application/IntlStore.js
index 1a0f566..cc0105f 100644
--- a/src/stores/Application/IntlStore.js
+++ b/../simple-store/src/stores/Application/IntlStore.js
@@ -74,16 +74,16 @@ class IntlStore extends BaseStore {
      *     message1: "message1 content in English",
      *     message2: "message2 content in English"
      *   },
-     *   es: {
-     *     message1: "message1 content in espaniol",
-     *     message2: "message2 content in espaniol"
+     *   pt: {
+     *     message1: "message1 content in Portuguese",
+     *     message2: "message2 content in Portuguese"
      *   }
      * }
      *
      * 2) But... if "key" is not provided, then it is assumed that the intl object has only one message per locale:
      * {
      *   en: "message content in English",
-     *   es: "message content in espaniol"
+     *   pt: "message content in Portuguese"
      * }
      *
      */
diff --git a/src/stores/Application/ResponsiveStore.js b/../simple-store/src/stores/Application/ResponsiveStore.js
index ea86131..81d4c0e 100644
--- a/src/stores/Application/ResponsiveStore.js
+++ b/../simple-store/src/stores/Application/ResponsiveStore.js
@@ -72,12 +72,14 @@ class ResponsiveStore extends BaseStore {
 
         if (width <= BREAK_SMALL) {
             this.breakpoint = 'handhelds';
-        } else if (width > BREAK_SMALL && width < BREAK_LARGE) {
+        } else if (width > BREAK_SMALL && width <= BREAK_LARGE) {
             this.breakpoint = 'medium-screens';
         } else {
             this.breakpoint = 'wide-screens';
         }
 
+        let prevPrevBreakpoint = prevBreakpoint;
+
         if(this.breakpoint != prevBreakpoint) {
             this.emitChange();
         }
diff --git a/src/stores/Cart/CartStore.js b/../simple-store/src/stores/Cart/CartStore.js
index b34cb03..2b31d03 100644
--- a/src/stores/Cart/CartStore.js
+++ b/../simple-store/src/stores/Cart/CartStore.js
@@ -79,16 +79,16 @@ class CartStore extends BaseStore {
     }
 
     getCartId() {
-        if (typeof localStorage != 'undefined') {
-            return localStorage.getItem('cartId');
+        if (this && this.getContext && this.getContext().getCookie) {
+            return this.getContext().getCookie('cartId');
         } else {
             return null;
         }
     }
 
     getCartAccessToken() {
-        if (typeof localStorage != 'undefined') {
-            return localStorage.getItem('cartAccessToken');
+        if (this && this.getContext && this.getContext().getCookie) {
+            return this.getContext().getCookie('cartAccessToken');
         } else {
             return null;
         }
@@ -150,11 +150,12 @@ class CartStore extends BaseStore {
         this.loading = false;
         this.error = null;
         this.cart = payload;
-        localStorage.setItem('cartId', payload.id);
+        this.getContext().setCookie('cartId', payload.id, {maxAge: 100 * 24 * 60 * 60, path: '/'});
+
         if (!payload.userId && payload.accessToken) {
-            localStorage.setItem('cartAccessToken', payload.accessToken);
+            this.getContext().setCookie('cartAccessToken', payload.accessToken, {maxAge: 100 * 24 * 60 * 60, path: '/'});
         } else {
-            localStorage.removeItem('cartAccessToken');
+            this.getContext().clearCookie('cartAccessToken');
         }
         this.emitChange();
     }
@@ -176,8 +177,8 @@ class CartStore extends BaseStore {
         this.loading = false;
         this.error = null;
         this.cart = payload;
-        localStorage.setItem('cartId', payload.id);
-        localStorage.removeItem('cartAccessToken');
+        this.getContext().setCookie('cartId', payload.id, {maxAge: 100 * 24 * 60 * 60, path: '/'});
+        this.getContext().clearCookie('cartAccessToken');
         this.emitChange();
     }
 
diff --git a/src/stores/GroupChico/GroupChicoAddStore.js b/src/stores/GroupChico/GroupChicoAddStore.js
deleted file mode 100644
index d661810..0000000
--- a/src/stores/GroupChico/GroupChicoAddStore.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupChico';
-
-/**
-* Store
-*/
-class GroupChicoAddStore extends BaseStore {
-
-   static storeName = 'GroupChicoAddStore';
-
-   static handlers = {
-       [groupActions.GROUPS_CHICO_ADD]: 'handleAddRequest',
-       [groupActions.GROUPS_CHICO_ADD_SUCCESS]: 'handleAddSuccess',
-       [groupActions.GROUPS_CHICO_ADD_ERROR]: 'handleAddError'
-   };
-
-   constructor(dispatcher) {
-       super(dispatcher);
-       this.loading = false;
-       this.error = undefined;
-       this.group = undefined;
-   }
-
-   getState() {
-       return {
-           loading: this.loading,
-           error: this.error,
-           group: this.group
-       }
-   }
-
-   //
-   // Isomorphic stuff
-   //
-
-   dehydrate() {
-       return this.getState();
-   }
-
-   rehydrate(state) {
-       this.loading = state.loading;
-       this.error = state.error;
-       this.group = state.group;
-   }
-
-   //
-   // Getters
-   //
-
-   isLoading() {
-       return this.loading === true;
-   }
-
-   getError() {
-       return this.error;
-   }
-
-   getGroup() {
-       return this.group;
-   }
-
-   //
-   // Handlers
-   //
-
-   handleAddRequest() {
-       this.loading = true;
-       this.emitChange();
-   }
-
-   handleAddSuccess(payload) {
-       this.loading = false;
-       this.error = null;
-       this.group = payload;
-       this.emitChange();
-   }
-
-   handleAddError(payload) {
-       this.loading = false;
-       this.error = payload;
-       this.emitChange();
-   }
-}
-
-/**
-* Export
-*/
-export default GroupChicoAddStore;
diff --git a/src/stores/GroupChico/GroupChicoDetailsStore.js b/src/stores/GroupChico/GroupChicoDetailsStore.js
deleted file mode 100644
index 0c957bd..0000000
--- a/src/stores/GroupChico/GroupChicoDetailsStore.js
+++ /dev/null
@@ -1,94 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupChico';
-
-/**
-* Store
-*/
-class GroupChicoDetailsStore extends BaseStore {
-
-  static storeName = 'GroupChicoDetailsStore';
-
-  static handlers = {
-      [groupActions.GROUPS_CHICO_ITEM]: 'handleRequest',
-      [groupActions.GROUPS_CHICO_ITEM_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_CHICO_ITEM_ERROR]: 'handleError',
-      [groupActions.GROUPS_CHICO_ITEM_SAVE]: 'handleRequest',
-      [groupActions.GROUPS_CHICO_ITEM_SAVE_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_CHICO_ITEM_SAVE_ERROR]: 'handleError'
-  };
-
-  constructor(dispatcher) {
-      super(dispatcher);
-      this.loading = false;
-      this.error = undefined;
-      this.group = undefined;
-  }
-
-  getState() {
-      return {
-          loading: this.loading,
-          error: this.error,
-          group: this.group
-      }
-  }
-
-  //
-  // Isomorphic stuff
-  //
-
-  dehydrate() {
-      return this.getState();
-  }
-
-  rehydrate(state) {
-      this.loading = state.loading;
-      this.error = state.error;
-      this.group = state.group;
-  }
-
-  //
-  // Getters
-  //
-
-  isLoading() {
-      return this.loading === true;
-  }
-
-  getError() {
-      return this.error;
-  }
-
-  getGroup() {
-      return this.group;
-  }
-
-  //
-  // Handlers
-  //
-
-  handleRequest() {
-      this.loading = true;
-      this.emitChange();
-  }
-
-  handleSuccess(payload) {
-      this.loading = false;
-      this.error = null;
-      this.group = payload;
-      this.emitChange();
-  }
-
-  handleError(payload) {
-      this.loading = false;
-      this.error = payload;
-      this.emitChange();
-  }
-}
-
-/**
-* Export
-*/
-export default GroupChicoDetailsStore;
diff --git a/src/stores/GroupChico/GroupChicoListStore.js b/src/stores/GroupChico/GroupChicoListStore.js
deleted file mode 100644
index f066e0e..0000000
--- a/src/stores/GroupChico/GroupChicoListStore.js
+++ /dev/null
@@ -1,95 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupChico';
-
-/**
-* Store
-*/
-class GroupChicoListStore extends BaseStore {
-
-   static storeName = 'GroupChicoListStore';
-
-   static handlers = {
-       [groupActions.GROUPS_CHICO_FIND]: 'handleListRequest',
-       [groupActions.GROUPS_CHICO_FIND_SUCCESS]: 'handleListSuccess',
-       [groupActions.GROUPS_CHICO_FIND_ERROR]: 'handleListError'
-   };
-
-   constructor(dispatcher) {
-       super(dispatcher);
-       this.loading = false;
-       this.error = undefined;
-       this.groups = undefined;
-   }
-
-   getState() {
-       return {
-           loading: this.loading,
-           error: this.error,
-           groups: this.groups
-       }
-   }
-
-   //
-   // Isomorphic stuff
-   //
-
-   dehydrate() {
-       return this.getState();
-   }
-
-   rehydrate(state) {
-       this.loading = state.loading;
-       this.error = state.error;
-       this.groups = state.groups;
-   }
-
-   //
-   // Getters
-   //
-
-   isLoading() {
-       return this.loading === true;
-   }
-
-   getError() {
-       return this.error;
-   }
-
-   getGroups() {
-       if (this.groups && this.groups.items) {
-           return this.groups.items;
-       } else {
-           return [];
-       }
-   }
-
-   //
-   // Handlers
-   //
-
-   handleListRequest() {
-       this.loading = true;
-       this.emitChange();
-   }
-
-   handleListSuccess(payload) {
-       this.loading = false;
-       this.error = null;
-       this.groups = payload;
-       this.emitChange();
-   }
-
-   handleListError(payload) {
-       this.loading = false;
-       this.error = payload;
-       this.emitChange();
-   }
-}
-
-/**
-* Export
-*/
-export default GroupChicoListStore;
diff --git a/src/stores/GroupGrande/GroupGrandeAddStore.js b/src/stores/GroupGrande/GroupGrandeAddStore.js
deleted file mode 100644
index 2115533..0000000
--- a/src/stores/GroupGrande/GroupGrandeAddStore.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupGrande';
-
-/**
-* Store
-*/
-class GroupGrandeAddStore extends BaseStore {
-
-   static storeName = 'GroupGrandeAddStore';
-
-   static handlers = {
-       [groupActions.GROUPS_GRANDE_ADD]: 'handleAddRequest',
-       [groupActions.GROUPS_GRANDE_ADD_SUCCESS]: 'handleAddSuccess',
-       [groupActions.GROUPS_GRANDE_ADD_ERROR]: 'handleAddError'
-   };
-
-   constructor(dispatcher) {
-       super(dispatcher);
-       this.loading = false;
-       this.error = undefined;
-       this.group = undefined;
-   }
-
-   getState() {
-       return {
-           loading: this.loading,
-           error: this.error,
-           group: this.group
-       }
-   }
-
-   //
-   // Isomorphic stuff
-   //
-
-   dehydrate() {
-       return this.getState();
-   }
-
-   rehydrate(state) {
-       this.loading = state.loading;
-       this.error = state.error;
-       this.group = state.group;
-   }
-
-   //
-   // Getters
-   //
-
-   isLoading() {
-       return this.loading === true;
-   }
-
-   getError() {
-       return this.error;
-   }
-
-   getGroup() {
-       return this.group;
-   }
-
-   //
-   // Handlers
-   //
-
-   handleAddRequest() {
-       this.loading = true;
-       this.emitChange();
-   }
-
-   handleAddSuccess(payload) {
-       this.loading = false;
-       this.error = null;
-       this.group = payload;
-       this.emitChange();
-   }
-
-   handleAddError(payload) {
-       this.loading = false;
-       this.error = payload;
-       this.emitChange();
-   }
-}
-
-/**
-* Export
-*/
-export default GroupGrandeAddStore;
diff --git a/src/stores/GroupGrande/GroupGrandeDetailsStore.js b/src/stores/GroupGrande/GroupGrandeDetailsStore.js
deleted file mode 100644
index 16a7454..0000000
--- a/src/stores/GroupGrande/GroupGrandeDetailsStore.js
+++ /dev/null
@@ -1,94 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupGrande';
-
-/**
-* Store
-*/
-class GroupGrandeDetailsStore extends BaseStore {
-
-  static storeName = 'GroupGrandeDetailsStore';
-
-  static handlers = {
-      [groupActions.GROUPS_GRANDE_ITEM]: 'handleRequest',
-      [groupActions.GROUPS_GRANDE_ITEM_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_GRANDE_ITEM_ERROR]: 'handleError',
-      [groupActions.GROUPS_GRANDE_ITEM_SAVE]: 'handleRequest',
-      [groupActions.GROUPS_GRANDE_ITEM_SAVE_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_GRANDE_ITEM_SAVE_ERROR]: 'handleError'
-  };
-
-  constructor(dispatcher) {
-      super(dispatcher);
-      this.loading = false;
-      this.error = undefined;
-      this.group = undefined;
-  }
-
-  getState() {
-      return {
-          loading: this.loading,
-          error: this.error,
-          group: this.group
-      }
-  }
-
-  //
-  // Isomorphic stuff
-  //
-
-  dehydrate() {
-      return this.getState();
-  }
-
-  rehydrate(state) {
-      this.loading = state.loading;
-      this.error = state.error;
-      this.group = state.group;
-  }
-
-  //
-  // Getters
-  //
-
-  isLoading() {
-      return this.loading === true;
-  }
-
-  getError() {
-      return this.error;
-  }
-
-  getGroup() {
-      return this.group;
-  }
-
-  //
-  // Handlers
-  //
-
-  handleRequest() {
-      this.loading = true;
-      this.emitChange();
-  }
-
-  handleSuccess(payload) {
-      this.loading = false;
-      this.error = null;
-      this.group = payload;
-      this.emitChange();
-  }
-
-  handleError(payload) {
-      this.loading = false;
-      this.error = payload;
-      this.emitChange();
-  }
-}
-
-/**
-* Export
-*/
-export default GroupGrandeDetailsStore;
diff --git a/src/stores/GroupGrande/GroupGrandeListStore.js b/src/stores/GroupGrande/GroupGrandeListStore.js
deleted file mode 100644
index 2fbaa0f..0000000
--- a/src/stores/GroupGrande/GroupGrandeListStore.js
+++ /dev/null
@@ -1,95 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupGrande';
-
-/**
-* Store
-*/
-class GroupGrandeListStore extends BaseStore {
-
-   static storeName = 'GroupGrandeListStore';
-
-   static handlers = {
-       [groupActions.GROUPS_GRANDE_FIND]: 'handleListRequest',
-       [groupActions.GROUPS_GRANDE_FIND_SUCCESS]: 'handleListSuccess',
-       [groupActions.GROUPS_GRANDE_FIND_ERROR]: 'handleListError'
-   };
-
-   constructor(dispatcher) {
-       super(dispatcher);
-       this.loading = false;
-       this.error = undefined;
-       this.groups = undefined;
-   }
-
-   getState() {
-       return {
-           loading: this.loading,
-           error: this.error,
-           groups: this.groups
-       }
-   }
-
-   //
-   // Isomorphic stuff
-   //
-
-   dehydrate() {
-       return this.getState();
-   }
-
-   rehydrate(state) {
-       this.loading = state.loading;
-       this.error = state.error;
-       this.groups = state.groups;
-   }
-
-   //
-   // Getters
-   //
-
-   isLoading() {
-       return this.loading === true;
-   }
-
-   getError() {
-       return this.error;
-   }
-
-   getGroups() {
-       if (this.groups && this.groups.items) {
-           return this.groups.items;
-       } else {
-           return [];
-       }
-   }
-
-   //
-   // Handlers
-   //
-
-   handleListRequest() {
-       this.loading = true;
-       this.emitChange();
-   }
-
-   handleListSuccess(payload) {
-       this.loading = false;
-       this.error = null;
-       this.groups = payload;
-       this.emitChange();
-   }
-
-   handleListError(payload) {
-       this.loading = false;
-       this.error = payload;
-       this.emitChange();
-   }
-}
-
-/**
-* Export
-*/
-export default GroupGrandeListStore;
diff --git a/src/stores/GroupMediano/GroupMedianoAddStore.js b/src/stores/GroupMediano/GroupMedianoAddStore.js
deleted file mode 100644
index 493f5fc..0000000
--- a/src/stores/GroupMediano/GroupMedianoAddStore.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupMediano';
-
-/**
-* Store
-*/
-class GroupMedianoAddStore extends BaseStore {
-
- static storeName = 'GroupMedianoAddStore';
-
- static handlers = {
-     [groupActions.GROUPS_MEDIANO_ADD]: 'handleAddRequest',
-     [groupActions.GROUPS_MEDIANO_ADD_SUCCESS]: 'handleAddSuccess',
-     [groupActions.GROUPS_MEDIANO_ADD_ERROR]: 'handleAddError'
- };
-
- constructor(dispatcher) {
-     super(dispatcher);
-     this.loading = false;
-     this.error = undefined;
-     this.group = undefined;
- }
-
- getState() {
-     return {
-         loading: this.loading,
-         error: this.error,
-         group: this.group
-     }
- }
-
- //
- // Isomorphic stuff
- //
-
- dehydrate() {
-     return this.getState();
- }
-
- rehydrate(state) {
-     this.loading = state.loading;
-     this.error = state.error;
-     this.group = state.group;
- }
-
- //
- // Getters
- //
-
- isLoading() {
-     return this.loading === true;
- }
-
- getError() {
-     return this.error;
- }
-
- getGroup() {
-     return this.group;
- }
-
- //
- // Handlers
- //
-
- handleAddRequest() {
-     this.loading = true;
-     this.emitChange();
- }
-
- handleAddSuccess(payload) {
-     this.loading = false;
-     this.error = null;
-     this.group = payload;
-     this.emitChange();
- }
-
- handleAddError(payload) {
-     this.loading = false;
-     this.error = payload;
-     this.emitChange();
- }
-}
-
-/**
-* Export
-*/
-export default GroupMedianoAddStore;
diff --git a/src/stores/GroupMediano/GroupMedianoDetailsStore.js b/src/stores/GroupMediano/GroupMedianoDetailsStore.js
deleted file mode 100644
index 2da7a97..0000000
--- a/src/stores/GroupMediano/GroupMedianoDetailsStore.js
+++ /dev/null
@@ -1,94 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupMediano';
-
-/**
-* Store
-*/
-class GroupMedianoDetailsStore extends BaseStore {
-
-  static storeName = 'GroupMedianoDetailsStore';
-
-  static handlers = {
-      [groupActions.GROUPS_MEDIANO_ITEM]: 'handleRequest',
-      [groupActions.GROUPS_MEDIANO_ITEM_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_MEDIANO_ITEM_ERROR]: 'handleError',
-      [groupActions.GROUPS_MEDIANO_ITEM_SAVE]: 'handleRequest',
-      [groupActions.GROUPS_MEDIANO_ITEM_SAVE_SUCCESS]: 'handleSuccess',
-      [groupActions.GROUPS_MEDIANO_ITEM_SAVE_ERROR]: 'handleError'
-  };
-
-  constructor(dispatcher) {
-      super(dispatcher);
-      this.loading = false;
-      this.error = undefined;
-      this.group = undefined;
-  }
-
-  getState() {
-      return {
-          loading: this.loading,
-          error: this.error,
-          group: this.group
-      }
-  }
-
-  //
-  // Isomorphic stuff
-  //
-
-  dehydrate() {
-      return this.getState();
-  }
-
-  rehydrate(state) {
-      this.loading = state.loading;
-      this.error = state.error;
-      this.group = state.group;
-  }
-
-  //
-  // Getters
-  //
-
-  isLoading() {
-      return this.loading === true;
-  }
-
-  getError() {
-      return this.error;
-  }
-
-  getGroup() {
-      return this.group;
-  }
-
-  //
-  // Handlers
-  //
-
-  handleRequest() {
-      this.loading = true;
-      this.emitChange();
-  }
-
-  handleSuccess(payload) {
-      this.loading = false;
-      this.error = null;
-      this.group = payload;
-      this.emitChange();
-  }
-
-  handleError(payload) {
-      this.loading = false;
-      this.error = payload;
-      this.emitChange();
-  }
-}
-
-/**
-* Export
-*/
-export default GroupMedianoDetailsStore;
diff --git a/src/stores/GroupMediano/GroupMedianoListStore.js b/src/stores/GroupMediano/GroupMedianoListStore.js
deleted file mode 100644
index 22c83d7..0000000
--- a/src/stores/GroupMediano/GroupMedianoListStore.js
+++ /dev/null
@@ -1,95 +0,0 @@
-/**
-* Imports
-*/
-import BaseStore from 'fluxible/addons/BaseStore';
-import groupActions from '../../constants/groupMediano';
-
-/**
-* Store
-*/
-class GroupMedianoListStore extends BaseStore {
-
-   static storeName = 'GroupMedianoListStore';
-
-   static handlers = {
-       [groupActions.GROUPS_MEDIANO_FIND]: 'handleListRequest',
-       [groupActions.GROUPS_MEDIANO_FIND_SUCCESS]: 'handleListSuccess',
-       [groupActions.GROUPS_MEDIANO_FIND_ERROR]: 'handleListError'
-   };
-
-   constructor(dispatcher) {
-       super(dispatcher);
-       this.loading = false;
-       this.error = undefined;
-       this.groups = undefined;
-   }
-
-   getState() {
-       return {
-           loading: this.loading,
-           error: this.error,
-           groups: this.groups
-       }
-   }
-
-   //
-   // Isomorphic stuff
-   //
-
-   dehydrate() {
-       return this.getState();
-   }
-
-   rehydrate(state) {
-       this.loading = state.loading;
-       this.error = state.error;
-       this.groups = state.groups;
-   }
-
-   //
-   // Getters
-   //
-
-   isLoading() {
-       return this.loading === true;
-   }
-
-   getError() {
-       return this.error;
-   }
-
-   getGroups() {
-       if (this.groups && this.groups.items) {
-           return this.groups.items;
-       } else {
-           return [];
-       }
-   }
-
-   //
-   // Handlers
-   //
-
-   handleListRequest() {
-       this.loading = true;
-       this.emitChange();
-   }
-
-   handleListSuccess(payload) {
-       this.loading = false;
-       this.error = null;
-       this.groups = payload;
-       this.emitChange();
-   }
-
-   handleListError(payload) {
-       this.loading = false;
-       this.error = payload;
-       this.emitChange();
-   }
-}
-
-/**
-* Export
-*/
-export default GroupMedianoListStore;
diff --git a/src/styles/utils/fonts.scss b/../simple-store/src/styles/utils/fonts.scss
index 9779db6..54f40d3 100644
--- a/src/styles/utils/fonts.scss
+++ b/../simple-store/src/styles/utils/fonts.scss
@@ -1,2 +1 @@
-@import url('//fonts.googleapis.com/css?family=Montserrat:400,700');
 @import url('//fonts.googleapis.com/css?family=Open+Sans:400,300,600,700');
diff --git a/src/styles/variables.scss b/../simple-store/src/styles/variables.scss
index 2ef7cb4..ad006b4 100644
--- a/src/styles/variables.scss
+++ b/../simple-store/src/styles/variables.scss
@@ -1,6 +1,6 @@
 @import './mixins/breakpoints';
 
-$font-family-heading: 'Montserrat', sans-serif;
+$font-family-heading: 'Open Sans', sans-serif;
 $font-family-body: 'Open Sans', sans-serif;
 $font-size-small: 13px;
 $font-size-medium: 16px;
@@ -11,12 +11,12 @@ $font-size-heading-large: 30px;
 $font-weight-normal: normal;
 $font-weight-bold: 700;
 
-$color-heading: #5c433d;
-$color-body: rgb(85, 85, 85);
-$color-primary: rgb(194, 0, 48);
-$color-primary-hover: #EC003B;
-$color-secondary: #f4efe1;
-$color-error: red;
+$color-heading: #3a2f00;
+$color-body: #555;
+$color-primary: #ffd000;
+$color-primary-hover: lighten($color-primary, 10%);
+$color-secondary: #fcf7e3;
+$color-error: #e51108;
 $color-label-default: #aaaaaa;
 $color-label-primary: #337ab7;
 $color-label-info: #5bc0de;
diff --git a/src/utils/apiPlugin.js b/../simple-store/src/utils/apiPlugin.js
index a6d5756..a1a678c 100644
--- a/src/utils/apiPlugin.js
+++ b/../simple-store/src/utils/apiPlugin.js
@@ -2,6 +2,7 @@
  * Imports
  */
 import API from '../api';
+import cookie from 'cookie';
 
 // Flux
 import LoginStore from '../stores/Account/LoginStore';
@@ -24,6 +25,10 @@ const apiPlugin = {
         // `options` is the same as what is passed into `Fluxible.createContext(options)`
         let config = options.config && options.config.api;
 
+        let req = options.req;
+        let res = options.res;
+        let cookies = req ? req.cookies : cookie.parse(document.cookie);
+
         // Returns a context plugin
         return {
             /**
@@ -34,12 +39,47 @@ const apiPlugin = {
              * @param {Object} app Fluxible instance
              */
             plugActionContext: function (actionContext, context, app) {
+                let getAuthToken = context.getStore(LoginStore).getToken;
+
+                // This should be done on LoginStore, but there is conflict of plugins:
+                // we couldn't have access to storeContext plugin method from this plugin method
+                if (!getAuthToken()) {
+                    getAuthToken = function () {
+                        return cookies['authToken'];
+                    }
+                }
+
                 actionContext.api = new API({
                     options: config,
-                    getAuthToken: context.getStore(LoginStore).getToken
+                    getAuthToken: getAuthToken
                 });
             },
 
+            plugStoreContext: function (storeContext, context, app) {
+                storeContext.setCookie = function (name, value, options) {
+                    let cookieStr = cookie.serialize(name, value, options);
+                    if (res) {
+                        let header = res.getHeader('Set-Cookie') || [];
+                        if (!Array.isArray(header)) {
+                            header = [header];
+                        }
+
+                        header.push(cookieStr);
+                        res.setHeader('Set-Cookie', header);
+                    } else {
+                        document.cookie = cookieStr;
+                    }
+                    cookies[name] = value;
+                };
+                storeContext.clearCookie = function (name, options) {
+                    storeContext.setCookie(name, "", {maxAge: -1, path: '/' });
+                    delete cookies[name];
+                };
+                storeContext.getCookie = function (name) {
+                    return cookies[name];
+                };
+            },
+
             /**
              * Allows context plugin settings to be persisted between server and client. Called on server
              * to send data down to the client
diff --git a/src/utils/fetchData.js b/../simple-store/src/utils/fetchData.js
index da2df18..4204d5b 100644
--- a/src/utils/fetchData.js
+++ b/../simple-store/src/utils/fetchData.js
@@ -7,18 +7,18 @@ import async from 'async';
  * Fetch data required for components involved in the given route,
  * according to the respective hierarchy.
  */
-export default async function (context, state) {
+export default async function (context, branch, query) {
 
     // Create the promises hash.
-    let promises = state.routes.filter(function (route) {
-        // Gather up the handlers that have a static `fetchData` method.
-        return route.handler.fetchData;
-    }).reduce(function (promises, route) {
+    let promises = branch.filter(function ({route}) {
+        return route.component.fetchData;
+    }).reduce(function (promises, {route, match}) {
         // Reduce to a hash of `key:promise`.
-        promises[route.name] = route.handler.fetchData.bind(null, context, state.params, state.query);
+        promises[route.name] = route.component.fetchData.bind(null, context, match.params, query);
         return promises;
     }, {});
 
+
     // Return promise required for this function to be async/await.
     return new Promise(function (resolve, reject) {
         // Series, so that the component hierarchy is respected when fetching data and only start the next
@@ -27,7 +27,7 @@ export default async function (context, state) {
             if (err) {
                 reject(err);
             } else {
-                resolve(results);    
+                resolve(results);
             }
         });
     });
diff --git a/src/utils/fetchPageTitleAndSnippets.js b/../simple-store/src/utils/fetchPageTitleAndSnippets.js
index 4299824..20f6e6c 100644
--- a/src/utils/fetchPageTitleAndSnippets.js
+++ b/../simple-store/src/utils/fetchPageTitleAndSnippets.js
@@ -1,15 +1,14 @@
-let debug = require('debug')('tienda765');
-
 /**
  * Go through the route handlers that have page title and snippets definitions
  * and return the last one in the hierarchy
  */
-export default function fetchPageTitleAndSnippets(context, state) {
-    let routes = state.routes.filter(function (route) {
-        return route.handler.pageTitleAndSnippets;
+export default function fetchPageTitleAndSnippets(context, branch) {
+    let routes = branch.filter(function ({route}) {
+        return route.component.pageTitleAndSnippets;
     });
+
     if (routes.length > 0) {
-        return routes[routes.length-1].handler.pageTitleAndSnippets(context, state.params, state.query);
+        return routes[routes.length-1].route.component.pageTitleAndSnippets(context, routes[routes.length-1].match.params, routes[routes.length-1].match.query);
     } else {
         return null;
     }
diff --git a/src/utils/intlClientPolyfill.js b/../simple-store/src/utils/intlClientPolyfill.js
index bf54077..b72e8b1 100644
--- a/src/utils/intlClientPolyfill.js
+++ b/../simple-store/src/utils/intlClientPolyfill.js
@@ -26,11 +26,14 @@ const loadIntlPolyfill = function (locale) {
 
         // When building: create a intl chunk with webpack
         // When executing: run the callback once the chunk has been download.
-        require.ensure(['intl'], (require) => {
-            require('intl'); // apply the polyfill
-            debug('Intl polyfill for %s has been loaded', locale);
-            resolve();
-        }, 'intl');
+        import(/* webpackChunkName: "intl" */ 'intl')
+                .then(module => {
+                    debug('Intl polyfill for %s has been loaded', locale);
+                    resolve();
+                })
+                .catch(err => {
+                    debug(err);
+                });
     });
 };
 
@@ -49,107 +52,86 @@ const loadLocaleData = function (locale) {
     // Make sure ReactIntl is in the global scope: this is required for adding locale-data
     // Since ReactIntl needs the `Intl` polyfill to be required (sic) we must place
     // this require here, when loadIntlPolyfill is supposed to be present
-    require('expose?ReactIntl!react-intl');
+    require('expose-loader?ReactIntl!react-intl');
 
     return new Promise((resolve) => {
 
         switch (locale) {
 
             //
-            // Italian
+            // Ukranian (default)
             //
-            case 'it':
+            case 'uk':
                 if (!hasIntl) {
-                    require.ensure([
-                        'intl/locale-data/jsonp/it',
-                        'react-intl/dist/locale-data/it'
-                    ], (require) => {
-                        require('intl/locale-data/jsonp/it');
-                        require('react-intl/dist/locale-data/it');
-                        debug('Intl and ReactIntl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-it');
+                    import(/* webpackChunkName: "locale-uk" */ 'intl/locale-data/jsonp/uk')
+                        .then(module => {
+                            import(/* webpackChunkName: "locale-uk" */ 'react-intl/locale-data/uk')
+                                .then(module => {
+                                    debug('Intl and ReactIntl locale-data for %s has been downloaded', locale);
+                                    resolve(module.default);
+                                })
+                        })
+                        .catch(err => {
+                            debug(err);
+                        });
                 }
                 else {
-                    require.ensure([
-                        'react-intl/dist/locale-data/it'
-                    ], (require) => {
-                        require('react-intl/dist/locale-data/it');
-                        debug('ReactIntl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-it-no-intl');
+                    import(/* webpackChunkName: "locale-uk-no-intl" */ 'react-intl/locale-data/uk')
+                        .then(module => {
+                            debug('ReactIntl locale-data for %s has been downloaded', locale);
+                            resolve(module.default);
+                        })
+                        .catch(err => {
+                            debug(err);
+                        });
                 }
                 break;
 
             //
-            // French
+            // Russian
             //
-            case 'fr':
+            case 'ru':
                 if (!hasIntl) {
-                    require.ensure([
-                        'intl/locale-data/jsonp/fr',
-                        'react-intl/dist/locale-data/fr'
-                    ], (require) => {
-                        require('intl/locale-data/jsonp/fr');
-                        require('react-intl/dist/locale-data/fr');
-                        debug('Intl and ReactIntl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-fr');
+                    import(/* webpackChunkName: "locale-ru" */ 'intl/locale-data/jsonp/ru')
+                        .then(module => {
+                            import(/* webpackChunkName: "locale-ru" */ 'react-intl/locale-data/ru')
+                                .then(module => {
+                                    debug('Intl and ReactIntl locale-data for %s has been downloaded', locale);
+                                    resolve(module.default);
+                                })
+                        })
+                        .catch(err => {
+                            debug(err);
+                        });
                 }
                 else {
-                    require.ensure([
-                        'react-intl/dist/locale-data/fr'
-                    ], (require) => {
-                        require('react-intl/dist/locale-data/fr');
-                        debug('ReactIntl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-fr-no-intl');
+                    import(/* webpackChunkName: "locale-ru-no-intl" */ 'react-intl/locale-data/ru')
+                        .then(module => {
+                            debug('ReactIntl locale-data for %s has been downloaded', locale);
+                            resolve(module.default);
+                        })
+                        .catch(err => {
+                            debug(err);
+                        });
                 }
                 break;
-
             //
-            // espaniol
-            //
-            case 'es':
-                if (!hasIntl) {
-                    require.ensure([
-                        'intl/locale-data/jsonp/es',
-                        'react-intl/dist/locale-data/es'
-                    ], (require) => {
-                        require('intl/locale-data/jsonp/es');
-                        require('react-intl/dist/locale-data/es');
-                        debug('Intl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-es');
-                }
-                else {
-                    require.ensure([
-                        'react-intl/dist/locale-data/es'
-                    ], (require) => {
-                        require('react-intl/dist/locale-data/es');
-                        debug('ReactIntl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-es-no-intl');
-                }
-                break;
-
-            //
-            // English (default)
+            // English
             //
             default:
                 if (!hasIntl) {
-                    require.ensure([
-                        'intl/locale-data/jsonp/en'
-                    ], (require) => {
-                        require('intl/locale-data/jsonp/en');
-                        debug('Intl locale-data for %s has been downloaded', locale);
-                        resolve();
-                    }, 'locale-en');
+                    import(/* webpackChunkName: "locale-en" */ 'intl/locale-data/jsonp/en')
+                        .then(module => {
+                            debug('Intl locale-data for %s has been downloaded', locale);
+                            resolve(module.default);
+                        })
+                        .catch(err => {
+                            debug(err);
+                        });
                 }
                 else {
                     resolve();
                 }
-
         } // EOS (End-of-Switch)
     });
 };
diff --git a/src/utils/intlServerPolyfill.js b/../simple-store/src/utils/intlServerPolyfill.js
index 0b72f75..ae38378 100644
--- a/src/utils/intlServerPolyfill.js
+++ b/../simple-store/src/utils/intlServerPolyfill.js
@@ -2,8 +2,9 @@ import areIntlLocalesSupported from 'intl-locales-supported';
 
 let localesMyAppSupports = [
     /* list locales here */
-    'en',
-    'es'
+    'uk',
+    'ru',
+    'en'
 ];
 
 if (global.Intl) {
diff --git a/src/utils/strings.js b/../simple-store/src/utils/strings.js
index 9343413..672d464 100644
--- a/src/utils/strings.js
+++ b/../simple-store/src/utils/strings.js
@@ -21,6 +21,10 @@ function capitalise(string) {
  * @returns {string}
  */
 function slugify(text) {
+    if (typeof text !== 'string' && !(text instanceof String)) {
+        return '';
+    }
+
     text = text.replace(/^\s+|\s+$/g, ''); // trim
     text = text.toLowerCase();
 
